<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title></title>
    <link>/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 01 Jun 2023 20:17:11 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>文生图 Imagen 扩散模型简介</title>
      <link>/posts/review_imagen/</link>
      <pubDate>Thu, 01 Jun 2023 20:17:11 +0800</pubDate>
      
      <guid>/posts/review_imagen/</guid>
      <description>Review Imagen 本文是对论文 Photorealistic Text-to-Image Diffusion Models with Deep Language Understanding 的简介
Imagen 是 Google 在22年5月发表的一篇关于文生图任务的论文。其主体框架基于 Diffusion 模型。和其他文生图（比如 DALLE-2，Stable Diffusion）模型不同的地方是：
Imagen 使用大语言模型（T5-XXL 模型）。论文中使用大语言模型作为condition，在文生图任务上表现很好。 Imagen 基于像素空间生成图像。DALLE-2, Latent Diffusion 是基于 Latent 空间生成图像。 Imagen 的效果如下：
Imagen的核心贡献：
利用预训练大语言模型提取文本的 embedding 作为 condition 对文生图任务非常有效。并且实验表明增加语言模型的大小比增加 diffusion 模型大小要更加有效。 动态阈值，改进 diffusion 采样过程。动态阈值使得在生成时可以利用比较的大的引导权重，使得生成的图片更加真实和逼真。 Diffusion 模型框架采用 Efficient U-Net Large guidance weight samples:
增大 classifier-free guidance 的权重可以改善生成图像-文本对齐，但是会破坏图像的保真度，产生高饱和度，和不自然的现象。实验发现这是由于高 cfg 权重会导致训练-测试不匹配。在采样步骤 $t$ 时，被预测的 $\hat{x_0}^{t}$ 必须在训练数据 x 的相同范围内，即[-1, 1]之间，但我们发现高 cfg 权重，会导致预测的 x 超出这个范围。扩散模型在采样过程中会连续应用其自身的输出，当中某一步出现这类训练-测试不匹配的情况，会导致生成的图像不自然。
为了解决这个问题，Imagen 提出静态阈值和动态阈值。</description>
    </item>
    
    <item>
      <title>文生图扩散模型</title>
      <link>/posts/text-to-image-diffusion-survey/</link>
      <pubDate>Tue, 09 May 2023 15:58:14 +0800</pubDate>
      
      <guid>/posts/text-to-image-diffusion-survey/</guid>
      <description>Text-to-image Diffusion Models in Generative AI: A Survey 本文是关于 Text-to-image Diffusion Models in Generative AI:A Survey 的翻译和摘要。
自2021年2月 OpenAI 推出 DALL- E 之后，文生图进入了AI研究人员和大众的视野。伴随着22年 DALL-E 2， Imagen 等 paper 的发布，文生图模型的生成效果突破了临界点，达到了可商用的程度，商业价值的提升也让其热度不断攀升。
开源社区推出的StableDiffusion让广大的开发者可以基于该模型做各种各样的 finetune 和修改，创造出了非常多效果惊人的模型。
文生图算法研究是计算机视觉中的经典问题之一。如下图所示，在21年之前，这一领域前几年是通过GAN（对抗式生成网络）网络框架来进行相关探索。21年，OpenAI release了DALL-E，正式把文生图算法带入大模型领域。
文生图大模型分成两个不同的技术流派，一种是以 DALL-E 为首的基于 transformer 框架的自回归模型，一种是以 DDPM 为首的 diffusion 模型。共同点是两种方案都需要海量的数据，以及比较大网络参数模型。
下图是一些主流模型的训练数据量和网络参数大小对比：
自回归模型 图一中蓝色部分是属于基于 transformer 的自回归模型，从当前的发展趋势来看是明显不如 Diffusion 模型一派。
但基于 transformer 的 DALL-E 在文生图大模型开山之作，这里对 DALL-E 简单做一个介绍。
DALL-E 的网络结构如下：
DALL-E 的核心思想是，文本 token(256) 和图像 token(1024) concat 成一个数据序列，通过Transformer进行自回归。
国内的CogView，Google 的 Parti 都属于这一类。</description>
    </item>
    
    <item>
      <title>读书笔记：《认知觉醒：开启自我改变的原动力》</title>
      <link>/posts/cognitive_awakening/</link>
      <pubDate>Sun, 23 Apr 2023 22:08:46 +0800</pubDate>
      
      <guid>/posts/cognitive_awakening/</guid>
      <description>《认知觉醒：开启自我改变的原动力》是一本很好读的书，他帮助我相对系统性的理清了自己这些年潜意识中模糊存在的道理。这本书给我最明显的收获有两点：
在舒适区的边缘拉伸 每日反思 在舒适区的边缘拉伸
当我们去尝试学习一门新知识的时候，或者完成一个很难的任务的时候。我们不能一上来就直接去面对最终的困难。我们需要是循序渐进，保持耐心，在舒适区和困难区之间拉伸；因为步子迈得不是太大，每一个小任务不是特别的难，经过一点努力可以达到。我们不断的完成子任务，不断的得到即时的正反馈，不断的扩大自己的舒适区，然后再新的舒适区的边缘继续往外拉伸；最后再去完成那个终极目标也变得没有那么困难。
这个过程非常像深度神经网络中的梯度下降，神经网络初始状态下能力很弱，基本上不具备任何的判断能力。经过训练，梯度下降 + 反向传播，一点一点的训练网络，去更新网络的权重，最终会得到一个可靠的神经网络。
神经网络的例子中，梯度下降中有一个学习率，对应是我们在舒适区拉伸时候的幅度。训练网络时，学习率不能设置的过大，过大的学习率会导致无法训练出理想的网络，而过小的学习率又会让网络训练时间变得非常久。类比到舒适区拉伸也是一个道理，拉伸幅度过大容易让子任务变得过难，导致最终放弃了整个人物，拉伸幅度过小，导致进展过慢，时间成本过大。
每日反思
可以拿神经网络再当作例子，反思就是梯度反向传播，是让神经网络变得有效的最核心的算法。我们自己是否能有效反思自己的日常行为，是我们提高自己生活质量的最核心的方法。
我之前有写周记的习惯，也有记录一天时间日程的习惯，这些习惯一定程度上对我会有一些帮助。每日反思可以作为一个补充，相比较一些流水账，反思的时刻会让大脑去思考，去跳出惯性，跳出舒适区，去创造一些新的东西。
每天反思，相当于每天都在刻意的去锻炼大脑，去真正意义上思考自己当天的得失，经验，如此经年累月，能预期自身会得到不错的提升。
本书还有很多其他让我颇受启发的地方：
关联，可以理解成用自己熟悉的事物对遇到的新事物做一层解释。这对于我们去真正有效理解新事物，新知识是非常有效的。我自己之前没有注意到关联的重要性，或许在今后学习新知识的过程中可以刻意的去寻找新知识和自己熟悉的知识之间的关联。
教是最好的学，这个我自身也深有体会，当我能把一个概念用自己的语言组织好，讲授给其他人的时候，我自己才算是能真正理解了这个知识点。尝试教学的过程中会不断让我去弄明白之前一些模糊的地方，去思考怎么把这个问题和一些常见的问题关联上。
专注，克制欲望，不要让自己同时做很多事，做事情的时候要保持注意力，不要三心二意，现代人不要一边刷手机一边开会，这种真的是非常浪费时间。
消除模糊，制造清晰，凡事不要凭模糊的感觉判断，要寻早清晰的证据。
真正的去思考，多数人为了逃避真正的思考，愿意做任何事情。我们在开始一项紧要的工作是，会不断做一些和工作无关的事情。这种都会造成体力，心力上的损耗，要面对问题的核心，并专注于此。
清晰的目标会帮助我们提高注意力，目标越明确，注意力的感知精度就越高，精力越集中，技能越精进。
触动学习法，读一本书，学习一门新技术，都要去寻找这当中能触动你的点；因为没有触动的话，是无法很好的去完成学习的，没有触动，就无法产生连接，没有连接，就谈不上习得了。
不要有任务心态，跑步，背单词等时候，要沉浸在当下那一刻，不要当作完成任务，那样的话身心分裂，效率会很低，也会让大脑变得焦躁。
重要的行动点单列出来，时不时地看一样。
运动，是人生幸福正相关因素的出发点。
以上。</description>
    </item>
    
    <item>
      <title>关于投资</title>
      <link>/posts/my_investment/</link>
      <pubDate>Wed, 29 Mar 2023 19:41:20 +0800</pubDate>
      
      <guid>/posts/my_investment/</guid>
      <description>工具 学生时代，没有任何的储蓄，对投资理财没有任何概念。工作之后，早期收入比较少，没有意识需要去做投资。我想可能很多人和我一样，第一次亲手操作投资理财是通过支付宝的余额宝。记得早期的支付宝1万块钱1天有1块钱的收入，存10万块，一天也有个10块钱，可以挣一顿早餐钱。从这个角度来说，支付宝是大多数人的投资启蒙。
随着社会经验的增长，身边的同事朋友出现一些股民，慢慢的也就了解到股市。我第一次开户要到2015年尾了，也就是上一次A股牛市的时候；那个时候开户还需要去证券营业厅，不像现在直接线上APP操作就能完成。2015年，牛市正盛的时候，身边的人都在热火朝天的聊着股票，今天有什么股票涨停了，什么板块会是下一个大涨行情。耳濡目染之下，我也蠢蠢欲动，想去开户；为此还特意搜了一下离公司比较远的证券营业厅，因为担心在公司附近的营业厅遇到同事，会不好意思。可想而知，那个时候，我自己潜意识里觉得炒股是一件不光彩，不正经的事。
由于开户的不方便，所以我没有在牛市正盛的时候冲进去当作韭菜，后来A股大跌，从6000点不断熔断跌回2600点，牛市变熊市。不过那轮股市的大起大落，我还是参与进去了，方式是通过在支付宝上购买沪深300的ETF。
时间来到2016年，我终于开了A股账号，开始做一些股票的买卖。同时在那段时间，深度学习在计算机视觉领域有了突飞猛进的发展，带来的一个影响就是美股的英伟达暴涨，这让我注意到了美股。但买卖美股还是比较麻烦，需要香港的银行卡，需要换汇。开通账户的过程比较曲折，不过最终我还是把美股账号开通了，开始买卖美股的股票。
所以差不多在2016年年尾，我开始有了交易股票的工具。
教训 2017年的时候，接触到了P2P，我当时觉得那种年化10个点以上的是骗人的。但我还是在这个上面吃了亏，通过一些公众号的文章，我了解到一个创始人是百度的前员工，各路IT大V也会推荐的一家公司，他的年化一般在6-7%，看起来也不高；公司创始人是我“熟悉”的公众号博主创办的，加上我“熟悉”的技术大V推荐（年轻的时候觉得做技术最牛逼，而技术大牛推荐的东西更是不得了，是明灯，全都不假思索的全盘接受），让我觉得这个理财产品可以信任，于是便开始购买他的P2P产品。前后大概持有了三四年，从早期的2，3万到最后小几十万。最终在2019年，P2P爆雷，我在该平台购买的P2P，本金利息全都没了。后来我回忆起来，没有特别的沮丧，会有一些愤怒，更多的是自责，自责自己把辛苦挣来的钱搞砸了。
投资 从17年开始，我算是慢慢开始对自己的收入做一些简单的投资，从早期的余额宝，到沪深300 ETF，再到定投沪深300。慢慢的自己有点不满足于这一类的“稳健”投资，开始买卖股票。这其中买卖A股和美股的逻辑有点不一样；
A股市场以我当时的理解，认识的公司，比如银行，算是蓝筹股，除了买来打新股，投资属性还不如沪深300 ETF。A股中涨的好公司我一个都不认识，到最后只能还是买一些蓝筹，然后跟着一些道听途说的小道消息跟风买一点各类不知名公司的股票。如此操作了一阵子，都是以亏本结束；后来我就放弃了购买A股股票，因为我既没有消息，也对A股的公司不了解。但综合考虑，基于看多中国的逻辑，选择了继续定投A股沪深300 ETF。定投沪深300的综合收益并没有自媒体们吹嘘的那么美好，如果不在底部加仓，高点卖掉，收益会非常非常有限。
对于美股，从18年开始投资的这几年，收益几乎和大盘同步，18年负收益，19年，20年正收益，21年负收益（严重跑输大盘），22年打平。对五年的美股投资做一个回顾，亏钱最多的是自己买了自己看不懂的公司，比如LMND，CAN。这两笔投资还是看了犯了和之前购买P2P类似的错误；我在不了解这两家公司，没有使用过他们的产品情况下，因为一些IT大V的推荐，便投进去了；购买这类自己不了解的公司股票，一旦他开始下跌，因为自己不懂会造成内心恐慌，最后只好认亏离场。相反，如果买的股票是自己相对熟悉的公司，下跌的时候不会那么恐慌，22年的时候，我买的一些科技股，最多的时候亏损了50个点，但因为对这些公司算是比较了解，除了心情差点，也没有很恐慌，后来事实是这些股票也慢慢回暖了。
阶段性总结下这几年的初级投资经验。
永远不要轻易相信别人投资建议 Do your own research.如果不了解某一领域，不要去投，因为好的公司也会存在价格贵的问题，不了解这一领域，就无法分辨价格是贵了，还是便宜。 买的时候，和卖的时候，要理由一致。 仓位很重要，有可能是最重要的。 投资是一件长期的事情。 虽然投资是一件长期的事情，但也要对自己的投资决策，year by year的去做review。 购买的股票不要让自己寝食难安。 起初，我希望通过投资抵抗通胀，现在我希望从投资中获得快乐。通过学习投资，我对市场经济的运行方式有了一些了解，对一家公司的优劣评判也从感性主观的判断逐渐转向通过数字量化来理解。学习的过程，是一种成长，成长就会带来一些快乐。</description>
    </item>
    
    <item>
      <title>2023年春节</title>
      <link>/posts/2023_chinese_new_year/</link>
      <pubDate>Sun, 29 Jan 2023 22:37:24 +0800</pubDate>
      
      <guid>/posts/2023_chinese_new_year/</guid>
      <description>2023年春节是自新冠疫情爆发以来的第一个社会面开放的中国新年，还没回家之前，听说回家过年的人很多。我这次选择了开车回家，从上海到安徽，400公里路，不算很远。回家的一路上倒也顺利，在上海，江苏，浙江境内路上车流量不是特别大，进入到安徽之后，高速变两车道，路况不好，大家开车也不是很守规矩，各种危险操作导致交通事故时有发生，导致有一些路段挺堵的。
回到农村老家之后，发现我们村今年回家过年的比往年人还少，一个小村子有一半的人家都彻底搬走了，老家还在村里的人家回来过年的人也没有去年多。年三十下午去墓地上坟，车子比去年少了很多，也侧面反映了回这座小城的人是比去年要少的。
在家期间，可能因为天气冷，有雨水不便，邻居之间也很少串门聊天，大家都是自己过自己的年。正月里亲戚们之间串门，很多都是男性作为代表，象征性的出现一下，女性留在城里带孩子。</description>
    </item>
    
    <item>
      <title>我的2022</title>
      <link>/posts/my_2022/</link>
      <pubDate>Sat, 31 Dec 2022 18:33:20 +0800</pubDate>
      
      <guid>/posts/my_2022/</guid>
      <description>生活的本质是变化，而人类的本性是抗拒变化。 - 《也许你该找个人聊聊》
新冠之年 2022是被新冠支配的一年。年初，上海封城三个月，那段时间的焦虑与不安还近在眼前；贵州转运密接的大巴翻车，造成30人死亡；年尾的时候，新疆持续封城，封城区域发生火灾，救援出现困难，无辜居民葬身火海。这一切无休止的封控，让大家的精神濒临奔溃，经济陷入下行，整个社会充斥着悲观情绪，让人看不到希望。
最终我们当中一小部分勇敢的年轻人不得不发声，严格的清零政策一夜之间又快速走下了历史的舞台。随着各种新冠解封政策频出，全国各地感染人数直线上升，我也在最近感染了新冠。
感染新冠，是我有记忆以来病的最重的一次，连续4天，高烧40度，烧的脑袋神经抽搐，并且嗓子非常疼，喝水都很困难。新冠的过程确实很痛苦，但好在现在过去了。只是封控或者放开，这一切的决定好似都很随意，没有任何的准备；放开之后药店根本买不到退烧药，药物要靠朋友间互相救济，血氧仪也从50块涨到100块，好笑又好气，真的挺荒唐的。
站在2022年的最后一天，仿佛新冠导致的一切终于要结束了。
收缩之年 2022，国内有新冠，国外有俄乌战争，能源危机，通胀加息。大环境的变换，对每一个个体或多或少都会有影响。经济下行，加息周期，加上信心不足，今年应该是很多互联网从业人员第一次经历如此大规模的裁员潮。我自己身处其中，作为夹心层，确实过的比较难，一方面要处理各种负面消息，另外工作还需要继续，各种的责任和义务推着自己坚持下去。
但生活不像电影，经历低谷之后能U型反转，就像新冠也不以人的意志停止传播。潘多拉魔盒打开之后，能够感知到未来会有更多的挑战和变化。每一个身处游戏之中的人，未来我想都会面对更大的不确定性。
不过今年中外互联网的裁员也不是无迹可循；前几年，低利息的环境，各大互联网公司的招聘策略偏向防守。我把这些人才招聘过来，那就意味着竞争对手没有了这些人才来和我们竞争。导致各大互联网公司招聘了大批的人员，而业务却没有同样的发展。所以今年会进行如此大规模的裁员，和前几年招聘的人员过多有关。
经历了2022，生活教给我的最大一课就是不要等待，不要说等待新冠结束，不要说等到明年，更不要有那种做好这一件事，接下来就安枕无忧了的错觉。一切都在变换中，我们能做是随着变换去好好生活。
自由和健康，是最重要的两样东西；健康需要我们去呵护，自由也不是平白无故就可以拥有。
生活琐碎 今年读了13本书，推荐的书有：
《卡拉马佐夫兄弟》 《把自己作为方法》 《也许你该找个人聊聊》
《纳瓦尔宝典》 《The Psychology Of Money》
看了40部电影和电视，推荐的电影电视有：
《诗 시》 《薄荷糖 박하사탕》 《绿洲 오아시스》 《兹山鱼谱 자산어보》
《西线无战事》 《国王理查德》 《壮志凌云2：独行侠》
《风骚律师 第六季》 《龙之家族 第一季》
今年依旧听了很多的播客，推荐的播客有：
《不明白》 《不在场》 《硅谷101》 《无人知晓》
今年的音乐播放列表中也新增了一些会反复听的歌：
《For Emma》 《Re: Stacks》
《Luv(sic) pt2》 《Luv(sic) pt3(feat. Shing02》)
《Landing Guy》)
6月份上海解封之后，我学习了滑滑板，夏天的晚上在公园里面滑一滑，挺有意思；8月份买了辆公路自行车，周末沿着黄浦江，骑骑车看看风景。困扰了一年多的腰部疼痛随着康复治疗，目前也得到了很大的缓解，感谢现代医学。腰部不疼之后，周末经常去滨江跑跑步，也挺惬意。
今年我戒了烟，或者说对香烟没有了依赖，戒了电子游戏，以及观看电子游戏视频。因为不再熬夜抽烟，打游戏，生活质量，精神头儿，都有提升。
年初去了三亚，三亚的落日很好看；中秋节去福建和家人一起过，平潭岛的风车令人印象深刻；国庆节我们去了香格里拉，感受了藏地生活和巍巍高山。今年也终于拿到了驾照，年末的时候买了辆Model Y,有了一辆自己的车。
今年我还花了蛮多时间在投资上，加息周期，股票账户跌的很惨，我自己得益于人民币汇率的降低，没有太大的亏损。但自己花费了很多时间在这件事情上，得到的回报和成长却差强人意。
新的一年，希望自己多读书，多行路，多运动，保持健康和自由，不负韶华，好好生活。
最后还是要说一句：2022过去了，我很怀念它。</description>
    </item>
    
    <item>
      <title>活到34</title>
      <link>/posts/34/</link>
      <pubDate>Sun, 13 Nov 2022 20:31:41 +0800</pubDate>
      
      <guid>/posts/34/</guid>
      <description>莫听穿林打叶声，何妨吟啸且徐行。竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。 料峭春风吹酒醒，微冷，山头斜照却相迎。回首向来萧瑟处，归去，也无风雨也无晴。 -苏轼《定风波·莫听穿林打叶声》
前几年春节的时候，我在家看中央电视台，记得节目主持人说今年的网络流行词是“囧”。去年的网络流行词应该是“内卷”，如果今年选一个流行词的话，我觉得应该是“动态清零”。
去年的此时此刻，我们还对生活充满希望，对未来做着各种积极乐观的计划；而时间进入到2022年，随着奥密克戎全球大流行，俄乌战争，通胀使得美联储进入加息周期导致股市大跌；社会经济发展也出现衰退，疫情政策让各行各业都过的很难，互联网公司也面临政策法规的变化，进而开启裁员潮。
身处其中，我想大家每个人都很难受，我自己也不例外。经历上半年的上海静态管理，以及裁员；作为个体，在这些事件之中会感受到愤怒，焦虑以及更多的是无助，你知道你自己无法改变这一切。
互联网大裁员，让我加深了个人的努力在时代的洪流面前的无力感。静态管理则让我明白勇气的可贵，以及“众生平等”。
不过虽然今年整体环境不佳，社会氛围也比较低落，回归到个体身上，我还是有一些积极的收获。
科学有效的康复训练非常重要。因为过去三年我经历了ACL，腰突，我深刻认识到健康的重要性。一个健康的，功能性好的体魄是个人的幸福的底层foundation。今年经过不断的康复训练，腰突在现在这个时间节点，终于感知不明显了。现在我又可以参与跑步，骑车，游泳等体育活动了。我还清晰的记得，今年三月份，因为腰突导致的疼痛，我一度以为我以后都无法跑步了，而我现在可以一次跑10公里，腰部也不会出现不适。 当一只鸵鸟。互联网上的大多数信息都是垃圾，让自己不玩手机游戏，不看短视频，不刷微博，这些时间拿来发呆也比接受这些负面信息要来的强。另外就是即便看到了这些负面信息，也不让自己的情绪受到影响。尝试去达到“不以物喜，不以己悲”。 尝试不要让自己很紧张，不要FOMO。我是一个相对容易紧张的人，工作，学习，生活各方面都是，这里的紧张不是指心理素质不好，指的是我会非常在意一些事。记得刚工作的时候，每个周日的晚上，我会有点难以入眠，因为紧张第二天周一。可能潜意识里面，是因为FOMO，所以导致我容易紧张。生活中，不要患得患失，不要FOMO，这样无谓的紧张就会少一些。 多去户外走走，对身心的健康非常有帮助。今年我学了滑板，开始比较长距离的骑自行车，跑步，这些户外运动，对调节心情非常有帮助，大自然会让人的神经得到舒缓。 活到34，去到35，坦白说会出现一些关于年龄方面的焦虑；焦虑于时间的流逝，对社会环境的变化感到忧心。面对这些不确定性，我想还是应该保持积极乐观的心态，不妄自菲薄，也不患得患失，像苏轼一样，“也无风雨也无晴”。</description>
    </item>
    
    <item>
      <title>AI绘画：什么是AIGC，以及AIGC相关算法介绍</title>
      <link>/posts/ai_generate_content/</link>
      <pubDate>Mon, 31 Oct 2022 17:21:09 +0800</pubDate>
      
      <guid>/posts/ai_generate_content/</guid>
      <description>2022年最火的AI算法要属AIGC：（AI-generated content，AI生成内容）。要说AIGC这一概念的流行，最大的功劳估计要算到OpenAI这家公司。2021年1月份OpenAI推出了 DALL·E 算法模型，该模型是第一个可以根据一段文本生成一张和文本相关的高质量图片模型。当时效果也是非常的惊艳。
随着更多的组织，专业人士加入到研究AIGC行列，Text2Image算法模型的生成质量也被不断提高。2022年Open AI推出了DALL·E-2, Google researchers 也发布了Imagen 和 Parti，百度针对中文，发布了文心，这些模型都可以根据自然语言文本生成高质量的图像。但上述几个模型因为各种原因并不开源，且申请license也比较困难（OpenAI会直接reject香港IP的申请），所以能够体验到模型效果的人很少。
随着开源项目Stable Diffusion 的release，人们终于有了一个能高质量生成图像且免费的Text2Image模型，并且更重要的是，开发者们还可以在这个开源模型上做个性化的二次模型优化和研发。伴随着Stable Diffusion 的public release，借助于开源社区的活力, 研究者们围绕着Stable Diffusion开发了各种各样的新算法。AI绘画在各种社交媒体上被广泛讨论，许多圈外人士，特别是设计师，建筑师的从业者对这一技术产生了很大的兴趣。</description>
    </item>
    
    <item>
      <title>什么是StableDiffusion</title>
      <link>/posts/what_is_stable_diffusion/</link>
      <pubDate>Fri, 28 Oct 2022 19:36:31 +0800</pubDate>
      
      <guid>/posts/what_is_stable_diffusion/</guid>
      <description>Stable Diffusion是由 stability.ai 于2022.8.22 开源的Text2Image模型。Stable Diffusion 项目整体是基于 Latent Diffusion 框架研发而成。
接下来先介绍下 Latent Diffusion
Motivation
基于扩散模型的图像生成领域发展迅速，扩散模型生成的图像真实度高，质量好。但是基于像素空间的扩散模型对GPU资源的要求非常高。 training the most powerful DMs often takes hundreds of GPU days (e.g. 150 1000 V100 days in and repeated evaluations on a noisy version of the input space render also inference expensive, so that producing 50k samples takes approximately 5 days on a single A100 GPU.
Latent diffusion 模型提出在latent space做diffusion的过程，latent space相较pixel space，在大小上有了很大的压缩（latent diffusion中，从512x512x3 压缩到 64x64xk） 设计了一种基于cross-attention的通用条件生成控制机制，能够实现多模态的训练。 上图横轴是隐变量每个维度压缩的bit率，纵轴是模型的失真率。模型在学习的过程中，随着压缩率变大，刚开始模型的损失下降很快，后面下降很慢，但仍然在优化。模型首先学习到的是sematic（语义）部分的压缩/转换，然后学习到的是perceptual(细节)部分的压缩/转换。</description>
    </item>
    
    <item>
      <title>understanding_diffusion_models</title>
      <link>/posts/understanding-diffusion-models/</link>
      <pubDate>Wed, 26 Oct 2022 11:04:58 +0000</pubDate>
      
      <guid>/posts/understanding-diffusion-models/</guid>
      <description>什么是Diffusion模型 这是一篇关于 What are Diffusion Models的译文。很多地方借鉴了由浅入深了解Diffusion Model
本文主要是介绍什么是DDPM：Denoising Diffusion Probabilistic Models(DDPM; Ho et al. 2020).
Basic Knowledge Normal Distribution: $$\mathcal{N}(x; \mu, \sigma^2) = \frac{1}{\sqrt{2\pi}\sigma} \exp \left( -\frac{(x - \mu)^2}{2\sigma^2} \right)$$ </description>
    </item>
    
    <item>
      <title>什么是Diffusion模型</title>
      <link>/posts/what-are-diffusion/</link>
      <pubDate>Wed, 14 Sep 2022 18:59:19 +0000</pubDate>
      
      <guid>/posts/what-are-diffusion/</guid>
      <description> 什么是Diffusion模型 这是一篇关于 What are Diffusion Models的译文。很多地方借鉴了由浅入深了解Diffusion Model
本文主要是介绍什么是DDPM：Denoising Diffusion Probabilistic Models(DDPM; Ho et al. 2020).
Basic Knowledge </description>
    </item>
    
    <item>
      <title>The Psychology Of Money</title>
      <link>/posts/the-psychology-of-money/</link>
      <pubDate>Sat, 03 Sep 2022 11:07:34 +0000</pubDate>
      
      <guid>/posts/the-psychology-of-money/</guid>
      <description>No One&amp;rsquo;s Crazy We all do crazy stuff with money,because we&amp;rsquo;re all relatively new to this game and what looks crazy to you might make sense to me. But no one is crazy - we all make decisions based on our own unique experiences that seem to make sense to us in a given moment. Luck &amp;amp; Risk Nothing is as good or as bad as it seems Luck and risk are both the reality that every outcome in life is guided by forces other that invividual effort.</description>
    </item>
    
    <item>
      <title>《纳瓦尔宝典》读书笔记</title>
      <link>/posts/the-almanack-of-naval-ravikant/</link>
      <pubDate>Sun, 21 Aug 2022 15:28:23 +0000</pubDate>
      
      <guid>/posts/the-almanack-of-naval-ravikant/</guid>
      <description>最近看完了《纳瓦尔宝典》这本小册子，本文主要是关于该书的一些书摘和笔记。
关于财富 积累财富 要想获得财富，你就必须知道做什么，和谁一起做，什么时候做。与埋头苦干相比，更重要的是理解和思考。
追求财富，而不是金钱或地位。
依靠出租时间是不可能致富的。你必须拥有股权，才能实现财务自由
为社会提供其有需求但无从获得的东西，并实现规模化。
选择一个长期发展前景的行业，找到可以长期合作的人。
培养迭代思维。生活中所有的回报，无论是财富，人际关系，还是知识，都来自复利。
要想获得财富，就必须充分利用杠杆效应。商业杠杆来自资本，劳动力和复制边际成本为零的产品（代码和媒体）
杠杆有三种。第一种是劳动力杠杆 资本市第二种相对较好的杠杆形式 最后一种是最新出现的，也是普通人最触手可及的。这种杠杆就是“复制边际成本为零的产品”。其中包括书籍，媒体，电影，代码。 劳动力杠杆就是让别人为你工作。这是最古老，争夺最激烈的一种杠杆。
杠杆是判断力的倍增器。
学习微观经济学，博弈论，心理学，说服术，伦理学，数学和计算机。
读比听快，做比看快。
如果想变得富有，就要弄清楚能为社会提供哪些其有需求但无从获得的东西，而提供这些东西对你来说又是轻松自然的事情，在你的技术和能力范围内。
只有独辟蹊径，才能避开竞争
在成为自己这个方面，没人能比你做得更好。
出发点并不重要，行为本身才重要
勇于以个人名义承担商业风险。社会将根据责任，股权和杠杆效应回报你。
明确的责任分配非常重要。没有责任，就没有动力。
实际上，那些有能力以个人名义在公众面前承担失败风险的人，会获得很大的原动力。
失败真的没有那么可怕，所以我们都应该勇于承担更多责任。
拥有企业股权是致富的关键所在
真正的财富是通过创建公司或者通过投资创造出来的。真正的财务自由都不是靠单纯地投入大量时间来实现的。
想要打造良好的职业基础，就要追随自己真正的求知欲上下求索，而不是盲目跟风眼下赚钱的热门行业
生命的意义在于专注于事情本身，体验过程，享受当下。
认真想一想，社会上还有哪些尚未得到满足的需求，而你怎样才能成为第一个提供相关产品或服务的人，并将其规模化。这才是赚钱真正的挑战。
人生的一大目标应该是掌控自己的时间。
增强判断力 在前进的过程中，方向比速度更重要
人生就是选择正确的方向，然后朝这个方向奋力前行。
我认为最聪明的人是可以把事情深入浅出地给孩子讲解清楚的人，否则他自己也没有真正理解。
痛苦的定义：当你看到事物的真面目不是你本来想要的样子时，你是痛苦的。
留出空闲时间非常重要。
在一个动态的系统中，没有一劳永逸的解决方案。
决策就是一切
越觉得自己无所不知，规避和处置风险的方法越少
如果难以抉择，那答案就是否定的 我们生活在一个有70亿人口的星球上，我们和互联网上的每个人都相互连接，世界上有成千山万的职业供我们选择。大千世界，芸芸众生，选择永远不缺。有时我们实在难以抉择，甚至需要列出清单，对不同选项的利弊进行对比和权衡。选择放弃吧，如果难以选择，答案即使否定的。
一条简单的人生经验：如果在一个艰难的决定上意见不统一，你就应验选择短期内更痛苦的道路。
简历新的心智模型做有效的方式是：海量阅读，多多益善。每天花一个小时阅读科学，数学和哲学类书籍，7年内，你就可能跻身少数的成功人士之列。
我不想什么书都读，我只想把100本好书读上一遍又一遍
阅读是我一生中所有物质和精神层面所取得的成就的来源。
读书时感受到的困惑，就像运动时感受到的肌肉酸痛。阅读是在锻炼精神的肌肉，运动是在锻炼身体的肌肉。
第二部分 幸福 学习幸福 对我来说，幸福的含义主要是没有痛苦，没有欲望，不沉溺于对未来或过去的思考，真正拥抱当下，拥抱现状，拥抱现实的一切。
人生转瞬即逝，如黑夜中的萤火虫。尘世光阴等刹那，白驹过隙一瞬间。活着就是要充分利用每一分钟。“充分利用”不是说要穷尽所有时间去追逐一些愚蠢的欲望，而是要认识到自己在这个星球上的每一分每一秒都是非常宝贵的。生而为人，就有责任确保自己的幸福，确保用最好的方式诠释万事万物。
理性很强的人可以通过训练自己的无感反应获得平和，即学会漠视自己无法控制的事情。
在任何时候（比如走路的时候），大脑都只有很小一部分是关注当下的。大脑把主要精力用于规划未来或悔恨过去。
既往不恋。人之所以感到痛苦，很多时候是因为拿以往和现在做比较。以往种种未能实现的欲念会带来现在的缺憾感，而我们又将弥补现实缺憾的希望寄托于未来。消除缺憾感会让人更容易活在当下。
思考的间隙即开悟。
你有没有想过，现在的生活可能就是上帝承诺给你的天堂，而你却毫不珍惜，肆意挥霍。
幸福就是内心的平和。
沉迷于对外物的“欲望”。我对外部事物会带给我幸福和快乐的执念其实是一种痴念。
人生的大赢家就是同时拥有时间、健康和金钱。
布莱士·帕斯卡说过：“人之所以有烦恼，是因为他不能独自安静地在一个房间里坐着。”如果你能坐上30分钟，同时保持幸福的心境，你就是成功的。这是一种超然物外的境界，不过极少有人能做到。
**生活是一场单人游戏。人独自出生，独自死亡，独自解读人世间的一切。你的记忆只属于你一个人。**你出生前无人在意，你离开人世后也无人在意，你存在于人世间只是短短几十年，人生就是一场单人游戏。
如果不想和一个人共事一生，那就一天都不要和他共事。
这个世界是一面镜子，会把你的感受反射给你。
看屏幕的时间越长，幸福感越低；看屏幕的时间越短，幸福感越高。
政治、学术和社会地位都是零和游戏。正和游戏才能造就积极向上的人。
改变习惯的步骤：首先，知道自己要做什么；其次，知道该怎么做；再次，把规划告诉朋友，让一致性偏见发挥作用；最后，严格自律，知行合一，进行自我重塑，直至蜕变成全新的自己。
**死亡是人的一生中最重大的事情。**人终有一死，选择正视、承认死亡而不是逃避死亡，将赋予人生巨大的意义。我们在一生中会花费大量时间试图逃避死亡。我们的很多奋斗目标都可以归结为对永生的追求。
相对于宇宙，你就像一只在夜空中闪烁的萤火虫，你的生命转瞬即逝。如果能彻底认识到你所做的一切不过是徒劳，你就能获得巨大的幸福感和平和感，因为你会意识到，生命不过是一场游戏。但生命是一场有趣的游戏。在这场游戏中，唯一重要的事情就是，随着生命的展开，你要不断地体验现实。既然如此，你为什么不以最积极的方式去诠释自己经历的一切呢？
相对于宇宙，你就像一只在夜空中闪烁的萤火虫，你的生命转瞬即逝。如果能彻底认识到你所做的一切不过是徒劳，你就能获得巨大的幸福感和平和感，因为你会意识到，生命不过是一场游戏。但生命是一场有趣的游戏。在这场游戏中，唯一重要的事情就是，随着生命的展开，你要不断地体验现实。既然如此，你为什么不以最积极的方式去诠释自己经历的一切呢。</description>
    </item>
    
    <item>
      <title>2022 上半年</title>
      <link>/posts/2022-h1/</link>
      <pubDate>Sun, 03 Jul 2022 14:41:02 +0000</pubDate>
      
      <guid>/posts/2022-h1/</guid>
      <description>新冠封城 农历新年大概在每年公历的2月中旬，我们中国人过完农历新年，一年才算开始。从2月中旬，到6月底，大概4个半月，生活在上海的人，因为新冠奥密克戎病毒的爆发，被迫居家隔离3个月。冬天被关起来，夏天“有序”放出来之后，发现一年已经过去了一半。
但即便距离6.1号解封已经过去一个月，生活里还是充斥着新冠，所有人在任何场合都带着口罩，去任何场所都要扫码，三天就要主动核酸一次，以便能够去公司上班，每个礼拜小区又会组织“大筛”，你也得参加，不然进不去家门，街上不开放堂食，不开放公共运动场所，不能去外地，仿佛只需要维持一个基本的上班-下班，创造剩余价值就可以是生活的全部。
工作 22年上半年，悬在互联网从业者头上的剑是裁员，因为经济下行，以及打击平台垄断等原因，各种互联网公司纷纷开始裁员，裁员幅度有的10%，有的20%，甚至有些裁员50%。我们这些从业者，身处其中，自然也受到了各种影响，整个人会处于一种很紧张的状态，对未来的预期也降到了最低。眼下，大家对未来的期望，可能也就只有先苟住，保住现在的工作，静静地等待春暖花开之时，再谋求新发展。
现在市面上有一种说法是我们过了发展的红利期，人口也开始老年化，接下来要在存量上谋发展。我自己是非常讨厌存量优化这种说法的，一是存量本来就应该优化（所有的科学发明，工程研发都是通过不断的迭代一步一步研究出来的），二是发展遇阻，就说是过了发展期，要优化存量，这怎么看都是一种典型的不是我能力不够，是时代的问题的甩锅行为。存量优化的说法放到个人身上当然可以理解，但放到一个巨型组织，就显得胸无大志，话术意图明显。乔布斯，比尔盖茨，马斯克，我想这些人是不会说我们现在处在存量时代，优化存量，这太扯了。
生活 三个月的封禁，生活自然只能全靠向内。 数了下，上半年看了20部电影，疫情在家有时间把李沧东的作品全都找来看了一遍；可能是因为李电影里面的场景和我们这里的城乡有点像，李电影里面的人物和我们在文化习性上相似性也比较高，加上李电影的艺术性，在疫情期间给了我一段很好电影体验时光。这些电影里面，印象最深的是《诗》，电影讲述一件发生在外婆和外孙之间的故事，故事波澜不惊，平淡如水，很难说为什么这部电影让我产生最多的连接，也许是外婆的个人魅力，人到古稀还保持诗性的不易让人感动，也许是故事有条不紊的节奏，个中原因很难描述。
此外还看了七本书，而且是都是五月份之前看的，后面两个月可能是因为疫情向好，工作也比较忙吧，看的比较少。上半年最推荐的书是《卡拉马佐夫兄弟》，另外项飙老师的《把自己作为方法》也非常推荐
军训时我就知道，跟排长、连长套关系，决定了下一周基本的物质福利，即使不决定物质福利，也决定了心理上那种服从感，是荣耀和尊严的来源，所以心思都花在如何讨好他上面，人就变得非常紧张。
这句话我经常偷懒拿来解释各种各样的社会乱象。
疫情期间，我把音乐软件换成了Spotify，看视频用YouTube，不看知乎，微博，取关twitter上中文博主，这些操作都让幸福感有所提升。特别是Spotify，比国内的一众音乐软件真是好太多。多说一句，对比telegram和微信，国内的各种文档和Google doc，只能说我们这个行业确实也还处在初级阶段，抄都抄不明白。
22年盛夏到了，换换心情，上路吧。</description>
    </item>
    
    <item>
      <title>疫情解封</title>
      <link>/posts/life-under-covid-19-2/</link>
      <pubDate>Sun, 12 Jun 2022 14:41:23 +0000</pubDate>
      
      <guid>/posts/life-under-covid-19-2/</guid>
      <description>2022.6.1，上海持续两个多月的封城解封了，从3.13我所在的小区被封，到6.1号，小区全面解封，我们被关在小区里面大概前后有接近80天。这一段很特别的经历，我从刚开始的不适应，心情烦躁不安，到慢慢开始接受，接受封控生活，接受团购买菜，接受早起核酸，接受白天不出门，接受每天自己做三餐。
人，确实是一个惯性生物，只要习惯了，就能过下去，至少我们是这样，我是这样。
接近三个月的封控，我们从早春过度到了初夏，楼栋前面的水杉树，也从光秃秃变的郁郁葱葱，挡住了远处的中环，让我无法在家中通过观察中环的车流量来判断疫情的形势。
封控生活中，也不是没有收获，节省了上下班的通勤时间，以及规避了办公室的噪杂，我有更多的时间可以和自己相处。每天晚上10：30之后，我会在小区的小树林里面，独自散步，有时候会听一点Alexis Ffrench，有时候会什么都不听。
小三个月的封控生活的所获：
这三个月，我戒掉了吸烟的习惯，不吸烟之后，人的状态会好一些，身体会觉得轻盈一些。
戒烟的最大要素，是戒烟期间不要有人劝你抽一根 戒烟的第二条是，即便戒烟期间，抽了一根之后，不要觉得自己戒烟失败了，继续戒下去，戒除心瘾。 去年6月因为打球导致腰部膨出压迫神经导致腰疼，因为各种因素一直没有进行系统的康复，身体状态不太好。疫情居家期间，通过有耐心的，每天康复锻炼，腰部情况也竟然得到了一些改善。这类需要通过运动的康复训练，总结下来就是要坚持，一开始并不会得到立竿见影的效果，但是通过长时间的坚持，回过头来，就发现症状的确得到了不小的改善。我是大概疫情居家一个月的时候，开始尝试这类型的康复，每天坚持康复15分钟左右，现在情况也得到了改善。持续了快一年的腰疼，也让我再一次非常真实的感受到身体健康是生活的根本。
三个月的居家工作，时间多了一些，感谢自己没有用这些时间来打游戏。不打游戏，这个的确也蛮重要的，游戏的确会让人失去很多时间。
自从我不打游戏以及吸烟之后，就节省了一些时间，这些时间也成了万能借口：
看剧一小时，“嗨，就当排位了”； 看书一下午，“嗨，就当排位了”； 刷题两小时，“嗨，就当排位了”； 或许每个人也应该有类似的不打游戏的时间，又或者我应该把其他类似游戏这类杀时间的活动戒断掉。
解封后，端午节的时候，爸爸来我这儿，午饭后，他在屋子里睡了2个多小时的午觉，我带他去买的新房子工地上看了看，他在那条路上抽了好几根烟。这些年和父母交流其实蛮少的，中午吃饭的时候，发现爸爸的酒量，饭量已经没有我大了。We&amp;rsquo;re losing too much time.</description>
    </item>
    
    <item>
      <title>理解 Disco Diffusion</title>
      <link>/posts/understanding-disco-diffusion/</link>
      <pubDate>Sat, 04 Jun 2022 10:47:55 +0000</pubDate>
      
      <guid>/posts/understanding-disco-diffusion/</guid>
      <description>Disco Diffusion Disco Diffusion是 github 上面一个开源项目，用户通过该项目输入一段文字便可以生成一张和文字有一定相关性的图片，且图片有一定的艺术性。Disco Diffusion 是基于OpenAI Guided Diffusion 项目基础上做的研发。其中 disco 是该项目jupter notebook的名称。
Disco Diffusion项目中的diffusion模型使用的是Katherine Crowson提供的，他利用获得的artstation网站上的数据集，在OpenAI 512x512模型上进行fine-tuned，得到disco diffusion中的diffusion模型。Disco Diffusion项目中还利用OpenAI的另外一篇工作CLIP，通过CLIP来关联Image和Text，使得生成的图片具有prompt text的语义信息。
Disco Diffusion演进过程中的主要优化点：
优化了augmentation，以及把 timestep 从1000压缩到15-100个 timestep 使用较短的运行时间，并且提升了diffusion的生成质量 一次性加载多个CLIP模型，多个CLIP模型可以提高生成图accuracy 要理解Disco Diffusion的工作原理，需要先了解DDPM，Guided Diffusion，以及CLIP几个模型的工作原理。
Diffusion模型与DDPM 扩散模型包括两个过程，从信号逐步到噪声的扩散（正向）过程/（diffusion/forward process） 和从噪声逐步到信号的 逆向过程（reverse process）。这两年的扩散模型基本都是基于Google的DDPM (Denoising Diffusion Probabilistic Model)框架所设计。
逆向过程 逆向过程从一张随机高斯噪声图片 xT 开始，通过逐步去噪生成最终的结果 x0。这个过程是一个Markov Chain，可以被定义为：
这个过程可以理解为，我们根据 xt 作为输入，预测高斯分布的均值和方差，再基于预测的分布进行随机采样得到 xt-1 。通过不断的预测和采样过程，最终生成一张真实的图片。
正向/扩散过程 扩散过程采用的是一个固定的 Markov chain 形式，过程中逐步向图片添加高斯噪声：
在DDPM中，βt 是预先设置的定值参数。扩散过程的一个重要特性是可以直接采样任意时刻t下的加噪结果 xt 。将
可以得到
这个封闭式的公式使得我们可以直接获得任意程度的加噪图片，方便后续的训练。
模型训练 为了实现基于扩散模型的生成，DDPM采用了一个U-Net结构的Autoencoder来对t时刻的噪声进行预测。网络训练时采用的训练目标非常简单：
此处ε是高斯噪声。噪声预测网络输入是加噪图片，目标是预测所添加的噪声。训练目标是希望预测的噪声和真实的噪声一致。最终在DDPM中，均值μ的定义为
在DDPM中，逆向过程中的高斯分布的方差项采用的是一个常数项。
Guided Diffusion - 基于类别引导的扩散模型 类似于conditional-GAN，对于通用图像生成任务，加入类别条件能够比无类别条件生成获得更好的效果。因为加入类别条件的时候，实际上是大大减少了生成时的多样性。OpenAI的Guided Diffusion提出一种简单有效的类别引导的扩散模型生成方式。</description>
    </item>
    
    <item>
      <title>《贪婪的多巴胺》读书笔记</title>
      <link>/posts/the-molecule-of-more/</link>
      <pubDate>Sat, 28 May 2022 18:58:57 +0000</pubDate>
      
      <guid>/posts/the-molecule-of-more/</guid>
      <description>多巴胺，英文dopamine或者DA，是一种重要的神经递质，主要负责大脑的情欲，感觉，将兴奋及开心的信息传递。与上瘾有关。 - wikipedia
前段时间阅读了《贪婪的多巴胺》一书，本文整理记录下关于这本书的一些读书笔记。
什么在掌握大脑 我们为什么要去工作，为什么要赚钱，为什么要写这篇文章？最终的目的是什么？ 有哪件我们追求的事只为了它本身，而不是为了其他事？亚里士多德认为这件事是真实存在的。他认为在每一串“为什么”的终点都是同一件事，它的名字叫幸福。我们所做的一切，最终都是为了获得幸福。
但本书不是这么认为的，每一串的“为什么”，在作者看来，他背后是受多巴胺的影响。
赢是为了不输 书中举例环法七冠王阿姆斯特丹（后被查出用药，取消了冠军头衔）
仅仅赢得环法自行车赛是不够的，赢得两次甚至七次也是不够的。胜利永远不嫌多，对多巴胺来说没有什么是够的。追求才是一切，胜利也是，终点线是不存在的，永远也不会有。胜利就像毒品一样，会让人上瘾。
这和我们在打moba类游戏的时候一摸一样，无论是Dota，还是王者荣耀。一局游戏和对方PK，各种操作之后，终于上到敌方高地，很兴奋，很开心，而刚推完水晶那一刻，胜利的喜悦感就突然消失了。大脑迫不及待就要开始下一把。赢完这一把，就想着开下一把，我要一直赢下去。那什么时候是个头，不知道。 而像英雄联盟，王者荣耀这类游戏的设计者，在游戏里面都引入了段位排位机制，这又大大加强了成瘾性。玩游戏的人都想有个好的排名，好的段位，来证明自己的实力。而很多那种再赢一把我就王者的局，也就是晋级赛中，系统又会特意给你匹配一些实力不高的队友，或者实力很强的对手，让你晋级卡住，继而要花费更多的时间在游戏中，去取得一个好的排名。赢一把就睡，往往那一把要出现在凌晨的三点。
另外一个这两年成瘾性也很强的产品是短视频，我自己不算短视频的消费者。不过就我观察来看，短视频的确普及程度，和成瘾性也很强。短视频除了大家都知道的“强大”的推荐算法之外，还有个特点，就是他会可以让人做到完全不跟自己相处，排队，走路，等公交，任何时刻，只要你觉得无聊了，就可以拿起手机刷起来。
暴力有时是功能障碍或病理状态的结果。但大多数情况下，暴力是一种选择——一种经过深思熟虑而采取的，以胁迫手段获得你想要的东西的方式。
多巴胺能人格： 他们沉迷于让未来更有价值，而牺牲了现在能够体验到的快乐。
当在混乱中需要有人大胆行动时，那些能够保持冷静、盘点可用资源，并迅速制订行动计划的人就能够渡过难关。
掌控的力量 神经递质多巴胺是欲望（通过欲望回路）和坚韧（通过控制回路）的来源，它为我们提供了指引方向的激情，也提供了让我们到达目的地的意志力。
意志力就像一块肌肉，用过之后会疲劳，可能用不了多久，它就放弃了。
“抵制诱惑似乎产生了一种心理代价，这种代价体现为，参与者之后在面对挫折时更容易放弃。”如果你在节食，抵制诱惑的次数越多，下次你越有可能失败。意志力是一种有限的资源。
因为上海疫情，我所在的小区已经被封闭了接近3个月了，封城的不便这里不多说。小区封闭也有一个好处，就是我趁这段时间，把吸烟的习惯改掉了。近些年，我断断续续尝试过戒烟，但每次尝试了一两周之后，有时候甚至是一天之后，就复吸了。这次能3个月不复吸，一个很重要的因素是少了很多诱惑，虽然小区里面也有卖烟的，但不像之前街上到处都是卖烟的，给人的诱惑那么大。
天才与疯子 “当我身处一个与故乡截然不同的国家时，我会注意到更多的事物。就好像我吃了一种能改变思维的药，它能让我看到我通常会错过的东西。这让我感到自己更真切地活着。”在熟悉新环境的过程中，我们不断调整，并最终掌控了它。我们把会影响我们和不会影响我们的东西分开，重启潜在抑制，使自己在新的环境中感到舒适和自信。我们得以再次把本质和非本质分开。
或许这才是旅行的意义
很多人都有过从梦中醒来的经历，感觉自己好像被夹在两个世界之间。在这种状态下，他们的思维更加流畅，从一个话题跳到另一个话题，不受逻辑规则的约束。
工作初期，有时候也会带着问题睡觉，醒来之后，有时候会觉得找到的解法。
极其聪明、成功和极富创造性的人，也就是那些典型的多巴胺丰富的人通常会表达一种奇怪的情绪：他们对人类充满激情，但对个人却没有耐心：
自由与保守 自由主义者相关联：爱冒险、追求刺激、易冲动和权威主义，这些恰好也是多巴胺升高的特征。
500名自由主义者在街上游行，可能是在举行抗议活动。但如果是保守主义者的话，就更有可能是一场庆祝活动。
从历史上看，扭转权力扩张的唯一途径是用革命形式的剧变取代渐进式的变化。
进步 人类基因组的一个不寻常特征是人与人之间的变异要少得多。这种高度的遗传相似性表明，我们的祖先其实是一小群人。事实上，在我们进化史的早期，某些未知事件毁灭了大部分人类，使人口减少到不足2万人，濒临灭绝的风险。
变化越大，压力就越大。 压力不利于人体健康。事实上，压力是致命的。压力会增加患心脏病、睡眠质量降低、消化系统出问题和免疫系统受损的可能性。它也会引发抑郁，而抑郁会导致缺乏精力、丧失动力、绝望、轻生念头，甚至干脆放弃，所有这些都会影响生存。在我们的祖先中，对压力敏感的人在面对变化很大的环境时会难以从环境中获取资源。他们可能打猎不太成功，采集生产力较低，这使得他们很难争夺到配偶，有时他们甚至来不及生育后代就死去了。
给自己解压很重要。
一切都取决于环境。在熟悉的环境中，社会合作最为重要，高多巴胺能基因变得不那么常见，因为相对于多巴胺水平更为平衡的人，拥有这些基因的人的生存和求偶优势都偏弱。但是，当一个部落发现并进入未知世界时，赋予一个人更活跃的多巴胺系统的基因就成为一种优势，并且随着时间的推移变得越来越普遍。
“人生成功与否，是由我们无法控制的力量决定的吗？”在德国有72%的人同意这个说法，在法国为57%，在英国为41%。不过，只有略多于1/3的美国受访者表示，主导成功的是外部因素，而大多数人则持更为多巴胺能的观点。
中国有三分天注定，七分靠打拼的说法，中美两国人民有一些价值观还真挺像的。
多巴胺使我们的生活节奏越来越快，这就要求我们的教育也要跟得上。以前受过大学教育就能做的工作，如今需要研究生学位才能做了。我们的工作时间更长，还有更多的备忘录要读，报告要写，电子邮件要回复。一切都在不停地运转。领导、同事、客户默认我们从白天到黑夜都一直有空。当工作中有人需要我们时，我们必须立即做出回应。广告上一个微笑的男人在沙滩上回复短信，或者一个女人在酒店游泳池旁检查她的手机屏幕，点击她空荡荡的房子里的监控视频。“真是松了一口气！”15分钟前她最后一次检查，一切安好，仿佛一切都在她的控制之下。
和谐 普通人怎样才能找到平衡？任何人都不太可能放弃现代世界，与一个崇拜树木的部落生活在一起。我们必须通过其他方式找到平衡。单靠多巴胺永远不能满足我们，它不能提供满足感，就像锤子不能转动螺丝一样。但它不断给我们美好的承诺，让我们感觉满足感就在眼前：再来一个甜甜圈，再升一次职，再征服一次。我们怎么从跑步机上下来？
书中的答案是： 擅长一件事的乐趣
精通是从特定环境中取得最大回报的能力。精通是一件值得期待和追求的好事，但它不同于其他好事。它不仅仅是寻找食物和新的合作伙伴，或者击败竞争对手，它比这些更宏大、更普遍。它是我们成功提取奖励的过程：多巴胺达到了多巴胺的目标。
最好的享受就是沉浸在一份干得好的工作中。
精通也创造了一种心理学家称之为“内部控制点”的感觉。它指的是一种认为自己的选择和经历在自己的掌控之下，而不是被命运、运气或其他人决定的倾向。
内部控制点意识强的人更有可能在学业上取得成功和获得高薪工作。
能够通过向外转移关注焦点来激活我们的当下神经系统，注意力的增加就会使感觉体验更加强烈。想象一下在异国他乡的街道上行走，一切都令人兴奋，即使是看普通的建筑物、树木和商店。因为我们处在一个新的环境中，感觉输入更加生动，这正是旅行的部分乐趣来源。特别是在复杂环境（有时被称为“丰富环境”）中，能使我们大脑中的多巴胺能认知功能更好地工作。而最复杂、最丰富的环境，通常是自然环境。
全神贯注可以提升几乎一切体验。
多重任务处理并没有提高你的效率，反而降低了效率。
创造是最持久的多巴胺能的乐趣，因为它总是新的。烹饪、园艺和运动等众多活动都可以将智力刺激与体力活动结合起来，改善我们的心情并使我们更有成就感。这些活动可以持续一辈子而不会过时。买一块昂贵的瑞士手表，你也许能感受到几周的多巴胺能刺激，但在那之后，它就只是一块手表而已了。晋升为地区经理一开始会让上班很兴奋，但最终却成了同样老旧的苦差事。创造力则与此完全不同，因为它把当下分子和多巴胺搅在了一起。这就像把少量的碳和铁混合制成钢，让材料变得更强大、更耐久。这就是当你开始从事当下的体力活动时，多巴胺能的快感会发生的变化。
这或许是写作的原因之一。
以上</description>
    </item>
    
    <item>
      <title>《把自己作为方法》读书笔记</title>
      <link>/posts/bazijizuoweifangfa/</link>
      <pubDate>Sun, 15 May 2022 16:48:20 +0000</pubDate>
      
      <guid>/posts/bazijizuoweifangfa/</guid>
      <description>现在要通过一切手段来自保，不允许任何人说话。
第一次知道项飙老师是在《得意忘形》的一期播客中听到的，那一期节目，主播请来了淡豹女士录一期节目，淡豹在聊天的过程中提到了人类学家项飙。第二次了解项飙老师是通过《十三邀》，许知远邀请来了项飙老师做节目。那期节目我看了两三遍，特别是他们在温州的那一段聊天，反复观看，觉得项飙老师特有意思。
《把自己作为方法》是我看的项飙老师的第二部作品，第一部是《浙江村》。《把自己作为方法》这本书主要是提问者吴琦和项飙老师分别在牛津，北京，温州三个地方对谈，过程中吴琦会就一些问题向项飙老师发起的提问。虽然全文都是谈话的形式，但项飙老师对一些问题的看法是很有深度，也很透彻。书中两位在交流的时候，项飙老师的一些回答，会让我很亲切，有一些想法也会让我之前一些模糊的，不成系统的直觉，通过项飙老师以一个比较概括的方式描述出来。
下面是关于这本书的一些自己的摘录。
比如关于国内社会的人际关系，工作关系，社会关系，这一段描述：
军训时我就知道，跟排长、连长套关系，决定了下一周基本的物质福利，即使不决定物质福利，也决定了心理上那种服从感，是荣耀和尊严的来源，所以心思都花在如何讨好他上面，人就变得非常紧张。
有时候和权威搞好关系，不仅仅是为了物质福利，也是为了精神寄托，心里的服从感是荣耀和尊严的来源。这一句话就大概解释了国内社会的各种乱象，以及我们深处其中的时候为什么有时候自己也会动作变形。自觉的或者不自觉的去需求依附于权威。
不放松是我的一个问题，在我的研究里这是一个很大的障碍。因为不放松，一根筋地往下想，思想的发散性就不太强，创造性就会受到抑制。我调查时也有这个问题，我不太放松，不太能够调笑戏谑，比较欠缺跟大家打成一片的能力，也是我自己不太满意的地方。
关于是否和某个群体打成一片，我有一个记忆犹新的例子。上大学时候，有一次坐长途绿皮火车，春运的火车车厢挤满了人。我所在的车厢有一群农名工，有一个年轻的小伙子他就属于那种很能和大家打成一片的人，过程中我看着他慢慢的，和比他年长很多的民工们打成一片，作为起码有五六个民工围着他坐成一圈，他仿佛就是那帮人的头。而在10个小时之前，其实他和这帮人并不认识。这个小伙子在我看来就是那种非常放松，能和各种人打成一片的人。而这个打成一片的能力或者我更愿意称之为习惯，和性格是有很强的关系。我也是不习惯和别人打成一片的那种人，多数时刻，我都愿意站在群体外围，看着。
偷窃成为一种不道德的行为，前提是私有财产，如果没有私有财产就没有这个问题。
我们对腐败官员的揭露，却把大量篇幅放在男女关系上，而对这个人究竟怎么贪污、制度设计哪里有问题、贪污造成的具体后果又讲得很虚幻？
项飙老师比较喜欢Joan Baez的音乐，他人分析项飙喜欢的原因是：
她说你喜欢她是因为她的歌没有reference（引经据典），她讲的东西就是东西本身，不会背后还有东西需要你有额外的知识准备去理解。
关于有文革背景的伤痕文学
女知青被村干部奸污这种故事流传了多少年，完全是不成比例的（out of proportion）。奸污当然是犯罪，但那种故事一再流传，背后是有一定意义的，指向的是农民和城市的关系，是一种知青受难的述说。女知青是最纯洁的，结果在农村里被村干部糟蹋，最美的东西被最丑的东西给毁灭掉，文学的叙事结构是很清楚的，是典型的古希腊意义上的悲剧，效果也非常明显。
关于理解
理解是人的本性的一部分，作为心理机制，一点都不难，如果说理解有难度，其实是一个位置问题，看你愿不愿意把自己摆在对方的位置上。很多情况下人们拒绝这么做，因为有利益在里面。
我对知识分子的民粹主义有一种亲近感，比如俄罗斯二月革命等等，我不太知道这是从哪里来的，可能小时候觉得家长权威很重要，所以也形成了对权威的逆反，一切掌握权威的人，我看着都不太舒服。这个心理比较复杂，我没法自己分析，但我相信童年无意识的心态还是能够塑造人情绪上的驱动。我又肯定不会是革命者，因为在很多情况下我比较怯懦，在这个意义上我是比较典型的小资产阶级式的民粹主义。
关于美国反越战运动
美国的孩子们上街是因为他们明天可能就要上战场，会考虑战争的意义，要保护自己的生命
关于78年的高考
对农民来讲，恢复不恢复高考，对当时90%的农民来讲影响不大，但是恢复高考把此前的官僚和城市知识分子一下子拢进来，其实是一个政党和当时社会主义体制下的精英的重新联盟。大学当然是搞精英主义，你看现在回忆恢复高考的人，很多都是干部子弟，从农村回到城市，不仅恢复了原来比较优越的地位，而且用这种途径在文化、道德上使自己的优越正当化、合法化。
关于国内的生活环境
新家庭主义，中国式逼婚，一定要生小孩，一定要买房子，跟这种单一化联系到一起。正因为“悬浮”之后，自己当下的行为本身不能产生意义，就有点原教旨主义，家里那点事儿成了人生唯一的意义寄托。
“认命不认输”也是一样。我们为什么会焦虑，最直接的原因就是对今天没有清晰的认识，总觉得自己现在所处的地方不对，和自己认为的有差距。
项飙老师作为人类学家，观点很犀利，描述问题很根本，同时为人又非常自省。</description>
    </item>
    
    <item>
      <title>Debug 和 Debugger</title>
      <link>/posts/debug-and-debugger/</link>
      <pubDate>Sun, 08 May 2022 01:03:32 +0000</pubDate>
      
      <guid>/posts/debug-and-debugger/</guid>
      <description>Debug 全靠 print 刚毕业之后的第二年，我从事过一份编程工作，主要是要把iOS的程序运行在android上。那是2012年，当时android的toolchain，特别是android ndk develop 方面的工具，还没那么完备。加上我们当时做的项目非常小众，debug运行在android手机上的OC程序，remote debugger经常会connect不上，gdb经常用不了。而即便connect上，诸如breakpoint，单步，程序调用堆栈这些，也不太灵。所以当时最朴素的做法就是通过log，print各种信息来做debug。
可想而知，这种方式来做开发效率是很低的。虽然我也不是很喜欢诸如xcode，android studio等一类IDE（因为他们太笨重了），但只能靠print来debug，确实有点过于原始了。开发工具不完备，研发效率不高，最终项目研发也是困难重重，很难有效推进。
学习编程 我大学在一所末流211读的计算机相关专业。拙劣的教学质量，松散的学习氛围，加上唐浩强系列教材，大学里是没学到什么编程能力的。工作中的编程能力基本上靠自学而成。自学过程中有点像debug一段程序的过程，通常情况下，我会找相关的资料先看看，当然一般情况下有些细节在没有人指导的情况下，是看不太懂的。而后是去网上找一些视频，去看看视频教学。过程中有一点非常重要，就是要看完一段之后文字和视频之后，阶段性一定要动手去做。这样才能比较有效率的学习某一项新的编程技能。我自己反复验证过，一上来就蛮干，什么书也不看，教程也不学，就自己摸索，大概率是要失败而归，自信心受挫的同时人的精力也被耗尽。而有时候我自己会犯懒，看看书，看看视频，就觉得自己搞懂了，学会了，当时是会比较轻松，但程序员这项工作，最终是要靠code说话的，光看不写，99%是没有学会，即便懂了，最终也不会操作。
如果说编辑器，编译器是程序员的朋友，那么debugger可以说是程序员的再生父母。绝大多数程序员离开了debugger是几乎不会写代码的。狭义的debugger指的是程序调试工具，广义的debugger可以指的是好的书籍，资料，人，工具等等能给你有效反馈的事和物。当我在学习一项新技能的时候，最为关键的是要找到靠谱的debugger，然后勤加debug，可能过程听起来会比较累，但根据自身经验来看，这种方式是最为节约时间的方式方法。
Keep Try and Practice.</description>
    </item>
    
    <item>
      <title>自由泳二踢腿</title>
      <link>/posts/2-beat-kick-freestyle/</link>
      <pubDate>Tue, 03 May 2022 12:07:10 +0000</pubDate>
      
      <guid>/posts/2-beat-kick-freestyle/</guid>
      <description>18年夏天，有一次我从深圳的蛇口码头坐船去香港机场，船上坐在我旁边有两个男性，一个中年人和一个青年人，听口音应该是台湾人。听聊天的内容，两个人大概是在芯片公司工作，中年人是青年人的leader。聊的内容我记不清了，倒是中年人有一句话，我一直有映像：人都是可以被训练的。
根据这几年在上海各种大小游泳馆里面游泳时候的观察，会发现几个现象，第一是游泳馆里面中老年人很多，多数时候，场子里面有超过6成是老年人。这个现象一方面也反映了上海处于一个社会人口老年化的局面。另外一个现象是多数人采用的泳姿是蛙泳，采用自由泳游长距离的人非常少。根据我自己的经验，多数人在游自由泳的时候，手脚高频摆动，一启动中间不会停歇，游个25米就会气喘吁吁，非常的累。所以在游泳馆里面我们会见到那种蛙泳游几个来回，然后搭配一个自由泳，企图增加点运动量的人。
很长时间以来，我去游泳，也是采用蛙泳，直到有一天我在B站上看到了一条关于自由泳二踢腿的视频。他让我第一次感受到游泳这项运动的美感，或者说在这种二踢腿动作下，运动员人体形态呈现出来的那种优雅。 从视频中运动员的动作频率来看，二踢腿形式下的自由泳，动作看起来频率没那么高频，中间会有一些停顿，看起来是适合游长距离的。因为它呈现出来的优雅，我对这种游泳方式产生了兴趣，接下来在YouTube，B站搜索了一些关于自由泳二踢腿（two beat kick freestyle）的视频，学习了这个动作的一些要点之后，就动身去游泳馆试验了。 第一次去的时候，当然是没有成功用二踢腿的方式游起来。当我尝试在水中做二踢腿动作的时候，看视频时觉得学会了的简单动作，在水里面做起来就不会了，准确的说是缺失了很多细节，从动作1到动作2中间动作是什么？踢腿的时候，是该同侧手，还是对侧手往前滑？等等这些细节在看视频脑子记动作的时候是缺失的。 第二周去之前，根据上次的实践反馈，反复观看其中一些比较模糊的动作。第二次下水尝试二踢腿游的时候，还是失败了，而且并没有比第一次好多少。回来之后，又对着视频观看，回忆在水里的情形去做复盘。大概在第三，四次的时候，我可以用二踢腿的方式游起来了。但游起来并不熟练，动作有时候会很别扭。后来我又去游了几次，慢慢的可以用二踢腿自由泳的方式游个1km不停歇。疫情之前的几次游泳，我已经可以熟练的进行二踢腿自由泳了，过程中我反而觉得蛙泳比自由泳更费力一些。
多数人在学会蛙泳之后，就停滞了，因为蛙泳的确够用，能起到体育锻炼和娱乐的作用。多数人自由泳游起来非常累，在没有合适的，优质的信息引导下，累引发的抗拒感，就会让人丧失掉优化自由游动作的动力，失去探索自由游的兴趣。如果B站没有推送给我那一条视频，我可能至今都不知道二踢腿自由泳。
过往，在我的成长环境里，大家最关注的是这孩子是不是聪明，这孩子的天分如何？我以往虽不是完全同意这种观点，但本质上我很多时候也是拿这种评价标准来评价自己。这种做法导致多数时候以卵击石，得出自己能力不够，没有天分的结论。自信心受挫的同时，也比较容易半途而废。学会自由泳二踢腿有两个关键点，第一是B站的视频推荐，第二是反复的尝试和练习。二者缺一不可，我们不能让一个从来没看过专业的自由泳二踢腿怎么游的人即刻学会它，更不能期待我们自己能发明创造这种游泳方式。
同理，我们也不能要求自己在没有任何准备下，就能解决某类问题（比如投资，编程）。我们不是爱因斯坦，也不是乔布斯，不要用天才的标准来评价自己。多数时刻，我们不要期望自己在一无所知的情况下，就能凭天分在短时间内凭个人去发现人类历史发展多年先人们总结的经验和方法。我们应该为自己创造一个合适的环境，去让自己接触到更多更好的信息，去触碰到更高质量的内容，同时多练习，和复盘。不要给自己定义做不到，此刻的做不到，要么是方法不对，要么练习不够。找到正确的方法，不要丧失信心，边想边做，多数事情我们都可以掌握。人都是可以被训练的。</description>
    </item>
    
    <item>
      <title>疫情下的生活</title>
      <link>/posts/life-under-covid-19/</link>
      <pubDate>Sun, 17 Apr 2022 10:12:15 +0000</pubDate>
      
      <guid>/posts/life-under-covid-19/</guid>
      <description>世界上只有一种真正的英雄主义，就是认清了生活的真相后还依然热爱它。 - 罗曼·罗兰
2022年开始的时候，我想上海人民是不会想到22年是这样的一个灾年。新冠奥密克戎3月初开始在上海蔓延，虽然上海市采取&amp;quot;一人新冠，全村封闭&amp;quot;的严格防疫措施；但奈何奥密克戎传播性强，疫情终究还是没有控制住，三月底，奥密克戎感染人数持续走高，全市lock down。
我自己也是这次疫情的受害者之一，我住的小区所在的街道有阳性病例，导致我们从3.12开始居家封闭，到现在4.17，已经过去了一个多月。期间，社区会把小区各种出口用铁皮焊死，对小区内的居民实施禁足。小区内一开始几次的核酸并无阳性，但巧合的是大概在封闭快到两周的时候的那一次核酸中却出现了阳性案例，我们只好继续封闭，然后就是全市的lockdown。后续小区内每次核酸都会有新增阳性案例，甚至出现了由于阳性病例未及时转移导致整顿楼阳性的情况。
随着全市的停摆，快递，外卖也随之停摆。居家所需的食品无法正常购买，为了生活，需要花费大量的精力去各种微信群里面参加团购。疫情下的团购体验是很差的，团购的食品价格昂贵，品质一般，部分团购还有各类附加品，比如你想要买蔬菜，就得一起购买配备的价格高昂的酸奶。长久的禁足，加上生活必需品得不到保障，让疫情下的我们情绪低落，不安，甚至是愤怒。
疫情下的网络世界则更加的两极化，随便翻一个微博，twitter，或者是其他论坛，只要是中文的帖子，下面的回复都充斥着各种极端言论。支持清零的和不支持的互相之间给对方戴帽子；大家几乎都不是摆事实讲道理，合理讨论防疫对策，更多是在发泄情绪，类似“深圳能清零，上海为啥做不到？”，“上海管理这么差，你看上海的官员有几个是上海人”，几乎都是类似这种把事情简单化，地域化的言论。
就我个人体感来说，我肯定是支持开放的；因为
长时间的禁足无异于坐牢，如此这般被禁锢这么长时间也是头一遭。 这么长时间，马拉松式的防疫对社会经济活动影响是巨大的，会造成很多人失业，生活水平可以预知的会下降。 现在的过度防疫，让一些本身需要医疗资源的人得不到及时的救治，丧失了生命。 但我也不是完全支持突然开放，因为考虑到如果疫情一旦蔓延到中西部地区，就拿我的家乡来说，在医疗资源比较差的情况下，乡村的高龄老人是不是能熬得过这一波奥密克戎病毒，就香港，国外之前的样本来看，很不好说。所以这可能也是我们国家防疫困难的原因之一，地方贫富悬殊，医疗水平差异大。
疫情之下，各种妖魔鬼怪，离奇轶事层出不群，本该发放给市民的食品出现在商品市场，医务工作者因为防疫政策见死不救，防疫干部因为种种原因选择自杀，还有各种各样搞不清真假的录音，视频。铁皮封门，网络删帖，公众号文章删了又恢复了，甚至lalaland都要被禁，让人哭笑不得。但太阳底下无新鲜事，我知道无数的人，此刻感觉自己正身处漫长的黑夜中，无助的在内心去期盼东方红，太阳升。
疫情之下，就个体而言，保持一个良好的心情是非常重要的；长时间封闭容易让人抑郁，微博微信不时的传出各种负面新闻让人心情更加沉重。我们在这样的大环境下，能做的其实很少；转发下新闻到朋友圈，能帮上什么实质性的忙嘛？可能起到的最大作用是安慰了我们自己。认清事实的真相的同时，虽无可奈何，但仍要保持对生活的热爱和希望，熬过这个春天。</description>
    </item>
    
    <item>
      <title>如何实现SnapChat卡通画滤镜（一）：StyleGAN的工作原理</title>
      <link>/posts/stylegan/</link>
      <pubDate>Mon, 28 Mar 2022 10:13:27 +0000</pubDate>
      
      <guid>/posts/stylegan/</guid>
      <description>这两年随着像Tiktok，SnapChat这一类短视频平台的流行，风格转换类的算法在这类平台上也得到了广泛的应用，深受用户喜爱。比如snapchat中的卡通画人脸，变小孩，变光头等一类滤镜，其视觉效果都非常棒，在社交媒体上也被广泛传播。这类人脸风格化滤镜的底层算法是基于GAN（生成对抗网络）研发而成的。而在GAN被广泛商业化应用的道路上，有两篇非常重要的工作，分别是 Pix2Pix，和 StyleGAN，这两篇工作GAN被商业化成为了可能。
本文主要是介绍两篇工作的一篇 StyleGAN。
StyleGAN (A Style-Based Generator Architecture for Generative Adversarial Networks 2018) StyleGAN是有NVIDIA于2018年提出的，截止2022年3月有3825次引用。
StyleGAN网络主要分成两个部分，分别是Mapping Network 和 Synthesis Network。结构图如下：
如上图所示：
Mapping Network：映射网络，它的结构比较简单；由8个全连接层组成，网络输入为 512x1 的向量，输出也是 512x1的向量。 </description>
    </item>
    
    <item>
      <title>计算机视觉移动端小网络：MobileNet</title>
      <link>/posts/mobilenet-intro/</link>
      <pubDate>Thu, 24 Mar 2022 10:48:12 +0000</pubDate>
      
      <guid>/posts/mobilenet-intro/</guid>
      <description>MobileNet MobileNets: Efficient Convolutional Neural Networks for Mobile Vison Applications. MobileNet是为移动端手机和嵌入式设备提出的网络模型。其中MobileNetV1压缩网络的手段主要是利用深度可分离卷积。
深度可分离卷积
标准卷积如下图：
输入一个 12x12x3 的featuremap，经过 5x5x3 的卷积核卷积得到一个 8x8x1 的输出featuremap。如果我们有256个featuremap，则经过卷积操作会得到 8x8x256 个输出featuremap。
深度可分离卷积如下图：
深度可分离卷积与标准卷积的差别是，depthwise-conv将卷积核拆分成单通道形式，在不改变featuremap的深度情况下，对输入的featuremap的每一个通道进行卷积操作，得到和输入featuremap通道数一致的输出特征图。猴通过pointwise-conv，升维。
如上图所示，输入 12x12x3 的featuremap，经过 5x5x1x3 的深度卷积之后，得到了 8x8x3 的输出featuremap。然后在通过 256个 1x1x3 的卷积对 8x8x3 的输入featuremap 进行卷积操作，得到 8x8x256 的输出featuremap。
普通卷积和深度可分离卷积的计算量对比如下图：
MobileNetV1 网络详情
MobileNet V2 Linear bottleneck
对一个n维空间做ReLU运算，然后对结果进行逆运算恢复，对比ReLU之后的结果与Input相差如下图：
如上图可见，当n=2，3是，与input相比有很大一部分信息丢失了，当n=15，30时，信息多部分被保留。也就是说，对低纬度做ReLU运算，容易造成信息丢失，对高纬度进行ReLU运算，信息丢失会比较少。
以上的发现可以解释MobileNetV1的深度卷积训出来的卷积核有不少是空的这一现象。解决问题的方法是把最后的ReLU6换成Linear。
Inverted residuals
经过DepthWise-Conv的featuremap，输出维度和输入是一致的，使用DW卷积，featuremap无法升维。MobileNetV2中通过在DW卷积之前使用PointWise-Conv来升维，然后在一个更高维的空间中进行DW操作。另外V2中还借鉴了ResNet中的residual block的shortcut结构。
以下是MoblieNet V2的block结构：
这种结构和ResNet的residual block在结构上有相似性，都才用 conv1x1 -&amp;gt; conv3x3 -&amp;gt; conv1x1 的模式，但不同在于：
ResNet先降维（0.25 倍），标准卷积，再生维 MobileNet V2先升维（6倍），深度可分离卷积，再降维 以下是MobileNetv2 block 和 ResNet residual block的对比：</description>
    </item>
    
    <item>
      <title>计算机视觉经典网络：LeNet，AlexNet, VGG, GoogLeNet, ResNet</title>
      <link>/posts/lenet-alexnet-vgg-googlenet-resnet-intro/</link>
      <pubDate>Tue, 22 Mar 2022 11:15:28 +0000</pubDate>
      
      <guid>/posts/lenet-alexnet-vgg-googlenet-resnet-intro/</guid>
      <description>LeNet LeNet一般指LeNet-5，是Yann LeCun再多次研究后于1998年提出的卷积神经网络结构。
LeNet-5是用来处理手写字符的识别问题，总共有7层。其结构如下
LeNet-5的网络细节如下：
AlexNet AlexNet被认为是计算机视觉领域最有影响力的论文之一，它刺激了更多使用卷积神经网络和GPU来加速深度学习的论文出现。截至2022年，AlexNet论文已被引用超过105287次。
网络设计 AlexNet包含八层。前五层是卷基层，之后是最大池化层，最后三层是全连接层。使用ReLU激活函数。
网络结构
AlexNet的网络细节如下：
VGGNet VGG是牛津的Visual Geometry Group组于2014年提出的网络结构。该网络是在ILSVRC 2014上的相关工作，主要证明了增加网络深度能够在一定程度上影响网络最终的性能。
VGG原理 VGG中，使用3个3x3卷积核来代替7x7卷积核，使用2个3x3卷积核来代替5x5卷积核，这样做的目的是在保证相同感受野的条件下，提升了网络深度。而增加网络深度过程中引入的多层非线性层帮助学习到更复杂的模式，在一定程度上提升了神经网络的效果。
VGG网络结构
VGG网路细节
上图是VGG各种网络的网络结构。
VGG16包含了13个卷积层和3个全连层，如上图的网络D。 VGG19包含了16个卷积层和3个全连层，如上图的网络E。 VGG优缺点
主要贡献是增加了网络深度 优点：网络结构简洁，整个网络使用同样大小的卷积核尺寸（3x3） 和最大池化尺寸（2x2）。 缺点：最后三个FC层计算量巨大，耗费更多资源 GoogLeNet GoogLeNet是Google于2014年推出的基于Inception模块的深度神经网络模型，并在随后的两年中一直改进，形成InceptionV2, InceptionV3,Inception V4等版本。
Inception-V1 Inception是把多个卷积或池化操作，放在一起组装成一个网络模块，设计神经网络时以模块为单位去组成整个网络结构。Inception结构如下图所示：
如上图所示，Inception Module结构组成有四个成分：1x1 conv, 3x3 conv, 5x5 conv, 3x3 maxpooling. 最后对四个成分运算结果进行通道上组合。Inception Module的核心思想是：利用不同大小的卷积核实现不同尺度的感知，最后进行融合，可以得到图像更好的表征。
另外图中的1x1 conv 有两种，一种蓝色底，一种黄色底，其中黄色底1x1 conv是用来进行压缩降维的。因为使用Inception结构，利用上多尺度卷积后，网络变宽了，计算量变大了；需要减少参数量来减少计算量，所以在Inception v1中加入了黄色底 1x1 conv来进行降维。黄色底1x1 conv 叫做 pointwise conv.
GoogLeNet网络结构
GoogLNet网络有22层深（加上pool层，有27层深），由于全连接层参数多，计算量大，容易过拟合，所以GoogLNet没有采用LeNet，AlexNet，VGG三层全连接结构，在Inception模块之后使用Average Pool和Dropout方法，同时达到防止过拟合和降维的作用。
辅助分类器： 为了利用中间层抽象的特征，在某些中间层中添加含有多层的分类器。GoogLNet网络中加入了两个辅助分类器，作用有两点：一是为了避免梯度小时，用于向前传导梯度。反向传播时如果有一层求导为0，链式求导结果为0.二是将中间某一层输出作用作分类，起到模型融合作用。
GoogLeNet网络细节
ResNet 深度学习网络的深度对最后分类和识别的效果有很大影响，但我们把网络设计的很深时，网络在训练时，梯度消失的现象会越来越明显。为了解决这一问题，何恺明于2015年提出了ResNet，深度残差网络。ResNet，全称Deep residual network，网路中通过引入residual block解决了当CNN网络深度很深时网络学习退化的问题。ResNet的提出是CNN图像史上一件里程碑事件。
残差块：Residual Block
非常深的网络很难训练，存在梯度消失和梯度爆炸问题，学习skip connection它可以从某一层获得激活，然后迅速反馈给另外一层甚至更深层，利用skip connection可以构建残差网络ResNet来训练更深的网络，ResNet网络时由残差模块构建的。</description>
    </item>
    
    <item>
      <title>我听的播客</title>
      <link>/posts/my-lisenting-podcasts/</link>
      <pubDate>Wed, 23 Feb 2022 12:13:10 +0000</pubDate>
      
      <guid>/posts/my-lisenting-podcasts/</guid>
      <description>播客本来是一个小众文化产品，这两年互联网的风口好像也吹到了播客这个领域，像QQ音乐，网易云这样的巨头和喜马拉雅，小宇宙这样的创业者也都加入了播客平台的搭建和运营中来。好处是很多之前没人聊的话题，比如足球，会出现一些相关的播客可以让人们去消费，而我也注意到身边开始听播客的人变的越来越多。
播客是以声音为媒介传递信息的，相比文字和图像，在信息的容量上存在天然的劣势，期待能从播客中能获得非常solid的知识是不现实的。但播客有一个优势是营造一种陪伴的感觉，可以让人在做家务，散步，坐车时收听。
我大概是从2013年开始听播客，当时收听播客途径主要是通过iPhone上的Podcasts软件，苹果会在这个app中做一些播客的推荐；因为我一直比较喜欢看电影，13，14年通过podcasts我开始听一款叫《电影不无聊》的播客，里面两位主播会聊一些年度好片，一些著名电影人的电影，当时也是让我接触了一些不同的电影。我还买过他们出的一个周边T恤，胸前的logo是一个黑武士。后面不知为何我就没有订阅了，最近查了下他们竟然还在更新，能坚持9年一直做播客，很不容易。
几乎同时期，作为一个互联网从业人员的我，同样是在Poacasts上发现了《IT公论》，按照IT公论主播李如一的说法，这是一款讨论科技与人文的播客。播客的两位主播李如一和rio那段时间讨论频次最高的话题是关于苹果公司的产品，比如WWDC之后，两位主播会针对硬件，软件的一些update进行一些讨论。后来李如一创办了IPN，邀请了一些其他主播开播了好几款播客，比如有讲美食的《味之道》，有说美国选举的《选·美》，有三个医生侃大山《太医来了》，关于电影摄影的《硬影像》，和日本文化有关的《灭茶苦茶》，和编程技术相关的《硬核恐慌》，聊字体设计的《字节社》，说故事的《History》,聊流行文化的《流行通信》等等。李如一应该可以说是中文播客的鼻祖，后来一些开播客的主播很多能发现会收到李如一风格的一些影响，无论是播客icon的设计上，盈利方式上，还是内容上。通过听这些播客，拓宽了我的知识边界，让我了解了很多之前不了解的领域，比如建筑，比如设计，比如美国选举，从中也学习了不少。后来不知为何，IT公论就停掉了，而IPN旗下的其他播客也陆陆续续的停更了。但听播客的习惯我算是养成了，后来听到的优秀播客有有比较励志的《得意忘形》，有讲心理咨询和一些七七八八事情的《BYM：blow your mind》，有聊电影，书，话剧，电视剧的《文化土豆》，有关于科技新闻的《硅谷早知道》，《硅谷101》，《声东击西》等。最近听到的高质量播客是孟岩的《无人知晓》，虽然讲的是投资者教育，但有些片段很touch。
以上就是我听的一些播客，在我看来，李如一的一系列播客无疑是水准最高的，感谢他的创作。</description>
    </item>
    
    <item>
      <title>利用深度学习进行股票价格预测</title>
      <link>/posts/stock-prediction/</link>
      <pubDate>Wed, 16 Feb 2022 00:13:14 +0000</pubDate>
      
      <guid>/posts/stock-prediction/</guid>
      <description>免责声明：这篇文章记录我在做这个mini site project时候的一些知识点，从最终预测的结果来看，效果不太理想。投资有风险，入市需谨慎。
本文中的代码多数是参考： https://github.com/olof98johansson/StockPrediction.git
股票数据获取和处理 获取股票数据 我们这里借助 pandas_datareader 这个库来获取目标股票的信息。比如可以通过如下的代码获取Telsa股票信息：
import pandas_datareader.data as web df = web.DataReader(&amp;#34;TSLA&amp;#34;, data_source=&amp;#34;yahoo&amp;#34;) 数据格式如下：
Date High Low Open Close Volume Adj Close 2022-02-08 926.23 894.80 905.53 922.00 16909700.0 922.00 2022-02-09 946.27 920.00 935.00 932.00 17419800.0 932.00 2022-02-10 943.81 896.70 908.40 904.55 22042300.0 904.55 2022-02-11 915.96 850.70 909.63 860.00 26492700.0 860.00 下面对上述获取的股票信息做一些名词解释：
High : 当日最高成交价 Low : 当日最低成交价 Open : 当日开盘价格 Close : 当日收盘价格 Volume : 当日资金总量 Adj Close : 当日股票收盘价调整后的价格。什么是Adj Close 除了从Yahoo Finance上获取的股票基础信息之外，我们这里还引入一些金融行业关于股票的一些技术指标：</description>
    </item>
    
    <item>
      <title>读书笔记：《卡拉马佐夫兄弟》</title>
      <link>/posts/karamazov/</link>
      <pubDate>Sat, 12 Feb 2022 14:38:26 +0000</pubDate>
      
      <guid>/posts/karamazov/</guid>
      <description>一粒麦子不落在地里死了，仍旧是一粒：若是死了，就结出许多子粒来。- 《约翰福音》第十二章第二十四节
农历虎年春节前后，我花了大概30个小时，读完了陀思妥耶夫斯基的著作《卡拉马佐夫兄弟》。22年开始的时候，我自己发愿今年不仅要多读书，而且还要尽量做到每读完一本书之后写一篇读后感。写作读后感的目的是为了让自己能够在读完一本书之后可以反刍全书，以一个更加全局的角度去思考该书，而写作的过程也有可能会让我迸发出对该书的更近一层的思考和理解。
尝试写《卡拉马佐夫兄弟》的读后感是比较困难的，《卡拉马佐夫兄弟》内容非常翔实，陀思妥耶夫斯基在书中花了很多篇幅去阐述关于宗教的思想内容，这一部分由于生活背景等原因，读起来比较晦涩难懂。
《卡拉马佐夫兄弟》讲述了一个发生在俄国19世纪的故事，老卡拉马佐夫贪财好色，前后娶了两个妻子，有三个儿子，分别是大儿子米嘉（和第一任妻子所生），二儿子伊万，以及小儿子阿辽沙。米嘉比较随性，属于今朝有酒今朝醉的人格，他和老卡不太对付。老卡通过一些手段让米嘉拿不到米嘉母亲的遗产，为此两人还大打出手，米嘉揍了老头一顿。二儿子伊万为人聪慧，思想比较前卫，全篇另多数人啧啧称道的《宗教大法官》，就是伊万和阿辽沙对话的过程中讲述的一个故事。小儿子阿辽沙是个俄罗斯僧侣，是个心地善念，全书所有人都愿意和他交流的人。书中除了两代四个卡拉马佐夫之外，还有两个重要的女性角色，分别是米嘉的未婚妻卡捷琳娜，和后来成为米嘉情人的格露莘卡，以及真正的杀人凶手，老卡的私生子斯乜尔加科夫。
《卡拉马佐夫兄弟》讲述的是一个杀父的故事，老卡和米嘉父子二人为了格露莘卡争风吃醋，在一个夜晚米嘉夜闯老卡家，误伤了老卡的仆人，仓皇出逃，老卡当晚在家中遇害，米嘉成为首要嫌疑人，最后米嘉被判弑父有罪，流放西伯利亚；而真相却是当晚财迷心窍的斯乜尔加科夫杀死的老卡。
在读书的过程中，讲述案件的部分，我读的非常顺畅，甚至是废寝忘食，而在有些地方，读的很困难，比如伊万和阿辽沙那一段对话的前半部分，个人感受是比较晦涩的。还有最后控方律师的陈述，我又觉得是不是有点啰嗦。
读完书之后，我去网络上看其他书友的书评，发现大家的书评中对《宗教大法官》这一章节的评价很高，几个国外教授的关于《卡》的讲座也是关于这一章节的解析比较多；所以我就又看了一遍，看完第二遍之后，我不能说自己和陀翁产生了很强的连接，只能说我能接受到的是：
陀翁对民众是有一些失望的 比如这段
人们最坚持不懈而又劳神费心的努力，莫过于身为自由人便忙着寻找该对之顶礼膜拜的那个人。但人们寻找的崇拜对象必须是无可争议的、人人都会立即同意对之顶礼膜拜的。因为这些可怜的人关心的不仅仅是找到自己或别人崇拜的对象，而且要找到能让人人都信仰、人人都崇拜的对象，一定得大家一起来。这种共同崇拜的需要乃是人们——无论个别人还是全人类——亘古以来最主要的苦恼。为了共同崇拜，人们自相残杀。他们创造了各自的上帝，便互相挑战：“把你们的上帝扔掉，来崇拜我们的，否则你们和你们的上帝都得死！”直至世界末日都将如此，甚至到上帝统统从世间消失以后依然如此，因为那时还会向偶像下跪。
陀翁对统治者也是失望的
“‘他们得到了我们给予的面包，当然会清楚地看到，我们从他们那里把他们用自己的手挣得的面包拿来分给他们，什么奇迹也没有；他们会看到，我们没有把石头变成面包；但是他们会真的感到高兴，原因与其说是面包本身，不如说他们是从我们手中得到的面包！因为他们记得太清楚了，以前没有我们的帮助，他们挣得的面包却在他们手中变成石头，而他们回到了我们这边，石头却在他们手中变成了面包。彻底服从意味着什么——他们的体会实在太深、太深了！人们一天不懂得这道理，便一天得不到幸福。
这段话表现了统治者的极度狂妄，以及对「他们」的冷血，仿佛「他们」如动物一般。
还有这一句
是的，我们将会要他们干活，但在劳作之余我们会把他们的生活安排得和儿童游戏差不多，有儿歌，有合唱，有天真无邪的舞蹈。
这一句放在当代社会也是讽刺感十足，令人后背发凉。因为我们绝大多数人大概率就是那个「他们」，每日忙忙碌碌，辛苦工作买房买车，终其一生精神上也没跳出过「我们」安排的playground。
这一段确实信息量很大，也非常的抽象，我想陀翁是一个对社会比较悲观的人，「我们」「他们」构成了整个社会，这个社会明显不是一个理想中的样子，至于理想是什么，这可能是人类的终极问题之一吧。
再说说我个人全书中比较喜欢的章节吧，首先是上尉和他的小儿子伊柳沙，读书的过程中，我对上尉的处境产生了很深的同情，这应该和上尉所处的阶级有关，我很容易和他产生连接。上尉是一个穷困的退伍军人，妻子有一点精神病，两个女儿，一个女儿腿脚不便，一个女儿去彼得堡读书，上尉在当时的俄国社会应该属于城市底层。有一次在街上米嘉当众拧着上尉的胡子打了他一顿，让上尉遭受了很深的羞辱，他的小儿子伊柳沙的自尊心因为这事，受到了很深的伤害。我挺能理解伊柳沙的自尊心，当你的父母身处社会的底层（我并没有对我们父母的不敬，我非常感激他们的付出），作为青少年，你还没有完全感受到社会阶级的压迫，对社会阶级还没有形成很强的无力感，所以你对这种侮辱会非常不服气，会不甘心，会想王侯将相宁有种乎，伊柳沙有很强的报仇欲望，想帮父亲（但也是为了自己）找回尊严。而在阿辽沙给上尉200卢布的时候，上尉先是表现出了喜悦，因为钱对他很重要，家里妻子和女儿都在生病，这钱可能是救命钱。然后他却突然间把钱揉成一团扔在雪里，转身吼着跑走了。这一段对上尉既渴望荣誉，又被生活压迫的无路可逃下拒绝别人“施舍”的扭曲心态描写的让人非常很震撼。是啊，「良心」很重要，没有「面包」却是会死人的，上尉在那种时刻能做出拒绝钱财的举动，让人肃然起敬。在现如今全球这种消费主义时代，大家一切向钱看，那还有什么荣誉可言，不偷不抢不骗，不昧着良心赚黑钱，可能就算是一等一的可以配一朵小红花的好公民了。
《卡拉马佐夫兄弟》是一部很复杂的书，“外国人有他们的哈姆雷特，而我们目前还只有卡拉马佐夫！”，一千人有一千个卡拉马佐夫，我们每个人对书中的人物，以及作者的观点都会有自己的看法。当下的我还没有完全理解这书的精髓，很多内容在读的过程也只是囫囵吞枣（比如伊万和自己的对话），读了个大概。我想我会过一段时间再读一遍这本书。</description>
    </item>
    
    <item>
      <title>《也许你该找个人聊聊》读后感</title>
      <link>/posts/maybe-you-should-talk-to-someone/</link>
      <pubDate>Sat, 08 Jan 2022 22:53:15 +0000</pubDate>
      
      <guid>/posts/maybe-you-should-talk-to-someone/</guid>
      <description> 《也许你该找个人聊聊》是一本关于心理学的书，作者是一名心理咨询师，通过描写自己从业中遇到的四个患者的经历，以及作者自身的心理咨询经历，为我们读者循序渐进的展开了心理咨询的过程。书中的五个案例分别是，一个身患癌症的大学老师朱莉，一个好莱坞的成功编剧，一个年过七旬的老人，一个20多岁的女孩，以及作者自己，一个年过40，有一个儿子，刚被男友抛弃的女心里咨询师。
这里我先写一下我对这本书的结构和写作计较做一些解析。本书中作者的写作手法非常的巧妙，在读这本书的过程中，我甚至有一种看美剧的即视感。作者把五个人的故事时间线拉平，交叉穿插讲述，在每个主人翁的心理咨询进展到了某个关键节点时，书中又会切换到另外一个人身上（手法确实很美剧）。此外，作者还会在写作中在暗插一些悬念，吸引读者继续读下去；比如编剧约翰的经历，作者在开始把约翰的一些让人厌烦的举动描述的很详细，他的自大，不耐烦都有点令人生厌，但我在读的过程，大概读到一半我猜到约翰身上可能发生了很悲惨的事情。后面的章节也为读者解开了这个谜底，约翰的小儿子再一次车祸中死去了。当然，我读到这一段的时候也是非常震惊的，也会被触动到。但从我刚才的描述中，比如我在读的过程中会猜约翰发生了什么事这一行为，其实和读小说的过程是很像的。这或许是这本书被很多人作为2021年推荐书之一的原因吧，我也很喜欢这本书的写作手法，毕竟读的过程确实很愉悦。
书中的几个案例，这里就不做讲述了，看完全书之后，给我留下最深印象的是朱莉，那个得了癌症，要在30岁就面对死亡的女教师。一个人，在人生可能刚进入正午的时候，准备好好生活，好好工作，大干一场的时候，却被癌症判了死刑，无论她接不接受，死神就在那里等着她，这很残酷。朱莉在得知癌症之后，刚开始不敢去计划未来的生活，她不知道自己还有多久的日子，这些计划是否有意义，而随着时间的推移，朱莉在剩下的日子里选择了继续有计划的生活，这很需要勇气。朱莉在患癌的日子，去做了自己的 dream job，超市收银员，尝试去生一个小孩，去为自己的葬礼做准备。心里咨询的过程，作者更多的是陪着朱莉去讨论这些事情，书中对朱莉因为癌症带来的suffer描述的篇幅不算多，讨论死亡的部分也很少。这个时候的心里咨询我理解更多的可能是一个陪伴，对结果改变不了什么的时候，那就让过程少一些痛苦，无论是生理上的，还是心理上的。
也如书中所说，心理咨询其实最终是否有效还是要看患者自己是否能够打开自己的心结，走出心魔。咨询师有的时候是一个引路人，让患者自己找到自己的心结所在，有时候是一个陪伴着，只是陪着患者去经历这一段时间。
读完本书，一个收获是当我们为某件事情焦虑的时候，除开事情的表相，也许它还有更深层次的原因；要想自己能更好的生活，我们需要和他人聊聊，也需要和自己聊聊，多和自己做有效相处，去弄清楚事情的底层原因，这很重要。
书中金句很多，这里摘录了一些：
你得先放手去做，然后才能有所领悟。 生活的本质是变化，而人类的本性是抗拒变化。 我感觉我的痛苦才是我爱盖比的证明。如果我不再痛苦，那就意味着我已经忘记他了，意味着他对我来说已经没那么重要了。 在朱莉看着死亡渐渐逼近自己的过程中，还有一件事让她颇感震惊：她发现周围的世界开始变得异常生动鲜活。她以前习以为常的每一件事都变成了一种生命的启示，就好像她又回到了童年，又重新认识了这个世界。她重新认识了味觉——从一只草莓流淌到她下巴上的香甜汁液，还有在她口中融化的奶香四溢的甜点。她重新认识了嗅觉——从家门前草地上的小花、同事的香水、被冲上岸边的海藻，还有晚上床边的迈特冒着汗的身体。她重新认识了听觉——从大提琴的琴弦发出的声音、汽车行驶时发出的刺耳声音，还有她小侄子的笑声。她的体验也被刷新了——无论是在生日派对上翩翩起舞，还是坐在咖啡馆里看着人来人往，或是去买一件漂亮的衣服，打开一封信件。所有这些事，不管听上去多平凡，都能让她无比快乐。朱莉变得像是活在超现实中。她发现，当人们自欺欺人地以为还拥有大把的时间，他们只会变得懒惰。 对某些人来说，宽恕就意味着豁然解脱——你不宽宥人们的恶行，但原谅了那个伤害你的人，这样你就可以跨过这道坎，继续你的生活了。 家长常常都会羡慕自己的孩子——羡慕他们拥有的机会，父母为他们提供的稳定的经济和情感环境，羡慕孩子们还有无限的未来，而这对家长们来说都是无法重来的过去。他们小时候得不到的东西，现在竭尽全力让自己的孩子们能拥有，但却常常在不知不觉中因为孩子们拥有的幸福而为自己感到愤愤不平。 现代人总是觉得如果做事不够迅速，就会损失一些时间。但面对省下来的时间又不知该怎么办，只能打发了事。 我认为如果你能想清楚为什么这个抉择对你来说这么艰难，那你才更能从这个思考中获益。 不要评判你的感受。留意它们。把它们当作你的地图。不要害怕真相。 我意识到人们其实讨厌被告知应该要做什么。 人们总是避开那些与自己观点不吻合的线索。 </description>
    </item>
    
    <item>
      <title>我的2021</title>
      <link>/posts/my-2021/</link>
      <pubDate>Mon, 27 Dec 2021 15:33:23 +0000</pubDate>
      
      <guid>/posts/my-2021/</guid>
      <description>2021改变了很多又什么都没有 今天是2021年12月27号，再过4天，2021年就结束了，我们将迎来2022年。一年又过去了，回顾2021年，自己好像做了很多事情，比如结婚，买房，升级，但又好像什么都没有做，自身成长并不太多。21年相比20年，我除了老了一岁，自身并没有什么不同。
其实结婚，买房，亦或是职业职级上的晋升，对我而言，可能只是事情发生到某个节点顺理成章的结果，它没有那么令人兴奋，也不会出人意外。假设我今年没有结婚，或者没有买房，我当下的心境估计变化也不大。因为时间是连续的，我不会因为今天我结婚了，生命就发生了大不同；也不会因为新房摇号没摇到，日子就彻底没法过。我们每个人的处境更像是从出生到当下的积分，过往的每一分一秒累加出我们当下的生活状态。所以我不期待某一刻我的生活会发生多么美妙的转折，也多了一分在面对生活中不确定性事件的时候相对泰然的处理。
关于时间 每个人当下的处境是时间积分的结果，它既囊括了个人自身的微观过往，也集合了我们身处宇宙的历史宏观发展。这个时代的弄潮儿有些想冲破地球，移民火星，有些想打破过往教条，建立社会新秩序，他们站在过往人类发展的基石上，运用他们自身的能力和资源去尝试带领大家进步；而我们普通人想冲破时间累积后的状态就很困难，所以为了冲破一成不变乏味的生活，我们有些人会寄希望于宗教，去庙里烧香拜佛，希望菩萨保佑；有些人则选择相信运气，摸奖，嗜赌成性；有些人更加理性，选择所谓的和时间做朋友，日拱一卒，不断的学习成长，精进自我。大家做的这些理智的，非理智的选择，其实都是想突破时间的桎梏，让自己生命泛起一些浪花。而时间确实是一切痛苦的根源。
今年看了一本小书，叫《悉达多》，里面说到时间就像一条河，上游是过去，下游是将来。如果我们站在比时间维度高一维的角度去看，过去，将来，和现在是同时存在的。不论是物理意义上，还是思想意义上，用这个角度去看待时间很高级，有那么一瞬间，它仿佛能让我悟到生命的本质，可以让自己跳脱出当下的处境，以一个更加开阔的思维去看待人生。
那豁达的思维就会让人生变好吗，我想是的，我们绝大多数时候的开心不开心，都是自己的脑袋在作祟。古人的「不以物喜，不以已悲」是非常难的一种状态，也是对「得道」的一种精神状态描述。我们多数人多数时候都会受外界影响自己的情绪，早上为股市大跌而忧愁，下午开会为领导的一个赞扬而雀跃，晚上又因为老婆的抱怨而烦心，每天都在情绪的喜悲中交替，枉费精神。「不以物喜，不以己悲」，让生命趋于平静后的宁静，它值得我去追求。
书影以及其他点滴 今年书大概读了小10本，其中有几本还是很小的那种，读的不多，从书中获得的收获可能也没那么多。有时候我选择看书，坦白讲也和自己对需要获取知识有一种焦虑感有关，强迫自己看的。至于书的选择上，也许自己30多岁了，看的书和自己的世界观也比较接近，书的选择范围比较窄，当然也和读的很少有关。如果要选一本年度书籍的话，推荐《邓小平时代》，这本书让我看到了时代领袖的传奇与坎坷，也让我看到了一个人一生中要面对很多的不确定性，当然最让人津津乐道还是邓小平身上的乐观与坚韧。
而电影方面，就看的更少了，可能是早些年可以看的老电影比较多，加上今年能看的新电影比较少，今年电影看的少，留下很深深刻的电影也很少。这里推荐一部《困在时间里的父亲》，我相信每个看完全剧的人都会被安东尼·霍普金斯最后一段的表现所折服，同时也会思考人之为人的根本；当我们老去时，我们能拥有的或许只剩记忆了，而衰老又会夺走我们的记忆，也许在我老了之后，我不知道自己会不会不知所测。而多数人弥留之际，不知道是不是最后脑海里回想的会和安东尼·霍普金斯一样，是自己的母亲。
今年消费了很多时间在看电子竞技比赛上面，包括了英雄联盟，王者荣耀，Dota2，收获了很多网络流行词，然后就没有其他收获了。我的确很喜欢看竞技类的比赛，比如这类Moba游戏，又比如足球，篮球，网球这类比赛。消费了这么多时间在这类娱乐上，此刻也只能告慰自己人总是要娱乐的，明年要克制一下就好。年度比赛，今年NBA，足球，网球决赛我看的不多，要选的话，本来想选欧洲杯决赛，但我没看，这里选德约科维奇法网半决赛对阵纳达尔那场比赛吧，很精彩。
2021年，自己伤病多了一些，腰自从6月份扭伤，到现在也没痊愈，所以也没怎么好好运动，然后还得了口腔溃疡，咽喉炎这些，中间有一段时间失眠也比较严重。希望2022年，家人和自己身体健康，有了好的体魄，精神才好，生活质量才会高。
最后还是来一句葛优在《甲方乙方》电影里面结尾处的一句台词，2021年过去了，我很怀念它。</description>
    </item>
    
    <item>
      <title>理解VQ-VAE（DALL-E）- Pt.1</title>
      <link>/posts/understanding-vqvae/</link>
      <pubDate>Sat, 11 Dec 2021 12:55:42 +0000</pubDate>
      
      <guid>/posts/understanding-vqvae/</guid>
      <description>本文是 https://ml.berkeley.edu/blog/posts/vq-vae/ 一文的翻译。
就像机器学习社群的所有人一样，我们对OpenAI发布的DALL-E的生成结果感到不可思议。这个模型可以根据文本信息生成精确的，高质量的图像。该模型可以渲染出一些在现实世界不存在的问题，比如“牛油果形状的扶手椅”。
为了庆祝DALL-E的发布，我们准备写一个系列文章去解释DALL-E模型的关键部分。
该系列博客的第一篇会来介绍VQ-VAE，VQ-VAE是DALL-E的一部分，它使得该模型可以生成如此多种多样的高质量的图像。
在下一篇博客里面我们将会介绍用于多模态，自回归的模型transformers。transformers是DALL-E的另外一部分，它主要用来学习语言和图像之间的相关性，有了语言和图像之间的相关性，DALL-E才能产生如此有创意且准确的输出。
Note: 这篇博客需要读者了解一些深度学习和贝叶斯概率的知识。
基础 VQ-VAE 是 Vector Quantized Variational Autoencoder 的缩写，这里面有很多的大词，因此，让我们先简要回顾一下基础知识。
我们首先定义隐空间（latent space）的概念，然后再定义自编码器（autoencoder），最后，在解读 VQ-VAE 之前，我们将回顾变分自编码器的基础知识（Note: 如果你对这部分知识很熟悉，请直接跳开这部分，直接去到解读VQ-VAE细节的部分）
隐空间（Latent Space） 隐空间是对给定的原始数据分布的一些潜在的“隐藏”表示。让我们看一些例子来更清楚的理解这个概念。
想象一下原始数据是 x ∈ R_n, 它们是通过线性变换从某个较低维度 z ∈ R_m 生成的（m &amp;lt; n）.具体来说，x 是通过 x =Az + v 来生成的，其中 v 是 n 维独立同分布高斯噪声，A ∈ R_nxm.
一般来说，我们只会看到原始数据x;我们无法访问z，这也是为什么它会被称为数据的潜在或“隐藏”表示。不过，我们想要获得z，因为它是一个更基本的，压缩的数据表示。此外，对于需要使用该数据的算法，这种隐示的数据表示可以成为更为有用的输入。
原始数据是隐空间的一种线性转换的这个设定，和无监督经典算法PCA的定义很像。PCA本质上试图从上面的例子中找到底层的z表示。PCA很棒，但如果潜在表示和原始数据之间有着更复杂的非线性关系呢？举例来说，下图显示了更复杂的隐空间能编码出高层次的信息。在这个例子中，PCA 将无法找到最佳的潜在表示。 相反，我们可以使用自动编码器来找到这个更抽象的潜在空间。
Note: 隐空间不需要是连续的向量空间，它可以是一组离散的变量，这也是VQ-VAE的隐空间类型。但在我们开始之前，让我们先了解一下自编码器。
自编码器（Autoencoders） 自编码器属于无监督学习方法，它使用神经网络为给定的数据寻找非线性的潜在表示。神经网络分成两个部分：一个编码器，z=f(x),一个解码器 x&amp;rsquo; = g(z).
x 是输入数据，z是隐向量，x&amp;rsquo;是 x从隐空间中的重建。f(x) 和 g(z) 同为神经网络。把两个放在一起，整个模型可以被描述为 x&amp;rsquo; = g(f(x))（看下图）
理想情况下，解码器应该能够从编码器的隐表示中准确的重建出原始数据。如果模型能够学习出这种重建，那我们就可以假设我们的隐空间可以很好的代表了原始数据。为了实现这一目标，我们训练一个模型，其中在x和x&amp;rsquo;之间加入重建loss.</description>
    </item>
    
    <item>
      <title>活到33</title>
      <link>/posts/33/</link>
      <pubDate>Wed, 27 Oct 2021 19:48:31 +0000</pubDate>
      
      <guid>/posts/33/</guid>
      <description>前几天团建去了海南万宁，回来的最后的一天正好是我33岁生日。每年生日我会写一篇“活到xx”的文章，来“庆祝”生日，今年当然也不例外。在从海口飞回上海的飞机上，我就在想今年要写点什么？
我2011年从大学毕业，今年正好是我毕业10周年的日子，所以我写一下我毕业10年的事情吧。最近大学校友组建了个微信群，拉大家进群让大家回去参加10周年活动；我是没什么意愿回去参加校友会的，个中原因是因为我的大学比较一般，我对我的母校没有很强的归属感。
先说一下工作，毕业10年，我换了三份工作，第一份工作在南宁和广州，干了大概1年。毕业1年之后，12年端午节附近来到上海，在一家小公司开始第二份工作，干了大概2年半，然后14年11月来了腾讯，至今在腾讯已经干了快7年了。三家公司是三种不同的工作体验，其中第二家公司的leader wenqi对我的影响蛮大，跟着wenqi，我学习到了很多研发技术和经验。那两年工作压力很大，记得2012年过年回家，弟弟说我看起来很疲惫，整个人看起来闷闷不乐，也不太爱说话。后来想想那时候我的确给了自己太大的压力，几乎每天都过度焦虑于工作的事情。但那段时间，即便压力再大，也没思考过离职，因为我能感知到每天都在被新的知识冲击，脑袋里面那种获取到新鲜知识的快感让人上瘾。比如尽早return，比如代码结构，第一个new的object，一定是最后一个free，比如markdown，比如状态机，这一个一个经典的编程知识，是一个普通大学毕业生在2012年很难接触到，更别提在日常coding中加以使用。当接触到这些理念之后，我会觉得这东西很有道理，就像是为自己的编程人生找到了锚点。后来在我独自面对一些不确定的问题时，我会变的笃定，有勇气去做一些不确定的事情，相信对的工作方式，相信步步为营，相信“复杂的事情简单化，简单的事情重复做”。
后面即便来了腾讯，我也一直秉持着“复杂的事情简单化，简单的事情重复做”，相信技术是可以自学的。就像后面我自己摸索出iOS reverse，图像图形处理，OpenGL渲染，以及计算机视觉。只要愿意学习，好像的确啥技术都能学。
生活上，这10年，周围的亲人和自己均发生了不小的变化。15年奶奶去世，今年外婆也走了，这两年过年回家发现爸爸妈妈头上的白发和脸上的皱纹也变多了，他们今年53岁，步入了中老年。在万宁的那几天晚上，我不断做梦梦到自己的家人，因为一些外在原因，我高中之后，就没有和家人长时间生活在一起，每年基本上就过年那几天会一起生活；有时候我会觉得他们是一瞬间老的，印象中他们还是意气风发的青年人，有着自己的抱负，转瞬就已经步入中老年了。我和我的父辈，这两代农村人，因为打工，求学错过了很多和亲人一起生活的时光。今年国庆期间，我在老家办了婚礼，爸爸妈妈很开心，我的人生也进入了新的一个阶段。
活到33，有一点30而立的意思，希望在今后的日子里，自己可以更加笃定自信，生命有很多的可能性，勇敢去追求自己的内心。</description>
    </item>
    
    <item>
      <title>Vision Transformer - Transformer的实现和代码解读</title>
      <link>/posts/vit-2/</link>
      <pubDate>Mon, 11 Oct 2021 21:05:48 +0000</pubDate>
      
      <guid>/posts/vit-2/</guid>
      <description>2 Transformer的实现和代码解读 2.1 Transformer原理分析： Encoder
图1是一个seq2seq的模型，左侧为Encoder block,右侧为Decoder block。红色圈中的部分为Multi-Head Attention,是由多个Self-Attention组成的。Encoder block包含一个Multi-Head Attention, Decoder block包含两个Multi-Head Attention(其中有一个用到Masked)。Multi-Head Attention上方还包括一个Add &amp;amp; Norm 层，Add表示残差连接（Residual Connection）用于防止网络退化。Norm 表示Layer Normalization,用于对每一层的激活值进行归一化。比如说在Encoder input处的输入是机器学习，在Decoder Input处的输入是,输出是machine。再下一个时刻在Decoder Input处的输入是machine，输出是learning。不断重复直到输出是句点(.)代表翻译结束。
Encoder: 首先输入 X ∈ R(nx, N)通过一个Input Embedding的转移矩阵 Wx ∈ R(d, nx)变为一个张量，即上文所述的 I ∈ R(d, N)，再加上一个表示位置的Positional Encoding E ∈ R(d, N),得到一个张量。
进入绿色block，绿色的block会重复N次。绿色Block的第1层是一个上文讲的multi-head的attention。现在一个sequence I ∈ R(d, N)经过一个multi-head 的attention，会得到另外一个sequence O ∈ R(d, N).
下一个Layer是Add &amp;amp; Norm，这里的意思是：把multi-head的attention的layer的输入 I ∈ R(d, N)和输出O ∈ R(d, N)进行相加以后，再做Layer Normalization。
Batch Normalization强行让一个batch的数据的某个channel的 μ=0，σ=1，而Layer Normalization让一个数据的所有channel的μ=0，σ=1。
接着是一个Feed Forward的前馈网络和一个Add &amp;amp; Norm Layer。 所以，这一个绿色的block的前2个Layer操作的表达式为：</description>
    </item>
    
    <item>
      <title>Vision Transformer - Self-Attention</title>
      <link>/posts/vit/</link>
      <pubDate>Sun, 10 Oct 2021 10:04:18 +0000</pubDate>
      
      <guid>/posts/vit/</guid>
      <description>Transformer是Google团队在2017年提出的一种NLP经典模型，目前流行的Bert也是基于Transformer。Transformer模型使用Self-Attention机制，不采用RNN的顺序结构，使得模型可以并行化训练，而且能够拥有全局信息。
1. Self-Attention 1.1 处理Sequence数据模型 Transformer是一个Sequence to Sequence model,特别之处在于它使用self-attention.要处理一个Sequence，最常想到的是使用RNN，它的输入是一串vector sequence,输出是另一串vector sequence.如下图1左所示：
假设是一个single directional的RNN，当输出b4s时，默认a1,a2,a3,a4都已经看过了。如果假设是一个bi-directional的RNN，那当输出 b任意 时，默认a1,a2,a3,a4都已经看过了。RNN非常擅长处理input是一个sequence的状况。
那RNN有什么样的问题呢？RNN的问题在于，它很不容易并行化。假设在single directional的RNN情况下。要算出b4就必须要先看a1,再看a2,再看a3,再看a4,所以这个过程很难并行处理。
所以就有人拿CNN来取代RNN， 如下图1右所示。其中，橘色的三角形表示一个filter，每次扫过3个向量a,扫过一轮以后，就输出一排结果，使用橘色的小圆点表示。
这是第一个橘色filter的过程，还有其他的filter，比如图2中的黄色的filter，它经历着与橘色的filter相似的过程，又输出一排结果，使用黄色的小圆点表示。
所以使用CNN的确可以做到跟RNN的输入输出相似的关系，也可以做到输入是一个sequence，输出是另外一个sequence。 但是表面上CNN和RNN可以做到相似的输入和输出，但是CNN只能考虑非常有限的内容。比如在我们右侧的图中CNN的filter只考虑了3个vector，不像RNN可以考虑之前所有的vector。CNN可以通过堆叠filter，多堆叠几层，上层的filter就可以考虑比较多的信息，比如第二层的蓝色三角形filter看了6个vector，所以只要叠很多层，就能够看很长时间的信息。
而CNN的一个好处是：它是可以并行化的，不需要等橘色的filter算完，再算黄色的filter。但是必须要叠很多层filter，才可以看到长时的资讯。所以self-attention，如下图3所示，目的是使用self-attention layer取代RNN所做的事情。
所以重点是：我们有了一种新的layer，叫self-attention,它的输入输出和RNN是一样的，输入一个sequence，输出一个sequence，它的每一个输出b1 - b4 都看过了整个输入sequence，这一点与bi-directional RNN相同。但神奇的地方是：它的每一个输出b1-b4可以并行计算。
1.2 Self-attention Self-attention 具体是怎么做的？
首先假设我们的input是图4的x1-x4,是一个sequence，每一个input（vector）先乘上一个矩阵W得到embedding，即向量a1-a4。接着这个embedding进入self-attention层，即每一个向量a1-a4分别乘上3个不同的transformer matrix Wq, Wk, Wv,以向量a1为例，分别得到3个不同的向量q1,k1,v1.
接下来使用每个query q 去对每个key k做attention，attention就是匹配这2个向量有多接近，比如我现在要q1 和 k1 做attention，就可以把2个向量做scaled inner product，得到α1,1.接下来再拿q1和k2做attention，得到α1,2,以此α1,3,α1,4。其中scaled inner product计算公式为：
d 是q跟k的维度。其中q.k的数值会随着dimension的增大而增大，所以要除以dimension的根号值，相当于归一化结果。
接下来要做的事如图6所示，把计算得到的所有α1,i值取softmax操作。
取完softmax操作以后，我们得到了α^1,i，我们用它和所有的vi值进行相乘。具体来讲，把α^1,1 乘上v1, α^1,2 乘上v2,把α^1,3乘上v3,把α^1,4 乘上v4,把结果加起来得到b1，所以，在产生b1的过程中用了整个sequence的信息。如果要考虑local的information，则只需要学习出相应的α^1,i = 0,b1 就不再带有那个对应分支的信息了；如果要考虑global的information，则只需要学习出相应的^1,i ≠ 0，b1就带有全部的对应分支信息了。
同样的方法，也可以计算出b2,b3,b4,如下图8所示，b2就是拿query q2去对其他的k做attention，得到α^2,i，再与value值vi相乘取weighted sum得到的。
经过了以上一连串计算，self-attention layer做的事情跟RNN是一样的，只是它可以并行的得到layer输出的结果，如图9所示。现在我们要用矩阵表示上述的计算过程。
首先输入的embedding是 I = [a1, a2, a3, a4], 然后用 I 乘以 tranformation matrix Wq 得到 Q = [q1, q2, q3, q4],它的每一列代表着一个vector q。同理，用I乘以tranformation matrix Wk 得到 K = [k1, k2, k3, k4], 它的每一列代表着一个vector k。用 I 乘以 tranformation matrix Wk 得到 Q=[v1, v2, v3, v4],它的每一列代表着一个vector v。</description>
    </item>
    
    <item>
      <title>微习惯</title>
      <link>/posts/mini-habits/</link>
      <pubDate>Sun, 25 Jul 2021 21:03:54 +0000</pubDate>
      
      <guid>/posts/mini-habits/</guid>
      <description>微习惯 - 书摘 压力越多，生活就越难改变。 一个行为变成习惯所需的时间平均为66天 2009年的那项研究里还有一点更有趣的记录。研究人员得出了一个结论：从生理学角度看，漏掉一天也不会耽误习惯的养成，一天成就不了这个过程，也毁灭不了这个过程；但从心理学角度看，这可能会带来问题。如果你真的漏掉了一天，请记住，以后要尽量坚持下去，一天都不要偷懒，因为坚持才能防止你受到打击并前功尽弃。 重复就是（潜意识）大脑使用的语言。多重复几遍，就不会忘记。这是最初也是最后一个关于大脑的笑话。 大脑是由执行决策和进行自动行为模式识别的两部分组成的系统。前额皮层的管理功能相当活跃，反应灵敏，但同时也消耗了大量的精力（和意志力）。基底神经节的自动功能不仅强大，而且效率高。它们能节省精力，无须持续监督就能处理各种任务。 边际效用递减法则。这条经济法则认为，吃第五块比萨时的愉悦感会略低于吃第四块时的，吃第四块时的又略低于吃第三块时的。我们在进行重复行为时也存在同样的现象。 我们是用动力或意志力开启新的行为。动力不可靠，所以不能充当建立习惯的策略。意志力可靠，但前提是你没有把它耗尽。 引起意志力损耗的5大主要因素：努力程度，感知难度，消极情绪，主观疲劳和血糖水平。如果我们能成功客服这5项障碍，我们就应该能走向成功。 塑造你生活的不是你偶尔做的一两件事，而是你一贯坚持做的事。 一小步+想做的事=较高的进一步行动的可能性。 养成每天做一个俯卧撑的习惯比隔很久才狂做30个俯卧撑更好。只有先养成习惯，才能将其培养得更强，目标更高。 一个普遍真理的具体案例-人一旦感受到控制，就会消极怠工。 当人们认为任务和决定很有趣时，他们的毅力就会更强。 自主权似乎是通过激活我们的内在动力起作用的，其中涉及的案例显示，自主权越高，结果越好（每一项都有独立的研究支持），这些案例包括肥胖症患者减肥、吸烟者戒烟以及糖尿病患者控制血糖水平。 幸福感会促使人们进行抽象思考，这有助于看清全局，但会不利于实现目标，因为实现目标需要具体思维。 正念是目标清晰地活着和敷衍地活着之间的区别。 一个得不到执行的念头只会消亡。 我的经验法则是把我想要的习惯缩小，直到小得不可思议为止。当某件事听起来“小得不可思议”时，大脑会认为它毫无威胁。 用“为什么钻头”找到来源。列好习惯后，看看你为什么想要实现它们，但别在这一步就停止。再问问为什么，不断地问下去，直到形成循环和重复为止，因为这时候你已经找到了核心。想让这个方法奏效，就必须诚实地回答问题，所以请深入挖掘。 我们的目标是进入执行心态，而不是被困在慎重心态的层面。 大笑，大笑时会释放出让你心情变好的化学物质。我有时在完成写作任务后会在YouTube上看读错唇语的滑稽视频。下次有人看到你在看一段搞笑视频时，告诉他们你在训练大脑吧，这可是科学！ 成功会带来更多成功，因为我们喜欢这种结果和成就感。 过程中让自己感到快乐。快坚持不下去时，就给自己一点奖励，休息一下。 一项研究显示，把想法（无论积极还是消极）写在纸上时，会让其在大脑中更加突出，而打字就不具备同样的效应。一定要手写，才能将其重要性放大。 经常对自己有较高的期待值是很有价值的，因为这能提高你的目标上限。 这个策略的全部益处，力量和优势都取决于你在纸面上和心里始终将目标保持在微小状态的能力 代表行为已成为习惯的信号有： 没有抵触情绪：该行为似乎做起来容易，不做反而更难。 身份：现在你认同该行为，而且可以信心十足地说“我常看书”或“我是个作家”。 行动时无须考虑：你不需要做出执行的决定就能开始该行为。你不会想：“好吧，我决定去健身。”你会自然地收拾好东西并出发，这是因为到周二了，或者好像到该运动的时间了。 你不再担心了：刚开始时，你也许会担心自己漏掉一天或者早早放弃，可当行为变成习惯后，你知道你会一直做这件事，除非出现紧急情况。 常态化：习惯是非情绪化的。一旦一件事成为习惯，你不会因为“你真的在做这件事”而激动不已。当一个行为变为一种常态，它就是习惯了。 它很无聊：好的习惯并不会让人兴奋，它们只是对你有好处而已。你会因为它们而对生活更有激情，但别指望行为本身也是如此。 从小事开始和消除期待值带来的压力是我们取得成功的秘诀，而且效果很好，所以我们要尽可能长久保持。 李小龙有一句名言能很好地总结这一点：“要满意，但别满足。”李小龙在他32年有限生命里的成就比两个普通人在80年里的成就之和还要多，所以听他的没错。 只要遇到抵触，我就会把任务缩小，问题就解决了 戒烟很容易，戒烟很容易，戒烟很容易。 只要往小处想，你就会成为自己生活的主宰。 如果你急于取得巨大进步，那就把精力投入超额完成任务中。大目标在纸面上看着漂亮，但只有行动才算数。目标渺小、结果丰硕的状态比反过来好多了。 你越精通微习惯策略，在生活方方面面收获的成功就会越多 </description>
    </item>
    
    <item>
      <title>法官大人,无罪之最,为全人类S2 简评</title>
      <link>/posts/meiju2021-h1/</link>
      <pubDate>Sun, 16 May 2021 11:39:33 +0000</pubDate>
      
      <guid>/posts/meiju2021-h1/</guid>
      <description>最近看的几部美剧，简单记录。
法官大人 - 🌟🌟🌟 Mr.White换了身西装变成了新奥尔良地区的大法官。这部剧我给个三星，刚及格的水平。剧情比较缓慢，不合理的地方偏多，人物冲突让人high的场景几乎没有。剧中角色也比较单薄，你能才到每个人的行为方式，没有惊喜。唯一的亮点是该剧发生在新奥尔良，我们以往很少在美剧电影中看到新奥尔良，不过可惜的是，剧中对新奥尔良的刻画也不够好，平淡。
无罪之最 - 🌟🌟🌟🌟 这是一部netflix出品的西班牙悬疑电视剧，故事发生在西班牙巴塞罗那和马拉加。男主角在大学的一次派对上，失手杀死了另外一个年轻人，不幸做了四年牢。故事一开始悬疑拉的满足的，男主角的老婆女主角，说因为工作要去柏林，男主角送走女主角之后，却收到了女主角手机发来的别人拍摄的女主角较为裸露的各种视频，尝试电话也打不通。个中故事不多说，这里说下女主角，女主角的身世比男主角悲惨的多，墨西哥穷苦乡村出身，没有父亲，母亲吸毒，死了之后，女主被送到孤儿院。青少年时期，女主从孤儿院逃了出来，从墨西哥逃跑到了西班牙，却没有联系上在西班牙的表哥。流浪了两年之后，在被警察准备遣返的路上，被一个开脱衣舞厅的叫汉尼拔拦了下来，从此就开始一段悲惨的脱衣舞女和妓女的生活。 脱衣舞女生涯中，解释了另外三个舞女，其中一个在一次聚众性爱中，不幸被本剧的反派失心疯杀死。那件事情之后，剩下的三个舞女决心逃离这个地方。一通计划之后，其中两个人干掉了汉尼拔，并制造了女主死亡的假象，逃了出来。10年之后，女主已经换掉身份，被和男主幸福的生活在一起，但无奈男主失手杀人留下了祸根，由此往事被掀起。 我是从一个播客中得知这部剧，播客的名字大致是无罪之最是不是悬疑片的最终形态。影片由他的独特之处，每集开篇都是剧中人物的POV，讲述自己的生活和心路历程。但实话实说，剧进行到最后，戏剧性不太够，悬疑被解答之后，也没有特别的快感，虽然有一些反转，但不够过瘾，对于结局，即使没有完全猜到，但也不会出乎意料，合乎情理。
整体给个四星吧。
为全人类 第二季 - 🌟🌟🌟🌟 故事承接第一部的发展，讲述了美国人登月故事。不过这部剧有一个巨大的假象，苏联人是第一个登上月球的，且苏联也没有解体。总体来讲，这部剧的优点在于摄影，无论是太空场景，还是宇航员在月球上的作业，抑或是地球上的主角们开的车，都非常的fancy。这部剧是apple tv出品，政治非常正确，剧中重要角色几乎都是女性主导，有色人种参与的也非常多。男主角在第二部戏份其实不多，老婆还出轨，的确有点悲催，男二也是离婚，老婆找了个富翁，第二部的结尾男二也挺惨。 想多说一点的是，Apple TV出品的几部剧，总能能剧中感受到苹果所传达出来的价值观，就是那种很正，中产，smart，注重视觉体验。评价四星，闲暇时间看看养养眼也不错。</description>
    </item>
    
    <item>
      <title>投资最重要的事</title>
      <link>/posts/touzizuizhongyaodeshi/</link>
      <pubDate>Sun, 16 May 2021 11:13:03 +0000</pubDate>
      
      <guid>/posts/touzizuizhongyaodeshi/</guid>
      <description>从书名也能知道这是一本关于投资的书籍。会去阅读这本书的契机是在一档叫BYM的博客里面主播分享了这本书。 这本书我读的很慢，断断续续持续了得有个半年了。有趣的是在读这本书的过程中，美股股市由牛市转换为最近的连续大跌。我当然也没能躲过这次大跌，今年的盈利全部回吐，并亏损。
所以投资最重要的事情到底是什么？这里我罗列一些我阅读过程中标记的原书段落
投资是一门科学，更是一门艺术，而投资艺术和其他艺术一样，要想卓越出众，既要多用脑，又要多用心；如何用脑来进行与众不同的第二层次的思考和决策，想法比一般人更深一层；二是如何用心来坚持与众不同的第二层次的思考和行动，行动比一般人做得更高一层。 除了问自己如何以及为何应该成功，在思考一下，别人为什么会失败。 即使是最顶尖的投资者，也会常常犯错。 周期的极端性主要源自人类的情绪与弱点，主观与矛盾。 极端市场行为会发生逆转。相信钟摆朝着一个方向永远摆动或永远停留在断点的人，最终将损失惨重。了解钟摆行为的人则将收益无穷。 逆向投资 买进人人喜欢的股票不会赚大钱，买进被大众低谷的股票才会赚大钱 看到别人没有看到或不重视的品质 多数时候人们会根据既往来预测未来，预测的价值很小。 人类不是被一无所知的事所累，而是被深信不疑的事所累。 对自身处境的正确认识会为我们了解未来事件，采取相应对策提供宝贵的洞见。 忘记过去的人注定会重蹈覆辙 谨慎能帮助我们避免错误，但它也会阻止我们取得伟大的成就。 其他投资者无忧无虑时，我们应小心翼翼；当投资者恐慌时，我们应变得更加积极。 这本书这次我读的不深，要说这次阅读带给我的新知识，新经验。应该是更加强调了投资是一件很严肃，需要认真对待的事情。当我们进入到投资市场时，对我们的投资行为，是需要花费精力去思考自己为什么会投资这一支股票，我的底层逻辑是什么？
很多和我一样的普通人，很难去看到一些当下不明朗，不清晰的机会，即使我们蒙对了一些股票，但在不清楚的状态下我们会谨慎投资，一般仓位都比较小。所以在不清楚的状态下想靠一次投资达成财务自由非常困难。
所以投资最重要的事情是去认真思考自己每一笔投资，想清楚自己当下投资的原因。前期肯定会遭遇一些失败，但经过不断复盘，优化。我们会慢慢笃定我们的一些操作。而这个时候可能也就离成功的投资不远了。</description>
    </item>
    
    <item>
      <title>Have you no sense of decency?</title>
      <link>/posts/no-decency/</link>
      <pubDate>Tue, 04 May 2021 15:13:26 +0000</pubDate>
      
      <guid>/posts/no-decency/</guid>
      <description>最近在某个播客里面听到一段关于美国麦卡锡主义是如何被打败的故事。其中1954年，当麦卡锡把魔抓伸向军队的时候，美军律师约瑟夫韦尔奇受够了来自麦卡锡参议员各种的没有实际证据的凭空指控，听证会上说了那句著名的“Have you no sense of decency, sir”，就此，麦卡锡主义的影响开始消融。这当然有演绎这句话的成分，但从中也能体会到decency是当时一些人很在意的东西，它能够引起社会上大多数人的共鸣。
那什么是Decency，问这个问题，是因为 decency 对我来讲是一个很陌生的词。Decency如何影响人的行为在我们的现实生活也几乎难寻踪迹。 Decency,中文翻译为体面，什么是体面，我们平日生活中的爱面子，讲排场是一种体面嘛？我觉得不是，爱面子，讲排场有部分原因是虚荣，而体面至少是个中性偏褒的词汇。Decency 在维基百科页面是转链接到 respect 页面，所以在英文中 decency，体面，表达的是一种尊重和尊敬。
那我们目前处在的这个社会，大家讲究decency吗？我想应该是蛮多人不讲究是否体面的，而且这种不关心，不在意日益变得严重。讲几个例子， 我07年上大学的时候，玩魔兽争霸3，在游戏平台和别人对战，胜负已定的情况下，失利的一方一般会礼貌性的打出gg,也就是good game，无论是虚假的，还是真心的，都要说一句对方打的不错，投子认负。而现在在玩游戏的时候，如王者荣耀，吃鸡类的游戏中，大家队友之间都要开语音互喷，更加别说给予对手尊重了。
在现实生活工作中，我也很难感受到 decency。一些底层工人我们可以说是经济基础决定了他们无法做到体面，我所在的互联网职场是个高薪行业，但也不存在什么decency一说。近些年国内各大厂基本上都在执行996，甚至有一个资本开设的播客就叫 captita 996l，来宣扬这种加班奋斗的行为。还有今年早些时候PDD发生的员工被辞退的事件，一个年入至少30w的人，过程中，爆出这个同学手机电脑等各种隐私被查个底朝天，这个人就像被当作犯罪分子一般对待。你说，这里面有丝毫的decency吗？我们不被公司体面的对待也就算了，彼此之间也互相轻薄，自古文人相轻，技术人员也互相轻视，当讨论技术的时候，在听懂了你的技术之后，很容易就来一句你这不就是xxx，很简单的之类的。
那其他行业就有体面可言么？我经验很有限，了解到的如教育行业，建筑行业，医疗行业，都难谈体面。既然整个群体都不关心是否体面，那是因为经济原因吗？我们处在初级阶段，还没到讲体面的时候？当然，体面和物质肯定有一定的联系，它肯定是在物质得到一定自由之后，人类在追求内心幸福的时候研究出来的一种形而上的东西。但我觉得体面和物质（资本）之间并不是一个线性相关的联系。我在祖辈身上看到的一些体面行为，在我们这辈身上，却难寻踪迹。
所以写到这里，我也没搞清楚，为啥我们变得看起来越来越不讲究体面。是因为现在生活的快节奏，我们没有精力去维持一种体面？还会整个社会日益增长的财富不均，让大多数人散失了维持体面的动力？我无从知道答案，只希望我们每个人都能够被体面的对待，have a little sense of decency。</description>
    </item>
    
    <item>
      <title>我的2020</title>
      <link>/posts/my2020/</link>
      <pubDate>Sun, 10 Jan 2021 20:38:38 +0000</pubDate>
      
      <guid>/posts/my2020/</guid>
      <description>关于新冠疫情 2020年，英文口语一般读twenty-twenty，可以看作是一个叠音词，那2020年，她可爱吗？很显然，twenty-twenty一点都不可爱，2020年可能是我们目前这些生活在和平年代和地区的人过的最荒诞的一年。而且这种由疫情带来的荒诞，萧条，后遗症至今仍在延续。2020年年初新冠病毒在武汉爆发，接着疫情席卷全球，时至今日，诸如美国，英国还在爆发大规模的疫情，经过一年的抗疫，这个星球至今还没有从疫情中走出来。疫情带来的影响力是持续的，虽然我们国家疫情在7，8月份基本得到了控制，但时至今日，大家生活的方方面面还是笼罩在后疫情时代。我们无法自由的出行，随时随地都要带着口罩，全球化彻底的完蛋。可以说疫情撕掉了这个世界一些发达国家的伪装，我们真实的了解了这个世界的人们原来的样子。不免感概，原来所谓的发达国家，人性都是一样的，有钱会让人变的善良，但如果自身利益受损，有钱人会果断撕掉伪装，拼命的保护着自己的利益。 但真相并不是每个人都想要，希望疫情能够早点过去，让世界恢复他原来的样子，哪怕是伪装的样子也好，撕破脸皮，赤身肉搏，真的是让人太绝望了。
电影，书，体育 2020年，我看了一些电影，美剧，书籍看的不多。书籍推荐《史蒂夫·乔布斯传》，这本书早在2012年，我就打算去看，但那个时候没有看进去，20年读这本书，收获蛮多的，更加加深了我多乔布斯的尊敬。电影方面，今年没看到特别好的电影，都比较一般把。美剧方面收获多一些，比如《风骚律师》，《黄石》都不错。
体育比赛方面，2020年也没看到很精彩的比赛，主要原因还是新冠病毒，很多足球，篮球，网球的比赛，没有观众，观看起来差点意思。
生活 20年5月份，自己去医院做了一个ACL手术，至今也已经快8个月，我的腿还在恢复中。目前还没有恢复到韧带撕裂之前的状态，单腿还不太敢发力。不过相比手术之前，还是有很多进步的，我可以跑步，踩动感单车了，暴汗的感觉还是很不错的。
一点感想 生老病死，岁月蹉跎，2021疫情还在延续，这个世界或许不可能回到之前的样子，或许我们还要在疫情的笼罩下继续生活到2022。只是希望自己能够不以物喜，不以己悲，岁数长了，智慧也要涨。无论晴天雨天，冬天夏天，希望自己可以笃定思想，稳步前行。</description>
    </item>
    
    <item>
      <title>活到32</title>
      <link>/posts/32/</link>
      <pubDate>Sun, 15 Nov 2020 23:11:58 +0000</pubDate>
      
      <guid>/posts/32/</guid>
      <description>死亡是唯一一座永远亮着的灯塔，不管你向哪里航行，最终都得转向它指引的方向。一切都会逝去，只有死神永生。 &amp;mdash;-刘慈欣
前段时间重读了三体这本科幻小说，惊喜于作者各种的科幻设计之外，给我留下最深印象的就是第三部的书名《死神永生》。是啊，世界万物，唯有死神永生。 我是一个从很小就开始思考死亡，恐惧死亡的人。至今有一段记忆仍然在我脑海中很深，在我只有七八岁的时候，冬天的夜晚，我再入睡之前时而会去想宇宙有多大，宇宙之外有什么？如果宇宙之外还有宇宙，那这个之外的宇宙有边界吗？如果有边界，那边界之外又是什么人，反复陷入一个无限的死循环中。思考宇宙的边界原因是我在想人死之后，是不是就不存在了，地球都存在上亿年，我们的生命只有几十年，短暂的就像是一颗流星，我异常恐惧于死亡，因为人死之后，这个世界在发生什么，就完全和你无关了，你不存在了。不存在这个想法会让人非常的恐惧，没有什么比不存在更让人绝望的了。 但就如上面引用，人存生下来，就要面对死亡。死亡是唯一一座永远亮着的灯塔，人，或者说万物，一切都会逝去。 而就我粗浅的观察，这种所谓的存在主义危机，每个人都有，不光你是所谓的社会成功人士，还是农名工，每个人在不同的时刻都会遇到这种存在主义危机。但这种危机真的是不好的吗？我看未必，周遭因为社会责任和义务的增长，我必须把自己的精力消耗在如何解决更实际的问题，工作上如何晋升，算好买房的钱等等各种问题，使得我已经不会再像小时候，早上走在乡间路上，看着天上的星星去思考死亡和人的不存在。但不思考不代表这些问题不存在，我们这些生活在现代社会中的人，每天都在想着如何攫取更多的社会资源，如何才不被时代所抛弃，努力拼搏，逼迫自己去咬牙坚持。但这一切真的有意义吗？殊不知最终都是要走向逝去，在更长的历史长河中，我们的这些悲欢离合，尔虞我诈，在宇宙中和一粒沙子的存在有什么本质的区别。 我知道如果这般思考，在世俗主义上会显得非常悲观，或者说是一种无为而治。宇宙的边界，人的存在和不存在，并不能让你此刻获取幸福，就像罗素在幸福之路中所说，我们应该把问题聚焦在可以落实的角度上，如何获取实在可感的幸福是人类能为之的事情，抛开现实，去无根的思考一些存在主义问题，会让自己陷入存在主义危机。 大师说的也许是对的，亦或者大师知道大家如果沿着存在主义去思考，会陷入一种无法自拔的不存在恐惧，而放弃积极的生活方式。 我想我会沿着实在的现实去追寻幸福，但我也希望自己可以多看看天空的云朵和星星，去思考存在主义，或许这样我们才能最终获得幸福。 活到32，生活压力无所多言，只希望自己不要为了忙碌而忙碌。</description>
    </item>
    
    <item>
      <title>生成对抗网络</title>
      <link>/posts/gan-introdcution/</link>
      <pubDate>Sun, 30 Aug 2020 23:57:04 +0000</pubDate>
      
      <guid>/posts/gan-introdcution/</guid>
      <description>生成对抗网络 Overview 简介 Generative adversarial networks (GANs) 生成对抗网络是机器学习领域最近非常让人兴奋地一项发明。GAN是生成模型：他根据训练数据生成相似的数据。举例来讲，GAN可以生成非常像人脸的照片，尽管生成的人脸不属于世界上任何一个真人，但是人眼真假难分。 下面这些图是GAN生成的。 GAN分成两个部分生成器，判别器，通过生成器来生成数据，通过判别器来判别生成器生成的数据。生成器试图去骗过判别器，而判别器试图保持不被骗。
生成模型 Background: What is Generative Model?
”生成对抗网络”中的“生成”是什么意思？“生成”描述的是一类统计模型，与判别器模型形成对比。
非正式的定义：
Generative 生成模型用来生成新的数据实例 Disciminative 判别模型用来判别不同类型数据的真实性 生成模型可以生成新的动物照片，这些照片看起来像真实的动物，而辨别模型可以分辨出一只狗和一只猫。GAN只是生成模型中的一种。
正式一点的定义：给定一组数据实例 X 和一组标签 Y:
Generative 生成模型得到联合概率 p(X,Y)， 如果没有标签，则获得 p(X). Discriminative 对抗模型得到条件概率 p(Y|X) 生成模型包括数据自身的分布，并可以返回一个给定的样本属于这个数据分布的可能性有多大。比如，一个典型的生成模型是预测一个序列中下一个单词（通常比GAN要简单一些），它们给单词序列分配一个概率。
判别模型忽略给定实例是否可能出现的问题，仅返回该标签应用于该实例的可能性。
A discriminative model ignores the question of whether a given instance is likely, and just tells you how likely a label is to apply to the instance.
请注意，这是一个非常笼统的定义。有许多生成模型，GAN只是生成模型的一种。
Modeling Probabilites 这两种模型都不需要返回代表概率的数字。你可以通过模仿数据的分布来建立模型。
例如，像决策树这样的判别性分类器可以给一个实例打上标签，而不给这个标签分配一个概率。这种分类器仍然是一个模型，因为它预测的标签分布和真实数据的标签分布接近。
同样，生成式模型可以通过产生令人信服的 &amp;ldquo;假 &amp;ldquo;数据来对分布进行建模，这些数据看起来像是从该分布中提取的。</description>
    </item>
    
    <item>
      <title>生活中的困惑</title>
      <link>/posts/confushion/</link>
      <pubDate>Sun, 19 Jul 2020 19:48:58 +0000</pubDate>
      
      <guid>/posts/confushion/</guid>
      <description>现在是2020年7月19日，一个月前我搬到现在住的地方，搬完家之后，上海这一个月一直在下雨，出行不便的同时，数日不见太阳自然让人心情也不太舒畅。
这个周末我相对比较放松，因为手里的两个项目基本上都上线了，个人也比较满意两个项目的结果，所以能感受到自己脑袋里那根紧绷的弦稍稍松了一些。
最近烟抽的比较多,主要还是工作生活各方面事情比较烦杂，让人很困恼。但烟本身并不会让你的困恼减少半分，反倒会带给你生理上新的难受，如烟进入肺部之后，脑袋的晕眩，喉咙里的恶心。也许吸烟的唯一用处是转移你旧的痛苦到吸烟本身以及吸烟之后的感受上。
今年又过去了大半，闷热的周末，脑袋和身体从忙碌中脱身，然后立刻陷入了存在主义的困惑中。周遭发生的事情，让我更加坚信成年人是不存在自由意志的，成年人无非是个社会机器，机械的完成自己既定的KPI，好让这个社会正常的运转下去。该做什么，该说什么，纵使不公平，不甘心，但还是要审时度势，作出对自己利益最为无害的选择。
所以成年人的大脑和卷积神经网络是一样的无疑，大家的大脑就是一个不断加入新数据优化的卷积神经网络，不断迭代更新的同时，就是大家只要‘显卡’‘参数’配置差不多，最后模型的能力也差不多，模型的预测也是大同小异，方差极小。这就是所谓的同质化。
我们经常自怨自艾，中国男性如何不容易，要承受巨额的房价，要处理由于独身女子一代带来的养老压力。别人问你的爱好，你说30岁之后，我只剩下挣钱这一个爱好。我们感慨除了挣钱，干什么都无精打采，更不要提什么理想，抑或是活着是为了什么？因为我们没有时间精力去想这些事情。但我们是真的没时间吗？还是我们本身就没有什么想法，混吃等死是90%的人一种状态，我们思维上懒惰，不想去想这么痛苦的费脑子的话题，我们只想看着球赛，吃着棒冰，吹吹牛逼。
有那么一些瞬间，我一时不知道自己做的这些东西的意义，自己为之奋斗的东西的意义。那种感觉非常像王者荣耀这游戏一般，你赢了一把获得十秒钟的快乐，然后又神经紧张的投入下一把，然后你输了，你很失落，反复几个小时之后，你身心疲惫的关掉游戏。但你知道你明天会如此重复。
这就是我的困惑，如果我对工作的热情如对电子游戏这般，那很有可能是我只想要赢，我并不在乎我做的是什么，我只在乎我能不能赢这个游戏。我很怀疑多数时候多数人说自己爱自己的工作，其实就是类似这种对电子游戏的爱一样。本质上你是被社会安排了一个角色，你把自己投入到安排的游戏里面，说服自己是热爱的，这个游戏会占住你的思维，消耗你的时间，你完全不用思考我是谁，我活着的短暂的几十年该做些什么等问题，只管在这个游戏里面，打怪升级，过完一生。但如此这般的人生是幸福的？还是可悲的？
我能知道无知者是幸福的，因为无知所以没有烦恼。古人的难得糊涂，说的就是这个理。但无知者又是无助的，每个人都是生活的智者，我相信多数人都会在某天的某个时刻问自己，我这是在干嘛？我的时间都流逝去哪了。
我承认我缺乏勇气去打破正常的生活和工作，但我无法不困惑于生命的归宿。不过虽然是困惑，但有时候我很庆幸我有这种困惑。</description>
    </item>
    
    <item>
      <title>ACL重建手术</title>
      <link>/posts/acl-surgery/</link>
      <pubDate>Sun, 17 May 2020 14:47:50 +0000</pubDate>
      
      <guid>/posts/acl-surgery/</guid>
      <description>19年12月份一个工作日的晚上，和同事们一起在公司附近的洛克公园打篮球，过程中我不慎左膝盖韧带扭伤了。当时我是听见砰的一声，隐约感觉到不妙。休息了一段时间之后，我勉强回到了自己家，因为家住6楼，且没有电梯，还记得当时爬楼梯费了半天劲。
当天晚上膝盖处很痛，没怎么睡好，第二天早上发现整个膝盖区域肿了起来，且不能下地行走，无奈之外，我只好去医院就医，排了半天门诊队，医生看了2分钟不到，给我开了点止疼药和膏药，让我先回去吃药+贴膏药。我很惊讶（因为我去医院的经历非常有限，这次是第一次因为自身疾病来就医），问医生是不是可以给我做个核磁共振。一番交流后医生给我开了个单子，让我去缴费处预约核磁共振的时间。
在约定的时间我去医院做了核磁，两天之后拿到了结果单，结果显示左膝韧带完全撕裂，半月板也有损伤。不知所措之下，我又去医院挂了号，医生检查一番之后，说你这要做手术，我当时是觉得很突然，心里想这就要做手术？但心想医生是专业的，就乖乖去这个医生推荐的主治医生那里登记排队做手术，当时时间点是19年1月份农历新年前，医生计划是年后安排手术。
然后就是新冠肺炎疫情的发生，我的手术也被耽搁了。再恢复相对正常的生活已经是3月份的事情了。我在微信上和医生联系之后，医院那边可以安排手术。其实此时我是有点犹豫的，一方面手术虽然是微创，但毕竟是个手术，有点担心，另外一方面手头上的工作，生活方面肯定要提前安排好。
经过一番思考，本着早治早好（因为左膝韧带断了，生活确实受到了一点影响，比如不能跑步，运动），和医生约定了4月尾做这个手术。最终医生帮我安排在了5.6号手术，我略做思考之后果断同意了。
2020.5.4 我住进了上海市第六人民医院，第一次住院，心情还是比较焦躁；第一个晚上没怎么睡着（一方面是自己比较焦躁，一方面是病房里有人打呼）。第二天一早护士跑过来抽血，接着就是做术前检查。5号得知自己被安排在6号第五个做，心情也变得有点焦虑。因为手术前一天晚上8点之后不准吃东西，10点之后就不准喝水了。
6号一早7:30，旁边的小哥就被推进了手术间，另外一个小哥大概在9:30被带走。12点多的时候他们分别被带回来了，此时我还在病房里面等，当时嘴巴非常渴，等的也有点心急。在15:00的时候，有人来叫我了。 接着我躺在推车的床上，被护工推进了手术间。一开始做腿部的麻醉，打麻醉的时候有触电的感觉。打完麻醉，我被放到一个走廊上，等了好久（因为没有表，具体多久也就不知道了，隐约听见有人说再过一个小时是5:30，所以我大概等了有1个半小时），期间我都快睡着了。然后就被推进手术间。进了手术间，被抬到手术台，然后吸了几口不明气体之后就没有意识了。
醒来之后我发现自己躺在一个房间立，当然手术已经做完了。整个过程我一点意识都没有，只有吸全麻气体前一口的记忆，然后就是睁眼醒了。接着被推回病房，术后头6个小时要平躺在床上，且不能喝水吃饭。我是19：15被推回病房的，头6个小时蛮难受的，因为已经24个小时没有喝水吃东西了，就觉得嘴巴和鼻子里面非常干燥。熬过了6个小时之后，我喝了点水，吃了点东西，此时已经凌晨1点了，接下来应该是术后最难受的一段时间，膝盖处非常的酸胀难受，加上已经是下半夜，人很困，但没办法睡。好在医院大家都起得早，6点就已经有人开始叮哐起床，帮助我分散一点注意力。
术后第一天，大多数时间是躺在床上，做一做术后的恢复动作。术后除了第一个晚上很难受，其他时间到没啥疼痛感，只有在直立的时候，髌骨比较疼。
写这篇文章的是5.17，距离我手术已经12天了，目前恢复良好。ACL重建术后的康复非常重要，希望自己能够早日康复，重新运动起来。
关于这次ACL手术，还有一些小tips。
一个感悟是现代医学很伟大。（1）整个手术基本上是无痛的。（2）我看过ACL重建的3D视频，手术需要很精细，而且这一套重建韧带能work，想法也是很有突破性。感谢现代医学。 医院里面的作息非常规律，22:00就有人睡觉，早上6:30就开始起床。经过一番训练，我现在晚上12点就困了，早上也是醒的很早 误打误撞去了6院，住院之后才得知，6院在韧带重建这一块是国内最好的，几个同房病友都是冲着6院的赵金忠主任来的（赵主任在运动医学这块貌似亚洲的扛把子），且他们都是赵主任主刀。我事先没做啥研究，主刀医生是年轻的赵松医生（因为同病房的人都觉得赵金钟主任厉害，我为此手术前还担忧了一下）。不过查了下我的主刀医生，人家也是博士后，且在NBA凯尔特人队从事过医疗工作，且自我觉得ACL这个手术应该不是那么的难，加上名师出高徒，安慰了自己一番之后，也就没想那么多了。现在术后我自我感觉也挺好。 </description>
    </item>
    
    <item>
      <title>Papers reading</title>
      <link>/posts/papers-reading/</link>
      <pubDate>Mon, 09 Mar 2020 00:09:47 +0000</pubDate>
      
      <guid>/posts/papers-reading/</guid>
      <description>Papers reading Human body &amp;amp; face 3d reconstrcution Neural Body Fitting: Unifying Deep Learning and Model-Based Human Pose and Shape Estimation
Learning to Reconstruct People in Clothing from a Single RGB Camera
GAN FaceShifter: Towards High Fidelity And Occlusion Aware Face Swapping</description>
    </item>
    
    <item>
      <title>Forever Legend, Forever Mamba</title>
      <link>/posts/for-kobe/</link>
      <pubDate>Sun, 08 Mar 2020 22:13:39 +0000</pubDate>
      
      <guid>/posts/for-kobe/</guid>
      <description>我是从上高中才开始看NBA的，之前在农村，没有有线电视，高中在城里，可以看CCTV-5直播NBA比赛。那时候大家都爱看火箭队比赛，因为火箭队有姚明。每天中午大家站在食堂的电视机前，看NBA比赛变成了一种习惯。我还记得那是2005年，那一年总决赛是马刺打活塞，总决赛的第5场，霍里的关键发挥至今让人难以忘却。那几年湖人成绩都不太好，科比还惹上了官司，印象中我读高二那年季后赛湖人打太阳，科比个人发挥的很好，但球队的确实力不及太阳，被太阳淘汰出局。
那三年我疯狂的追NBA的一切，那是个麦迪各种突破跳投，卡特还能飞，奥尼尔还能扣的年代，那些年我最喜欢的球星是艾弗森。那时候，我给家里写字台的墙上贴了一张科比穿8号球衣的海报。
随着凯尔特人组建三巨头，我也上了大学，大学期间我看比赛看的很少，几乎连总决赛都没怎么看。只知道科比拿了2个总冠军，然后我就毕业了，进入社会了，NBA后面变成热火，马刺的对决，以及勇士时代。
比赛看的很少了，但因为科比身上那股劲，渐渐的科比变成了我心中篮球的icon。科比退役的那场球我是在公司看的，人生的最后一场NBA比赛科比打成那样，无需多言，因为大家知道，那就是科比。
当春节初二的早上我在睡梦中刚醒，弟弟敲我房门，说：科比死了。我整个人都蒙了。我相信每个热爱篮球，热爱体育的人都被深深的震惊住。
科比的意外，是这个多事的年份让我深深被触动的一件事。我们都道世事无常，但这也太过分无常了。这种无常让我对生命产生了一种虚无感，反复一切都变得没有所谓。我们都太微不足道了。
但科比的生前的足够绽放，也足够的尽兴。他也会像乔布斯，迈克尔杰克逊，弗雷迪，黄家驹一样，一直活在我们的记忆中。
Forever Legend, Forever Mamba。 Goodbye,Kobe.</description>
    </item>
    
    <item>
      <title>2019年观影记录</title>
      <link>/posts/2019-movies-list/</link>
      <pubDate>Sat, 04 Jan 2020 20:38:42 +0000</pubDate>
      
      <guid>/posts/2019-movies-list/</guid>
      <description>波西米亚狂想曲 (2018)
Queen的音乐真的极具感染力，相比电影最后高度还原Freddie在&amp;quot;live aid”上的场景，个人还是更喜欢那个真实的live concert。评分9.0
好莱坞往事 (2019)
昆汀的电影自有他的风格，电影前半部分的确会让没有耐心的人会放弃观看。好在最后半小时足够精彩，皮特投手对付嬉皮客有杀死比尔的影子。在观看了电影的真实背景事件之后，小李子对 Sharon说的那一句“Are you ok？”真的是让人非常非常感动。昆汀真是一个外表粗糙，内心细腻温柔的人，或许这句“Are you ok？“是昆汀相对在天堂的Sharon说的。评分9.0
罗马 (2018)
属于新浪潮电影吧，电影展开就像白开水一样，平平淡淡，但却暗涌着人生百味，是一部关于生活的电影。评分9.0
82年生的金智英 (2019)
韩国女权主义电影，讲述了现代女性在面对传统男权社会个人发展和家庭之间的冲突。电影以happy ending结尾，但现实社会冲突依然存在。评分8.5
寄生虫 (2019)
一部有点深刻，有点悲观的电影。评分8.0
爱尔兰人 (2019)
2019年的一部“老电影”，电影节奏舒缓，老式的黑帮片。观影后不得不感叹纵使CG技术再牛逼，德尼罗和帕西诺肢体语言的衰老感缺无法掩饰。评分8.5。
末代皇帝 (1987)
讲述末代皇帝溥仪的一生的故事，全片英文配音，镜头内容非常中国。开头慈禧去世和小皇帝登记两个场景，拍的非常东方，非常皇权，很有意思。评分9.0
大红灯笼高高挂 (1991)
一部讲述中国封建社会女性饱受束缚的故事。其中敲脚这个桥段让人映像深刻，性暗示十足，甚至我觉得导演是把这个敲脚作为一种性前戏来处理。张导演以前的电影还是很值得看的。评分8.5
绿皮书 (2018)
讲述美国种族歧视的故事，片中为观众展示美国南方各种各样让人不可思议的针对黑人的歧视法律。再一次说明星条国不是象牙塔，大家不过都是屁股决定脑袋的生物罢了。评分8.5
巴斯特·斯克鲁格斯的歌谣 (2018)
西部片，来自科恩兄弟。讲述了几个离奇的西部故事。个人比较喜欢西部片，也比较喜欢科恩兄弟作品。评分8.5
无主之作 (2018)
讲述当代艺术家Barnert如何一步一步找寻自我的故事。影片中有对当代艺术的戏谑。挺好看的故事，评分8.0
猎凶风河谷 (2017)
西部片风格，故事发生地点在美国中西部印第安保留地，情节相对简单，氛围渲染很棒，冷且压抑。评分8.0
边境杀手 (2015)
西部片风格，故事发生在美墨边境，情节相对简单，整体一般。评分7.0
骡子 (2018)
90岁的伊斯特伍德自导自演的一部老年毒贩片，电影情节很稳重的推进，观影体验良好。评分 8.0
登月第一人 (2018)
影片让我们有机会了解阿姆斯特朗的人物性格，和他身上的故事。让我惊讶的是登月计划过程中发生了那么多意外，牺牲了那么多的宇航员。当阿姆斯特朗乘坐的火箭升空时，个人还是会被这种宏大的事件感动。评分8.0
此房是我造 (2018)
疯狂的杀人狂，疯狂的强迫症。影片比较压抑，评分7.5
小丑 (2019)
大家都会谈的电影，影片中主角的笑声让我产生生理上的不适（这种不适和装修时电钻声差不多），整体个人觉得一般，评分7.0
副总统 (2018)
一部关于美国历史上最有权势的副总统迪克·切尼，只能说星条国也不是象牙塔，坏人哪儿都有。贝尔演技好评，评分7.5
小偷家族 (2018)
不是我最喜欢的是枝裕和的电影，但也还不错吧。也许是因为我是抱着被治愈的目的去看是枝裕和电影。评分8.0
阿弥陀堂讯息 (2002)
很治愈的一部日本电影，电影里的恬静小镇是个让忙碌的都市人向往的世外桃源。电影女主角医生在都市生活落下的焦虑症也许是每个你我这样的上班族或多或少都体验过的吧。</description>
    </item>
    
    <item>
      <title>活到31</title>
      <link>/posts/31/</link>
      <pubDate>Wed, 20 Nov 2019 00:05:53 +0000</pubDate>
      
      <guid>/posts/31/</guid>
      <description>你所想要的那样东西，你的欲望对象本身他在结构上必然将使你更痛苦。你对他的追求不会滋养你的生命，反而会阻碍你的生命。 - Lauren Berlan
也许是自己没有以前那么sensitive了，也许是因为工作过于忙碌。从计划写这篇文章到现在为止，已经过去了一个半月了，每每打开文档编辑器，脑子里面一片空白，发现自己没有什么值得写的。
11年大学毕业前后，我分别看了Steve Jobs在斯坦福关于follow your heart主题的演讲，和另外一片讲年轻人该如何去寻找自己目标的文章。现如今8年过去了，文中方法我尝试过，也试图得出了一些关于自己目标的关键词。但现在看来，那些词都太抽象，不具体，以至于在写下那些关键字的第二天就忘记自己写过啥了，但这8年中，自己是一直在努力尝试着去找出自己最想做的事情，最想成为的人。只是能想清楚这件事并不容易，我至今还没想清楚。
而乔布斯演讲中那一句“your time is limited”却始终在我脑子里打转。时间，是每个人的原始财富。工人拿时间换工钱，学生拿时间换知识，父母拿时间养育下一代，换取基因的繁殖。我们每个人拥有着时间这一原始财富，然后在社会影响和自我意识决定下拿时间去换取自己想要的东西。
而现如今，我们很容易被生活带入一个循环，然后就此习惯了这种循环。每天上班，下班，打卡，开会，看电影，吃火锅，跑步，打游戏，今天重复昨天，这周重复着上周；我甚至说不出来17年，18年，19年，三年有何不同。现代社会让工作，生活，消遣占住我们所有的精力，让我们的眼睛从早上起床睁开到晚上睡觉闭上，一刻都不得闲，各式各样的垃圾信息刺激着你的脑神经。
工作生活在不停的重复着重复，个人的时间年轮也越滚越粗。随之而来有体力的下降，创造力的下降，还有对生活的敏感度的下降。你不在是一个敏感的人，不会为了一点小事而伤感，也不会因为一点压力而睡不着觉。你变得tough，甚至麻木，就像一台工作机器，接受一个又一个任务，然后机械的去完成它。但 your time is limited, 时间是有限的，每件事情都有他的窗口期，感情是这样，工作中的某个机会是这样，理想也是这样。20岁年薪百万和30岁年薪百万，感受肯定差异很大，不同的年纪相同的事物体验差别很大，我们能做的就是在尽可能年轻的时候去体验尽可能多的事情。
人到31，还在谈理想是有点尴尬，况且有时候会觉得日子不是只给自己过了。父母年纪大了，自己也该成家立业了，而工作更是不敢怠慢。
西方人思考人生角度是更多的考虑自己，而我们不行，即使我受了很多西方文化影响，纵然我个人很多时候是思考「我」该怎么做，但我们父辈不是，身边的人不是，我们生活的这个社会在道德要求你需要去从家庭，从父母的角度思考问题，你有你的历史任务。而作为一个年到31，还没成家的，在上海工作的一线程序员，如何在感情，事业，生活三者中得到平衡，从中获得幸福感，看起来是接下来数年我要寻找的答案。</description>
    </item>
    
    <item>
      <title>逻辑回归</title>
      <link>/posts/logistic-regression/</link>
      <pubDate>Sun, 31 Mar 2019 14:41:59 +0000</pubDate>
      
      <guid>/posts/logistic-regression/</guid>
      <description>逻辑回归是二分类任务中最常用的机器学习算法之一。它的设计思路简单，易于实现，可以用作性能基准，且在很多任务中都表现良好。
本文从以下几个方面讲述逻辑回归：
什么是逻辑回归？ 它是如何工作的。 逻辑回归 vs 线性回归 优缺点 何时适用 多分类任务（OvA, OvO） 其他分类算法 总结 什么是逻辑回归 和很多其他机器学习算法一样，逻辑回归也是从统计学中借鉴过来的，尽管名字里有回归两个字，但它不是一个需要预测连续结果的回归算法。与之相反，逻辑回归是二分类任务的首选方法。它输出一个0到1之间的离散尔值结果。简单来讲，它的结果不是0就是。
癌症检测算法可看做是逻辑回归问题的一个简单例子，这种算法输入病理图片并且应该辨别患者患有癌症（1）或没有癌症（0）。
它是如何工作的？ 逻辑回归通过使用其固有的逻辑函数估计概率，来衡量因变量（目标预测标签）与一个或者多个自变量（特征）之间的关系。 然后这些概率必须二值化才能真的进行预测。这就是逻辑函数的任务，也称为sigmoid函数。sigmoid函数是一个S形曲线，它可以将任意实数值映射到介于0和1之间的值，但不能取0或1.然后使用阈值分类器将0和1之间的值转换为0或1. 下图说明了逻辑回归得出预测所需的所有步骤。 假设函数 （Hypothesis function） 逻辑回归的假设函数形式如下： 这个函数称为sigmoid函数，也称为逻辑函数，其函数曲线如下： 从上图可以看到sigmoid函数是一个s形的曲线，它的取值在[0,1]之间，在远离0的地方函数的值会很快接近0/1.这个性质使我们能够以概率的方式来解释。 一个机器学习的模型，实际上就是把决策函数限定在某一组条件下，这组限定条件就决定了模型的假设空间。当然，我们还希望这组限定条件简单而合理。而逻辑回归模型所做的假设是： 这里的g(h)是上面提到的sigmoid函数，相应的决策函数是： 选择0.5作为阈值是一个一般的做法，实际应用时特定情况可以选择不同阈值。
决策边界（Decision Boundary） 决策边界，也称为决策面，是用于在N维空间，将不同类别样本分开的平面或曲面。 线性决策边界： 决策边界： -3 + x1 +x2 = 0
非线性决策边界 决策边界： -1 + x1^2 +x2^2 = 0
决策边界其实是一个方程，在逻辑回归中，决策边界由theta&amp;rsquo; X=0定义。 假设函数（h=g(z)）用于计算样本属于某种类别的可能性；决策函数(h=1(g(z)&amp;gt;0.5))用于计算样本的类别；决策边界（θ^Tx=0）是一个方程，用于标识出分类函数（模型）的分类边界。
代价函数（Cost Function） 逻辑回归中，采用如下的形式计算样本的代价值：
整合一下，得到逻辑回归中的代价函数：
优化方法 在逻辑回归中，使用梯度下降法对代价函数进行优化，完整形式如下： 注意： 逻辑回归和线性回归问题中，梯度下降算法的形式看上去一致，但实际上两者完全不同，因为假设函数是不同的，需要特别注意这一点。
其向量化实现（vectorized implementation）如下： 逻辑回归 vs 线性回归 逻辑回归得到一个离散的结果，线性回归得到一个连续的结果。预测房价的模型返回连续结果，是线性回归。癌症检测的结果是你有癌症或没有，是逻辑回归。
优缺点 逻辑回归是一种被人们广泛使用的算法，它非常高效，不需要太大的计算量，又通俗易懂，不需要缩放输入特征，不需要任何调整，且容易调整，并且输出校准好的预测概率。与线性回归一样，当你去掉和输出变量无关的属性以及相似度高的属性时，逻辑回归效果确实会更好。因此特征处理在逻辑回归和线性回归的性能方面起着重要的作用。
逻辑回归的另一个优点是它非常容易实现，且训练起来很高效。 它的一个缺点就是我们不能用逻辑回归来解决非线性问题，因为它的决策边界是线性的。</description>
    </item>
    
    <item>
      <title>机器学习基础知识：熵，交叉熵，相对熵</title>
      <link>/posts/entropy/</link>
      <pubDate>Sat, 02 Mar 2019 16:02:21 +0000</pubDate>
      
      <guid>/posts/entropy/</guid>
      <description>简介 信息熵是随机数据源产生信息的均量。信息熵代表的是随机变量或整个系统的不确定性，熵越大，随机变量或系统的不确定性就越大。
计算 一枚正常硬币进行若干次抛投，这个事件的熵是1bit，因为结果不外乎两个 - 正面或反面，可以表示为0，1编码，而且两个结果彼此之间相互独立。但如果一枚硬币的两面完全相同，那抛硬币事件的熵为零，因为结果能被准确预测。
定义 信息熵的数学公式如下：
其中 P 为X的概率质量函数，E为期望函数，而I(x)是X的信息量。I(X)本身是个随机变数。当取自有限样本时，熵的公式可以表示为：
所以熵的本质是香农信息量 log(1/p)的期望；一个事件结果的出现概率越低，对其编码的bit长度就越长。以期望在整个随机事件的无数次重复试验中，用最少的bit去记录整个实验历史，即无法压缩的表达，代表了真正的信息量。
交叉熵 一个系统有一个真实的概率分布，也叫真实分布，根据真实分布，我们能够找到一个最优策略，以最小的代价消除系统的不确定性，而这个代价大小就是信息熵。
多数情况下，我们并不知道系统的真实分布，如抛硬币例子，如果硬币两面一样，但我们不知道这一信息，以为两面不一样，两面不一样是一个非真实分布。交叉熵，是用来衡量在给定的真实分布下，使用非真实分布所指定的策略消除系统的不确定性所需要付出的努力大小。
交叉熵的公式为：
其中p为真实分布，q为非真实分布。交叉熵越低，意味着q越接近p。所以在机器学习分类算法中，我们总是最小化交叉熵，交叉熵越低，间接证明算法推算出的非真实分布q越接近真实分布p。
深度学习中交叉熵损失函数[Cross Entropy Loss]；
相对熵（KL散度） 相对熵又称KL散度，是为了衡量不同策略之间的差异，即：
假设f(x)为真实分布p，g(x)为非真实分布q，则上述相对熵为：</description>
    </item>
    
    <item>
      <title>2018年度总结</title>
      <link>/posts/2018-summary/</link>
      <pubDate>Sun, 20 Jan 2019 20:09:46 +0000</pubDate>
      
      <guid>/posts/2018-summary/</guid>
      <description> 文娱 电影 中国 一一 - ⭐️⭐️⭐️⭐️⭐️ 红海行动 - ⭐️⭐️⭐️⭐️ 影 - ⭐️⭐️⭐️ 无双 - ⭐️⭐️⭐️ 我不是药神 - ⭐️⭐️⭐️ 好莱坞 蜘蛛侠-平行宇宙 - ⭐️⭐️⭐️⭐️ 杰出公民 - ⭐️⭐️⭐️⭐️ 碟中谍6：全面瓦解 - ⭐️⭐️⭐️⭐️ 奇迹男孩 - ⭐️⭐️⭐️ 头号玩家 - ⭐️⭐️⭐️ 海王 - ⭐️⭐️⭐️ 寂静之地 - ⭐️⭐️⭐️ 第六感生死缘 - ⭐️⭐️⭐️ 美国丽人 - ⭐️⭐️⭐️ 古墓丽影：源起之战 - ⭐️⭐️ 黑豹 - ⭐️⭐️ 复仇者联盟3 - ⭐️⭐️ 蚁人2 - ⭐️ 金刚-骷髅岛 - ⭐️ 日本 无人知晓 - ⭐️⭐️⭐️ 其他 看不见的客人 - ⭐️⭐️⭐️⭐️ 斯大林之死 - ⭐️⭐️⭐️⭐️ 一个叫欧维的男人决定去死 - ⭐️⭐️⭐️⭐️ 恐怖直播 - ⭐️⭐️⭐️⭐️ 艾尔酒吧 - ⭐️⭐️⭐️ 普通女人 - ⭐️⭐️⭐️ 燃烧 - ⭐️⭐️⭐️ 厕所英雄 - ⭐️⭐️ 美剧-英剧-日剧-纪录片 辛普森：美国制造 - ⭐️⭐️⭐️⭐️⭐️ Ugly Delicious - ⭐️⭐️⭐️⭐️⭐️ 风骚律师 - 第四季 - ⭐️⭐️⭐️⭐️ 毒枭：墨西哥 - ⭐️⭐️⭐️⭐️ 梅尔罗斯 - ⭐️⭐️⭐️⭐️ 硅谷第五季 - ⭐️⭐️⭐️⭐️ 非自然死亡 - ⭐️⭐️⭐️⭐️ 西部世界第二季 - ⭐️⭐️⭐️ 保镖 - ⭐️⭐️⭐️ 利器 - ⭐️⭐️⭐️ 杀死伊芙 - ⭐️⭐️⭐️ 了不起的麦瑟尔夫人 - ⭐️⭐️⭐️ 9号秘事第四季 - ⭐️⭐️⭐️ 音乐 Kendrick Lamar 书籍 那不勒斯四部曲（1）- 我的天才女友 - ⭐️⭐️⭐️⭐️⭐️ 那不勒斯四部曲（2）- 新名字的故事 - ⭐️⭐️⭐️⭐️ 那不勒斯四部曲（3）- 离开的，留下的 - ⭐️⭐️⭐️⭐️ 那不勒斯四部曲（4）- 失踪的孩子 - ⭐️⭐️⭐️⭐️ 失明症漫记 - ⭐️⭐️⭐️⭐️ 我是个年轻人，我心情不太好- ⭐️⭐️⭐️ 富士山禁恋- ⭐️⭐️⭐️ Podcast 灭茶苦茶 文化土豆 硅谷早知道 Blow Your Mind The Dave Chang Show 996 Podcast by GGV 体育 2018年世界杯 1/8 决赛：法国-阿根廷 17-18 NBA季后赛 西部决赛 - 金州勇士-休斯顿火箭队 工作 年度编程语言 - Python 年度技术点 - DeepLearning 年度App - 微信读书，网易有钱 年度工具 - PyCharm Ce 年度硬件 - AirPods，15寸mbp 年度公开课 - 3blue1brow, 李宏毅机器学习课程 </description>
    </item>
    
    <item>
      <title>全卷积网络-语义分割的简介</title>
      <link>/posts/review-fcn/</link>
      <pubDate>Sun, 18 Nov 2018 22:00:21 +0000</pubDate>
      
      <guid>/posts/review-fcn/</guid>
      <description> 这是一篇译文，原文Review: FCN (Semantic Segmentation))
本文主要记录用于语义分割的全卷积网络。和分类，检测任务相比，分割是更难的一种任务。
图片分类：对图像进行分类 物体检测：检测一张图片中存在的物体，并给出物体的区域。 分割：为图像中的每个像素分类。 一个语义分割的例子：
该论文发表于 2015 CVPR，现在有 6000 次引用。它也是使用FCN进行语义分割的最基础的论文之一。
本文包括 从图像分类到语义分割 利用反卷积进行上采样 融合输出 结论 1.从图像分类到语义分割 传统意义上的分类任务，输入图像会缩小尺寸，并通过卷积层和全连接层，最终输出关于输入图片的标签，如下图：
想象我们把上图中的全连接层替换成 1X1 卷积层：
如果图像没有缩小尺寸，输出将不是单个标签。相反，输出的大小小于输入图像（由于最大池化层）
如果我们对上面的输出进行上采样，那么我们逐像素输出标签贴图，如下所示：
2.利用反卷积进行上采样 卷积是一个使输出尺寸变小的过程。反卷积就是一上采样，使得输出尺寸变大的过程（但不要把反卷积曲解成卷积的逆向操作），反卷积也被称为上卷积和转置卷积。当使用分数步幅时，也被称为分数步幅卷积。
3.融合输出 经过如下图所示的conv7后，输出尺寸很小，然后进行32X 上采样，得到和输入同样大小的输出。但也会把输出标签变得很糙。这个叫 FCN-32s:
这是因为在网络变深的时候能够获得深层次的特征，但如此同时空间位置信息也会丢失。这意味着浅网络可以获得更多的位置信息。如果我们把两种网络合并在一起，我们可以平衡结果。
为了组合，我们融合输出（通过元素添加）：
**FCN-16s:**的输出是把pool5的输出2倍上采样和pool4融合并进行16次上采样。**FCN-8s:**操作如上图所示，也是类似。
FCN-32s由于位置信息丢失结果非常粗糙，而FCN-8s的结果最好。
这种融合操作实际上就像AlexNet,VGGNet和GoogleNet中使用的增强/整合技术一样，它们通过多个模型结果的叠加，使预测更准确。但在这个任务中，它是针对每个像素去做的，并且它是拿模型中不同层的结果去叠加的。
4.结果 FCN-8s在Pascal VOC 2011数据集上效果最佳 FCN-16s在NYUDv2数据集上效果最佳 FCN-16s在SIFT数据集上效果最佳 第四行显示了一个失败案例：网络把船上的救生衣当作了人。
希望将来能够更多地阅读有关语义分割的深度学习技术。
References [2015 CVPR] [FCN] Fully Convolutional Networks for Semantic Segmentation [2017 TPAMI] [FCN] Fully Convolutional Networks for Semantic Segmentation </description>
    </item>
    
    <item>
      <title>超分FSRCNN的简介</title>
      <link>/posts/review-fsrcnn/</link>
      <pubDate>Tue, 06 Nov 2018 00:24:40 +0000</pubDate>
      
      <guid>/posts/review-fsrcnn/</guid>
      <description>这是一篇译文，原文Review:FSRCNN(Super Resolution)
本文主要用来概述一篇实时超分辨率的实现FSRCNN，全称Fast Super-Resolution Convolutional Neural Network，FSRCNN 发表于2016年的ECCV，目前为止有近300次的引用。 FSRCNN有着一个相对浅的网络结构，浅网络层让我们比较好理解每一个网络层的用途。与SRCNN相比，它重建后的图像质量更高。
对比SRCNN，FSRCNN-s(FSRCNN小模型版本)，FSRCNN-s 有着更好的PSNR（图像质量），更快的处理时长。 对比 SRCNN-Ex（SRCNN优质版本）和 FSRCNN，FSRCNN的结果PSNR更好，处理速度更快。 所以，来看下FSRCNN是如何达到质量和速度双优的
下文包含如下内容：
SRCNN 简述 FSRCNN 网络架构 如何利用 1x1 卷积对网络进行压缩和扩大 如何利用多个 3X3 卷积实现非线性映射 对比实验 结论 上图是 SRCNN 和 FSRCNN 的网络架构图。其中 Conv(f,n,c)表示该卷积： 卷积大小为fxf， 有n个过滤器以及c个输入通道。
1. SRCNN简述 SRCNN 的处理过程如下：
对输入图片利用双立方采样做上采样，使得其分辨率为目标分辨率 然后分别利用 9x9, 1x1, 5x5 的卷积来提高图片质量。其中 1x1 卷积是用来把低分辨率（LR）图像向量非线性映射为高分辨率 (HR) 图像向量. 计算复杂度为：
计算复杂度和HR图像大小成线性比例，SHR。HR图像越大，复杂度越高。
2. FSRCNN 网络结构 FSRCNN 包含如下五个主要处理步骤：
特征提取：利用一个 5x5 卷积代替 SRCNN 中的双立方差值 压缩：利用 1x1 卷积把特征层从 d 压缩为 s，其中 s 小于 d 非线性映射：多个 3x3 网络层代替单个的宽网络层 扩大： 1x1 卷积把特征层从 s 扩大为 d 反卷积： 利用 9x9 过滤器重建 HR 图像 以上结构就是 FSRCNN(d,s,m).</description>
    </item>
    
    <item>
      <title>活到30</title>
      <link>/posts/30/</link>
      <pubDate>Sun, 04 Nov 2018 20:08:40 +0000</pubDate>
      
      <guid>/posts/30/</guid>
      <description>有一天我做了一个恐怖的梦，梦见我32岁了。然后当我醒来，发现自己只有23岁，就放心了。但是后来我真的从梦里醒来，发现自己确实是32岁了。时间过得很快，20岁是人生的巅峰状态，从那以后我们就开始走下坡路了。 &amp;ndash; 电影《before the sunset》
少年时听长辈说某件事是10年之前发生的了，会觉得：“哇，10年啊，好久之前发生的事情啊”。如今才发现，10年之前发生的事情却仿佛就在眼前。08年的夏天，我刚上完大一，暑假没事在家里待着，每天守着电视看北京奥运会。电视里各种各样的奥运项目让人应接不暇，看着每个运动员健康矫捷美丽的身姿，我心想人应该活的如此健康快乐才是。
你发现每个你遇到的人，都尝试把环境变得更好，赚更多钱，赢得更多尊重，得到更多的赞赏，这真令人精疲力尽。 &amp;ndash; 电影《before the sunset》
11年从大学毕业之后，我便入了程序员这个行当；这是一个适合平民百姓，没啥背景出身的人干的行业。在这个行业只要你技术好，为人靠谱，可以靠着这门手艺安身立命。程序员工作中，和机器打交道多过和人打交道，这样想来我算是误打误撞入了一个和我性格挺搭的行业。 七年多的程序员生涯，我有过一些那种恍然大悟，让人分泌多巴胺的快乐时刻。
只是我最近在思考，程序员工作的意义到底在哪里？可能我所在的行业不是那种基建性质的系统软件开发，程序员在日常生活中，大多数时候做的事情只是担当老板，产品，运营同事们需求的实现者。当中除了如何实现有自己的主见之外，要实现什么完全是听别人的指挥。这听起来是一份没有honor的行当。不过有人会说，其实产品，运营，和其他各种各样形形色色的行业，多数时刻我们都是执行任务的角色。我们受制于人，每天按部就班，小心翼翼的处理事情，保证问题不要出在自己身上。工作的意义对于多数人来讲不过是需要把牛奶和面包放在自家的桌子上，喂养老人，孩子和自己。honor不重要，肚子饿比较重要。所以对饥饿的恐惧感，无形的督促我们每天早起晚归，拼命工作挣钱。
活在当下，我们好像生来就对所有的事情不满。一直想改善自己的状态，一个欲望达成后，下一个有自然浮现。&amp;ndash; 电影《before the sunset》
我对死亡最为恐惧是在七八岁的时候。那段日子，晚上关灯睡觉之后，我脑子都会想人要是死去之后，就什么都没有了。不管这世界如何精彩，天上的星星如何闪亮，宇宙如何变化，这一切都和一个死去的人没有一丁点关系。死去，意味着不存在了，你所有的思想，记忆，喜怒哀乐都不复存在了。每每想到此，我就特别的恐惧，恐惧那种不存在。这种恐惧，最近在早晨的梦里又出现了几次, 对不存在的无法接受又萦绕在脑中。不过也许人长大了，也就麻木了，洗漱之后，该上班上班，平日里嘈杂忙碌的生活会帮你忘却这种恐惧。
人到30，进入而立。有那么一瞬间，会觉得一切只能如此了，就按部就班的安稳地活着吧。只是希望自己在忙着挣钱，忙着处理各种各样生活工作中问题的时候，不要忘了Steve Jobs的这段话：
“Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma – which is living with the results of other people’s thinking. Don’t let the noise of other’s opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition.</description>
    </item>
    
    <item>
      <title>音频编解码以及音乐GPU实时可视化效果实现</title>
      <link>/posts/audio/</link>
      <pubDate>Sat, 16 Jun 2018 10:58:22 +0000</pubDate>
      
      <guid>/posts/audio/</guid>
      <description>前言 在一些音乐播放器上（如上学时候用的播放器千千静听）会有一排 直方图 随着音乐节奏忽高忽低的跳动。你会好奇这个直方图的跳动是随着音乐的什么属性来做变换的，貌似有时候和音乐的节奏还挺搭的。要解释清楚这个问题，首先得了解什么声音，以及声音的原理。
声音 声音的原理 根据维基百科上所述：声音是一种波动；当演奏乐器、人说话或者敲击桌面时，声音的振动会引起介质——空气分子有节奏的振动，使周围的空气产生疏密变化，形成疏密相间的纵波，这就产生了声波，这种现象会一直延续到振动消失为止。
声音作为波的一种，频率和振幅就成了描述波的重要属性，频率的大小与我们通常所说的音高对应，而振幅影响声音的大小。声音可以被分解为不同频率不同强度的正弦波的叠加。这种变换（或分解）的过程，称为傅立叶变换(Fourier Transform)。
所以到这里，我们大致明白了音乐播放器上面的直方图其实是声音的频率和振幅的统计图。
声音的特性 响度（loudness）：人主观上感觉声音的大小（俗称音量），由“振幅”（amplitude）和人离声源的距离决定，振幅越大响度越大，人和声源的距离越小，响度越大。（单位：分贝dB） 音调（pitch）：声音的高低（高音、低音），由“频率”（frequency）决定，频率越高音调越高（频率单位Hz（hertz），赫兹)，人耳听觉范围 20～20k Hz。20Hz以下称为次声波，20k Hz以上称为超声波）例如，低音端的声音或更高的声音，如细弦声。频率是每秒经过给定点的声波数量，它的测量单位为赫兹。1000Hz表示每秒经过给定点的声波有1000个周期 音色（Timbre）：又称音品，波形决定了声音的音色。声音因不同物体材料的特性而具有不同特性，音色本身是一种抽象的东西，但波形是把这个抽象直观的表现。音色不同，波形则不同。典型的音色波形有方波，锯齿波，正弦波，脉冲波等。不同的音色，通过波形，完全可以分辨的。 乐音：有规则的让人愉悦的声音。噪音：从物理学的角度看，由发声体作无规则振动时发出的声音； 音频编解码 音频的编解码器需要分成硬件，软件两个部分讨论。硬件部分，音频编码器芯片（ADC）会把接收到的声波转换成PCM数据, 由于PCM占用存储资源太大，不利于传输和存储，所以需要利用音频编解码器软件对PCM数据进行压缩，得到如 FLAC/MP3/OGG 的音频文件。当我们播放一段数字音频文件的时候，则需要先进行软解码，也就是对压缩过的音频文件（FLAC/MP3/OGG）先解码成PCM，然后传送解码后的PCM给音频解码器（DAC），解码器将数字信号转换为模拟信号。
音频硬编码过程 信号的数字化就是将连续的模拟信号转换成离散的数字信号， 一般需要完成采样、量化和编码三个步骤,如下图所示。
采样是指用每隔一定时间间隔的信号样本值序列来代替原来在时间上连续的信号。 量化是用有限个幅度近似表示原来在时间上连续变化的幅度值，把模拟信号的连续幅度变为有限数量，有一定时间间隔的离散值。 编码则是按照一定的规律，把量化后的离散值用二进制数码表示。 上诉数字化过程称为脉冲编码调制（Pulse Code Modulation，缩写PCM）
PCM 的码率 采样率值 × 采样大小值 × 声道数 bps = 码率 例如: 一个采样率为44.1KHz，采样大小为16bit，双声道的PCM编码的WAV文件，它的数据速率则为 44.1K×16×2 =1411.2 Kbps。这表示存储一秒钟采样率为44.1KHz，采样大小为16bit，双声道的PCM编码的音频信号，需要176.4KB的空间，1分钟则约为10.34M MP3 MP3全称是MPEG-1orMPEG-2 Audio Layer III，它被设计来大幅降低音频数据量，它舍弃PCM音讯资料中，对人类听觉不重要的资料，从而达到了压缩成较小的档案。而对于大多数用户的听觉感受来说，MP3的音质与最初的不压缩音频相比没有明显的下降。
音频处理 音频傅立叶变换 了解了声音和音频编解码的基础知识之后，我们可以开始对音频进行相关应用处理了。那如何处理音频呢？首先用Audacity软件打开一段音频，会看到如下图所示的波形图。你会想，这乱糟糟，看起来没啥规律可循的波形的该如何处理。
就像我们处理图片的时候，会把像素点颜色分解成RGB三个通道（或者YCbCr,Lab 等其他颜色空间）进行处理一样，在处理音频的时候，我们需要对音频的波形进行分解。根据声音的特性，不同物体发出的声音频率范围是不一样的，如下图是不同乐器的频率范围：
所以我们可以把音频从时域转换到频域，然后对分解出来的各个频率进行操作。这里需要借助傅立叶变换完成音频从时域到频域的转换。
看不懂傅立叶变换的数学公式也没有关系，只要记住下面这张图就好。
如上图，对左边红色的音频时域声波进行傅立叶变换之后，分解成了一系列正弦波。而右边蓝色部分是针对分解的一系列正弦波的统计图，其中横轴是频率，纵轴是振幅。有了这张频谱图，我们可以很方便的处理音频了（如消除某一段频率等等）。
Demo 有了上面对音频做傅立叶变换后的频率数组，我们可以开始去实现一个音乐实时可视化Demo了。考虑到性能，以及跨平台，我们利用GPU搭配OpenGL编程去实现Demo。实现步骤如下图所示：
获取PCM数据 在iOS上，利用AVFoundation中的AVAudioEngine获取音乐的pcmbuffer，然后利用Accelerate framework中提供的DSP信号处理api，对pcmbuffer进行傅立叶变换。
加载音乐 NSString * audioPath = [[NSBundle mainBundle] pathForResource: @&amp;quot;bgm&amp;quot; ofType: @&amp;quot;.</description>
    </item>
    
    <item>
      <title>失败者才设定目标</title>
      <link>/posts/goals-are-for-losers/</link>
      <pubDate>Wed, 03 Jan 2018 19:31:06 +0000</pubDate>
      
      <guid>/posts/goals-are-for-losers/</guid>
      <description>Learn OpenCV 因为工作需要，我订阅了 Learn OpenCV 的邮件。Learn OpenCV 可以简单描述成是一个教学OpenCV的网站，网站的作者是 Satya Mallick,美国加州大学圣迭戈分校的博士，主要研究计算机视觉。网站上面的教程每个都是从原理和基础知识开始讲解，配合工程实现，直至最终完成Demo。每篇Blog都会配有c++和python 两个版本的source code，是个非常不错的学习OpenCV的网站。17年下半年开始，网站上也开始教学机器学习，深度学习相关的知识，同样保持了一贯浅显易懂的特点。
Goals are for losers 最近 Learn OpenCV 发送了一份邮件，标题叫Goals are for losers，直译成中文是目标是为失败者设定的。看起来很标题党的感觉，在我们的认知中，设定目标为了帮助我们把梦想实现，任务完成，是通往更好的自己的必经之路，怎么会是为失败者定制的了。
以下是对Goals are for losers这份邮件的翻译：
随着新年的到来，给新的一年设置目标看起来是一件很美妙的事。但如果你想完成某件事，而你只是设定了一个目标，那你大概率会失败。
假设你今年的目标是完全掌握计算机视觉中某个领域的全部知识。那得等到2018年结束的时候你才会知道你的目标是否完成了。如果你没完成目标，在2018年结束的时候，对这个结果，除了叹息接受，你无能为力。
目标是一个滞后的衡量标准, 你需要一个主导衡量标准
什么是主导衡量标准？主导衡量标准指的是能提前告知你每天是否接近目标。像“每天花两小时学习计算机视觉”就是一个主导衡量标准。
为了始终如一地执行主导措施，我们需要的是制定计划。我们的计划可以制定成早上5点到7点学习计算机视觉（美国人民这么拼？？？）。如果某天你没有完成计划，意味着你需要在那个周末加班把时间补起来。在制定计划的时候，我们需要明确定义在什么时间点做什么事情（计划的可执行也很重要，一个无法执行的计划也是没有意义的）。每天花一点时间这种计划是不会起作用的。
坚持执行计划，目标自然会达成，否则目标就是幻想。
我非常同意上述的观点，一定要为设定的目标制定详细的执行计划，然后按照计划一丝不苟的完成，这样目标才能达成。想来惭愧，我在17年6月份花了 ¥2000.00 参加了FaceAI的课程，但因为没有具体的计划，也缺少明确的目标，导致我购买的这个课程一点知识都没有学习到。
以上。</description>
    </item>
    
    <item>
      <title>我的2017</title>
      <link>/posts/my-2017/</link>
      <pubDate>Sun, 03 Dec 2017 12:58:39 +0000</pubDate>
      
      <guid>/posts/my-2017/</guid>
      <description>2017年还剩一个月，这一年马上就要走完。年初的计划如果此时还没有开始做，想必也来不及在2017去完成了。所以在12月的开头，总结一下这一年发生的事情，想想其实也不算太早。
Life is Short “时间真的过得太快了“，是人们在年尾回顾一年所作所为时最常感叹的一句陈词滥调。其实，每个人都知道时间流逝，人生苦短。不过仔细想想，当我们在抱怨时间过得太快的时候，是真的在抱怨时间流逝嘛？还是在为自己这一年来碌碌无为，浑浑噩噩所苦恼？Paul Graham在他的博客里提出一个很有意思的假设： 假如我们人类的寿命是现在的10倍，那我们还会感叹人生苦短么？这个假设目前无从验证，但如果感叹人生苦短的本质是苦恼于自己的碌碌无为，那我们应该还是会感叹时间飞逝，即便我们能活800年。
一个可以稍微减轻life is short的解法是不要等待，想到了就去做。诸如明天再进行体育锻炼，下个礼拜再给父母打电话，下个月再开始学习新技术，明年再思考自己到底想做什么等等这些需要以后再去做的事情，最好能当下处理掉。我们不应该感叹于时光飞逝，自己却什么都没做；而应该满足于逝去的时间我都在做我想做，喜欢做的事情上。感叹于物理现象是没有意义的。
出行 2017年我去了美国和澳大利亚。年初的时候是没计划今年会去澳大利亚和美国。去澳大利亚是在五月份，主要目的是旅游。那次出行，我们住在墨尔本城市里面，主要是在维多利亚州活动。维多利亚州到处都是平坦辽阔的草原，上面牛羊成群，真的是一块完美的畜牧地。旅行中见到了小企鹅，树懒，美丽的澳洲风光，可就是没看到袋鼠。墨尔本这座城市也让人很喜欢，虽说澳洲是个移民国家，没什么历史，但墨尔本给人感觉是一座很有历史感的城市。它不是很大，但很美，还有一种莫名其妙的不知道从哪里来的亲切感。在城市广场附近，我远远的看到了澳网球场，作为一个德约科维奇的球迷，没能参观他最为成功的一块球场，略微有点遗憾。相比于墨尔本，黄金海岸给我的感觉是个典型的旅游海岛型城市，坐直升飞机俯览整个黄金海岸，真的很美。行程中，我不止一次的羡慕这块土地的人们，他们的地理环境比起我们中国真的好太多。
去美国是在8月下旬的时候，原因是公司和苹果合作参与iPhone X的新特性封闭开发。凭借着自己三脚猫的英语口语，过了美国海关，搭上出租车来到圣何塞的库比蒂诺和同事汇合。硅谷整体给人的观感是一个大农村，公共交通设施很差，物价很高。天气也比较干旱，一开始会不太喜欢那里的天气，但呆久了就觉得还挺好。硅谷的建筑都不高，一般都是四五层楼，不像国内的办公楼动辄二三十层。那是段很有意思的经历。
一些推荐 ###书 17年还是读了一些蛮有意思的书，其中人物传记比较多，有
《鞋狗》 《硅谷钢铁侠：埃隆马斯克的冒险人生》 《成为乔布斯》 《曾国藩家书》 《毛泽东传》 其他的书
《死之枝》 《独裁者手册》 《拆掉思维里的墙-原来我还可以这样活》 《平凡的世界》 播客 播客听的比较多是跟李如一先生或多或少有关系的一些博客, 推荐的有：《一天世界》，《灭茶苦茶》，《博物志》，《硬影像》，《太医来了》，《声东击西》，《迟早更新》，《简单心理》
影视 电影《赴汤蹈火》，《爱乐之城》不错；美剧《Better Call Saul》，《Mr. Robot》，《GOT》都不错。
以上。</description>
    </item>
    
    <item>
      <title>活到29</title>
      <link>/posts/29/</link>
      <pubDate>Sun, 29 Oct 2017 22:56:05 +0000</pubDate>
      
      <guid>/posts/29/</guid>
      <description>“婚姻是一座围城，城外的人想进去，城里的人想出来.” &amp;ndash; 钱钟书 《围城》
我还没有结婚，所以也无从体验婚姻是否真如钱先生所说的那样，是一座围城。倒是这世上许许多多的事情，还真如这句话所言，城外的人想进去，城里的人想出来。前阵子看到一篇文章，讲的是在美国硅谷生活工作的35岁左右男性面临的职业危机，或者说是两难吧。要么继续呆在美国，但职业天花板明摆在那里，生活也是一眼到头。选择回国，会有更具吸引力的薪资，权利，机会，但年轻的时候拼了命来美国是否又变得没有意义；而且老婆孩子还得继续留在美国，自己异地工作，没法照顾家庭，夫妻，父子关系会否变得浅薄起来。总之就是对现状无法感到满意，着急改变。这应该是一个很典型的围城思维。就像国内的程序员会觉得能去美国硅谷的大公司，如Google,Apple,Facebook工作才算是真正成功的程序员。不但可以肉身翻墙，赚取美金，还可以享受“民主与自由”。但身处美利坚的同志们可能也有自己的烦恼，比如如上文案例所讲的，事业发展有瓶颈，机会不如在国内多，父母亲留在国内，没法照顾，等诸如此类的。
的确，我们成长的过程中，总是在经历着各种各样的围城事件。去大城市打拼的人觉得工作生活压力太大，留在小城市安逸舒服，反之小城市的人觉得大城市繁华，机会多，挣钱多。搞计算机的觉得其他行当的人没这么累，其他行当的人觉得这几年搞计算机的人挣得多。呆在大公司上班的人觉得自己创业的人酷，什么都自己说的算，创业的人却在抱怨投资人像祖宗一样难搞，自己每天都在透支着自己的身体，还是留在大公司打一份工，省心。总之，诸如此类，不甚枚举。每个人在某个阶段都会有围城思维，我经历过，其他人肯定也经历过。
程序员对解决问题这件事情有着近乎偏执的爱好，行文到这里，该是到写如何破解围城思维的时候了。但有些事情就像今年奥斯卡最佳男主角所演的《海边的曼彻斯特》这部电影中表述的故事一样，注定是没有答案，无从解决的。围城就是在那里，每个人在生命的各个阶段都得面对自己的围城，是进去，还是出来，亦或是出来后再进去，只能全凭自己的判断。运气好的，生活继续，吃饱睡足，心满意足；运气不好的，只能怪自己为何出城，老实呆着不好嘛之类的。
活到二十九，而立之年。今年的生日过的分外没劲，可能日子就是这样，年纪越大越觉得过生日是一种折磨。时间流逝，所谓理想，爱好都会随之消散，到最后只剩下买房，结婚生子，赡养老人等社会责任让你继续上路，不至于垮掉。</description>
    </item>
    
    <item>
      <title>Learning OpenGL：光照</title>
      <link>/posts/opengl-lighting/</link>
      <pubDate>Wed, 04 Oct 2017 17:39:47 +0000</pubDate>
      
      <guid>/posts/opengl-lighting/</guid>
      <description>颜色 计算机如何表达现实世界中五彩滨纷的颜色？答案是用红，绿，蓝（缩写RGB）三个分量来数字化颜色。但我们在现实生活中看到某一物体的颜色并不是这个物体真正拥有的颜色，而是它反射的（Reflected）颜色。也就是说，那些不能被物体所吸收的颜色就是我们能够感知到的物体颜色。例如，太阳光能被看见的白光其实是由许多不同的颜色组合而成的。如果我们将白光照在一个红色的衣服上，这个红色的衣服会吸收白光中除了红色以外的所有子颜色，而不被吸收的红色光被反射到我们的眼中，让这件衣服看起来是红色的。
颜色反射的定律被直接运用到图形领域。当我们在OpenGL中创建一个光源时，我们希望给光源一个颜色。当我们把光源的颜色与物体的颜色值相乘，所得到的就是这个物体所反射的颜色。在OpenGL中，我们将两个颜色向量作分量相乘，结果就是最终的颜色向量了：
vec3 lightColor(1.0,1.0,1.0); vec3 clothingColor(0.0,0.5,0.0); vec3 result = lightColor * clothingColor; // (0.0, 0.5, 0.0); 我们定义物体的颜色为物体从一个光源反射各个颜色分量的大小.我们可以使用不同的光源颜色来让物体显现出意想不到的颜色。
##基础光照
现实世界的光照极其复杂，而且受诸多因素影响，计算机有限的计算能力无法模拟。因此在OpenGL的光照使用的是简化的模型，对现实的情况进行近似模拟。这些光照模型是基于我们对光的物理特性的理解。冯氏光照模型是其中一个模型，冯氏光照模型主要由3个分量组成：环境（Ambient），漫反射（Diffuse）和镜面（Specular）光照。如下图：
环境光照（Ambient Lighting）:在黑暗的情况下，现实世界通常也仍有一些光亮，所以物体几乎永远不会是完全黑暗的。为了模拟这个，我们会使用一个环境光照常量，它永远会给物体一些颜色。 漫反射光照（Diffuse Lighting）：模拟光源对物体的方向性影响。它是冯氏光照模型中视觉上最显著的分量。物体的莫一部分越是正对着光源，它就会越亮。 镜面光照（Specular Lighting）：模拟有光泽物体上面出现的亮点。镜面光照的颜色相比于物体的颜色会更倾向于光的颜色。 环境光照 我们使用一个很小的常量（光照）颜色，添加到物体片段的最终颜色中，如此即使场景中没有直接的光源也能看起来存在有些发散的光。
void main() { float ambientStrength = 0.1; vec3 ambient = ambientStrength * lightColor; vec3 result = ambient * objectColor; gl_fragColor = vec4(result, 1.0); } 漫反射光照 漫反射对物体产生显著的视觉影响。漫反射光照使物体上与光线方向越接近的片段能从光源处获得更多的亮度。
光源发出的光线落在物体的一个片段上，我们需要计算这个光线是以什么角度接触到这个片段的。为了测量光线和片段的角度，需用到一个叫做法向量（Normal Vector）的东西，它是垂直于片段表面的一个向量。点乘返回一个标量，我们可以用它计算光线对片段颜色的影响。不同片段朝向光源的方向不同，这些片段被照亮的情况也不同。所以，计算漫反射光照需要：
法向量：一个垂直于顶点表面的向量 定向的光线：作为光源的位置与片段的位置之间向量差的方向向量。 法向量 法向量是一个垂直于顶点表面的（单位）向量。由于顶点本身并没有表面，我们利用它周围的顶点来计算出这个顶点的表面。一个三角形的法线是一个长度为1并且垂直于这个三角形的向量。而顶点的法线，是包含该顶点的所有三角形的法线均值。
###漫反射光照 每个顶点有了法向量，但我们仍然需要光源额度位置向量和片段的位置向量。由于光源的位置是一个静态变量，故简单在片段着色器中声明为uniform：
uniform vec3 lightPos; 渲染的时候，设置lightPos就可以了。 最后，我们还需要片段的位置。我们会在世界空间中进行所有的光照计算，因此我们需要一个在世界空间中的顶点位置。我们可以通过把顶点位置属性乘以模型矩阵来把它变换到世界坐标系。如下：
varying vec3 fragPos; varying vec3 normal; void main() { gl_Position = projection * view * model * vec4(aPos, 1.</description>
    </item>
    
    <item>
      <title>读书笔记：《鞋狗》</title>
      <link>/posts/shoe-dog/</link>
      <pubDate>Sun, 06 Aug 2017 19:24:18 +0000</pubDate>
      
      <guid>/posts/shoe-dog/</guid>
      <description>人生不一定会赢，而我就是不想输。 &amp;ndash;菲尔·奈特
11-12赛季的英超，阿森纳客场对阵切尔西。范佩西在比赛中上演帽子戏法，帮助阿森纳5-3赢得比赛。那是个阳光明媚的秋日午后，破门之后，范佩西在斯坦福球场上振臂高呼，一时间场外球迷高呼其名，为其呐喊助威，就像欢呼得胜回朝的将军一般。那一刻，我想这是足球这项运动带给职业球员最大的吸引力吧，或许也是竞技体育带给运动员们最大的吸引力。以前我觉得可能就是我一个人这么幻想过，成为一个杰出的运动员，在赢得比赛的那个刹那，场下的千万观众为你欢呼呐喊；直到最近看了NIKE的创始人菲尔·奈特的亲笔自传《Shoe Dog: A Memoir by the Creator of Nike》，在书中的前几章我找到了一直以来关于运动内涵的最好描述。
以下是两段摘录：
球在半空时，双方拳击手感觉到一个回合结束的铃声即将敲响时，或是跑者靠近终点，观众集体站起来时，那些事情就处于某个我们所不清楚的地方。在决定胜负前最激动人心的半秒内，显然会产生一种愉悦感。我想要的就是那个，无论到底是什么，我就想让那种感觉充实我的人生，填满我每天的生活。
运动可以让人们感受不同的生活，参与到别人的胜利中去，甚至体验失败。运动达到高潮的时候，粉丝的精神与运动员的精神融合在一起，这种情感的集合和转移，神秘主义者称其为合一
对于体育的热爱是菲尔·奈特选择去销售运动鞋的初衷，自传中讲述了NIKE是如何一步一步从无到有，并最终上市的；从最开始代理日本鬼冢虎鞋子往美国销售，到研发NIKE鞋子，并打败当时的霸主Adidas。作者在书中没有对自己成功进行任何粉饰，而是把大量篇幅拿来讲述自己如何和银行家较量，和债主周旋，和供应商协调，以及和政府部门官僚的斗争。作者真实记录了一个企业的成长过程，像众人坦诚公司最初的发展是非常混乱，危险，没有章法的。每一天都挣扎在破产的边缘（现金流就是零售业的生死线）。作为公司的创始人，菲尔·奈特早期没有在商业上指导江山，没有各种方法论，他每天都在遇到各种各样的挑战，而他能做的就是坚持下去；当然光坚持也没用，作为创始人，奈特要做的且唯一能做的就是想尽一切办法去解决问题。过程你会发现，企业不是一个人能做起来的，奈特需要找来各种各样的人，组合起来一个战斗力十足的创始团队。团队中有人擅长开疆拓土，打开新的市场；有人擅长研发新的鞋子，树立技术堡垒；有人擅长和政府部门打交道，搞定华盛顿那帮家伙。总之一个好汉三个帮，要想做成一个企业，没有得力的帮手是不可能的。勇敢，敏锐，合作，极大的耐力，以及全身心的投入是我读完该书对菲尔·奈特的性格理解。
书的最后一章，是奈特关于企业，以及自己生活的一些感性描写和反思。
我想告诉大家要按下暂停键，花时间努力思考一下要如何度过一生，想要和谁一起度过剩余的40年。我会告诉20岁左右的青年不要为了一份工作，专业甚至职业而安定下来，一定要寻求内心的冲动。即使你不知道其中的含义，也要坚持追寻。如果你追随自己内心的冲动，将会更能忍受疲惫，每一次失望都会成为你的动力，需要攀登的高峰也会变得微不足道起来。
你会发现这段话和乔布斯那段著名的斯坦福大学的毕业演讲和其相似：
The only way to do great work is to love what you do. If you haven&amp;rsquo;t found it yet, keep looking.
追随内心的冲动是两位伟大企业家的共性所在。
以上！</description>
    </item>
    
    <item>
      <title>冈仁波齐</title>
      <link>/posts/kangrinboqe/</link>
      <pubDate>Sun, 02 Jul 2017 15:08:30 +0000</pubDate>
      
      <guid>/posts/kangrinboqe/</guid>
      <description>去看了电影《冈仁波齐》，一开始倒不是因为想了解这部电影所宣扬的藏族信仰是为何物，而是因为朴树的片尾曲《No Fear In My Heart》。想来从高一的时候接触到朴树，从听《Colorful Days》，《傲慢的上校》，《生如夏花》，到现在已然13年了。令人兴奋的是，朴树这两年回来了。
很难讲《冈仁波齐》一部好看的电影，她是一部很特别的电影，看完电影我会觉得还是很值得一看。整个电影给我最大的冲击瞬间是他们从村里出发朝圣去冈仁波齐的时候。看到影片中出现了拖拉机，我以为他们会坐着拖拉机一路开过去。但又觉得坐拖拉机不能算朝圣吧，那怎不能走着过去吧，那么远，而且在高原上，得走多久才能到。所以当他们卧倒开始磕头前行的时候，我被震住了，说不出话来。是啊，在这个出行飞机高铁，挣钱越快越好，什么都讲究利益的年代，你看到一行人，一路从家乡磕头2000多里去圣地，很难不被这种行为所震动。
大多数国人是无宗教信仰者，当然我也是。我不懂宗教，更不懂藏传佛教，可能我还是个没有信仰的人。电影中可以明显感受到宗教给藏民带来的影响，一个最直接的感受是，他们都好平静，好平静。朝圣路上，大家生活在一起，无论晴天雪天，每天磕头朝拜，孕妇生完小孩后，回到队伍继续朝圣之路；老人去世了，举行完葬礼，大家继续朝圣。好像没有什么事情能阻止他们，就好像没什么事情能打破他们的平静。孩子出生的喜悦，老人去世的悲伤，都很平静，没有我们红白喜事的那种热闹，嘈杂，笑声朗朗或哀嚎震天。
坦率的说，我不觉得他们的生活方式就是好的，但我很羡慕他们表现出来的那种平静和笃定，那种生活在现代社会的人，很难拥有的不慌不忙。</description>
    </item>
    
    <item>
      <title>Learning OpenGL：帧缓冲对象</title>
      <link>/posts/framebuffer-object-opengl/</link>
      <pubDate>Sun, 19 Mar 2017 14:20:09 +0000</pubDate>
      
      <guid>/posts/framebuffer-object-opengl/</guid>
      <description>背景 使用OpenGL渲染时，一般情况下我们使用的是默认的帧缓冲区（一般指的是 FrameBuffer Object Id 为 0）。但如果我们想实现一些后处理操作，如边缘检测，镜面，离屏渲染等，就需要我们自己创建自定义帧缓冲区，使用自定义帧缓冲区来进行后处理操作。
FBO 在OpenGL中，渲染管线中的顶点，纹理等经过一系列的处理之后，最终显示在2D屏幕设备上，渲染管线的最终目的地是帧缓冲区。OpenGL中使用到帧缓冲包括三个：颜色缓冲，深度缓冲，模版缓冲。系统自身会创建一个默认缓冲区，OpenGL允许我们手动创建自定义帧缓冲区，并将渲染结果重定向到这个缓冲区。
帧缓冲对象中包括两种类型的附加图像：纹理图像和RenderBuffer图像。附加纹理时，OpenGL渲染到这个纹理图像上，在着色器中可以访问这个纹理图像。附加RenderBuffer时，OpenGL执行离屏渲染（offscreen, rendering）。
帧缓冲对象可以附加多个缓冲区，且可灵活地在缓冲区中切换。帧缓冲对象中包含一个以上的颜色附加点，而深度和模版都只有一个附加点。如下图所示：
&amp;gt;注：OpenGL es 2.0 也只有一个颜色附加点 从上图可知，帧缓冲对象本身不包含任何缓冲对象，实际上是通过附加点指向实际的缓冲对象。
创建 FBO 创建和销毁FBO的步骤很简单：
void glGenFramebuffers(GLsizei n, GLuint * ids); void glDeleteFramebuffers(GLsizei n, const GLuint * ids); 将FBO绑定到目标对象：
void glBindFramebuffer(GLenum target, GLuint id) target分为三种类型：GL_FRAMEBUFFER-缓冲区用来进行读和写操作；GL_READ_FRAMEBUUFER&amp;ndash;缓冲区支持glReadPixels读操作；GL_DRAW_FRAMEBUFFER-缓冲区支持渲染，清除操作。 id 即为创建出来的帧缓冲id 通过绑定GL_FRAMEBUFFER,接下来所有的读和写操作都是在当前的帧缓冲上进行。
OpenGL要求，一个完整的FBO需要满足以下条件：
至少附加一个缓冲区（颜色，深度或模版）
至少有一个颜色附加
所有的附加必须完整（预分配了内存）
if(glCheckFramebufferStatus(GL_FRAMEBUFFER) == GL_FRAMEBUFFER_COMPLETE) 来判断一个FBO是否完整
每个缓冲区的采样需要一致
接下里所有的渲染操作都将会渲染到当前绑定的帧缓冲中去。由于当前的帧缓冲不是默认帧缓冲，渲染指令将不会影响到屏幕上的显示内容，所以我们把渲染到非默认帧缓冲叫做离屏渲染（off-screen rendering）.为了保证所有的渲染指令最终会呈现在设备屏幕上，我们需要重新绑定激活默认帧缓冲：
glBindFramebuffer (GL_FRAMEBUFFER, 0); 创建纹理附加图像 创建FBO的附加纹理如同平常使用纹理一样，不同的是，这里只为纹理分配空间，而不填充实际纹理图像内容，因为当使用FBO渲染时渲染结果将会写入到我们创建的这个纹理上去
glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture,GLint level); target: 绑定目标，一般为 GL_FRAMEBUFFER</description>
    </item>
    
    <item>
      <title>Learning OpenGL：GLSL Shader 手册</title>
      <link>/posts/glsl-dictionary/</link>
      <pubDate>Sun, 26 Feb 2017 14:26:08 +0000</pubDate>
      
      <guid>/posts/glsl-dictionary/</guid>
      <description>基本类型 类型 说明 void 空类型 bool 布尔类型 int 带符号的整数 signed integer float 带符号的浮点数 floating scalar vec2,vec3,vec4 n维浮点数向量 n-component floating point vector bvec2,bvec3,bvec4 n维整数向量 singed integer vector bvec2,bvec3,bvec4 n维布尔向量 boolean vector ivec2,ivec3,ivec4 n维整数向量 singed integer vector mat2,mat3,mat4 2X2,3X3,4X4 浮点数矩阵 float matrix sampler2D 2D 纹理 a 2D texture samplerCube 盒纹理 cube mapped texture 基本结构和数组 类型 说明 结构 struct type-name{} 类似c语言中的结构体 数组 float foo3[] glsl 只支持1维数组，数组可以是结构体的成员 ##内置的特殊变量
glsl程序使用一些特殊的内置变量与硬件进行沟通。大致分成input,output两种类型，input类型，负责向硬件（渲染管线）发送数据，output类型负责向程序回传数据。
在vertex shader中 output 类型的内置变量：
变量 说明 单位 highp vec4 gl_Position; gl_Position 放置顶点坐标信息 vec4 mediump float gl_Pointsize; gl_PointSize 需要绘制点的大小（只在gl.</description>
    </item>
    
    <item>
      <title>读书笔记《成为乔布斯》</title>
      <link>/posts/becoming-steve-jobs/</link>
      <pubDate>Sun, 29 Jan 2017 15:54:14 +0000</pubDate>
      
      <guid>/posts/becoming-steve-jobs/</guid>
      <description>在接触《成为乔布斯》这本乔布斯人生旅程传记之前，我试过两三次去读官方那本《乔布斯传》，结果都以失败告终；因为《乔布斯传》这本书的内容太过干巴巴，读起来很容易走神。而《成为乔布斯》则不一样，这书是以故事的方式讲述了乔布斯的生平事迹，读起来有趣的多。
其中该书最让我喜欢的地方是，书中讲述了很多我们以前不知道的小细节，小故事。如iTunes是先于iPod就出现的；在2007年第一代iPhone发布之前，乔布斯已经得知自己的癌细胞扩散了，留给他的时间只有五年左右（但我们回头看他在发布会上面的表现，不像是一个知道自己只剩四五年时间的人）。例如iPad这个产品是先于iPhone就出现在了苹果公司中，只不过那时候的iPad和最后上市的iPad是不一样的。还比如库克在乔布斯病危的时候想捐献肝脏给他这一让人感动的场景。
全书主要讲述的是乔布斯从早期和沃滋一起创业，研发个人电脑，到苹果电脑大卖，公司上市；从和沃滋的关系决裂，到Lisa等一系列产品的失败，再到被苹果公司驱逐。从受到Next，打算凭借Next击败评估，到收购皮克斯，并见证了皮克斯生产了动画电影史上重要篇章《玩具总动员》。后来Next被苹果收购，乔布斯回归苹果，收拾其他人留下来的烂摊子。上面的故事离我们比较远，但乔布斯回归苹果之后，也不是立马就做出了具有历史意义的iPhone。回归苹果之后的乔布斯，可以从书中得知，主要的业务还是个人电脑。但乔布斯对事物的敏感度，让他在2000年的时候觉得消费电子领域是一个很有市场的领域。随后苹果公司发布了iTunes，让用户在iTunes上面购买正版音乐。也标志着苹果公司正式进入了个人电子消费市场。后面的故事就是你我比较熟悉的了，iPod让苹果公司great again，苹果公司又成了大众喜欢并愿意花钱消费其产品的公司。然后就是2007年的iPhone一代的发布，真正一款划时代的产品。书中说到这是让乔布斯理想实现的一款产品，因为iPod，iPhone让苹果公司生产的产品不再是一小撮人玩弄的小众产品，而是被大众接受，喜爱，并购买的消费电子产品。而iPhone整个设计上面的美学，在我看来也让整个大众的审美得到了提升。回头看看在iPhone普及之后，我们的电子产品，网站界面，甚至包括家具，汽车等产品的工业设计都受到了苹果产品传达出来的美学影响。苹果的产品真的让生活变得美好了起来。
最后，书名叫《成为乔布斯》，意思不是教大家如何变成乔布斯，而是讲述了乔布斯是如何一步一步成长成为那个被世人奉若神明的史蒂芬。</description>
    </item>
    
    <item>
      <title>OpenGL ES 2.0 3D基础（1）－矩阵</title>
      <link>/posts/opengl-3d-matrix/</link>
      <pubDate>Sun, 18 Dec 2016 14:37:53 +0000</pubDate>
      
      <guid>/posts/opengl-3d-matrix/</guid>
      <description>Overview 移动设备的屏幕是二维平面,要想把一个三维场景渲染在手机二维屏幕上，需要利用OpenGL中的矩阵投射，将三维空间中的点映射到二维平面上。三维矩阵的相关知识是学习OpenGL最重要的课程之一。
线性代数 学习OpenGL三维投射知识之前，我们得事先了解下一些基础的线性代数知识，如向量运算，矩阵运算。
向量运算 向量: 指一个同时具有大小和方向的几何对象，因常常以箭头符号表示以区别于其它量而得名。
向量加减 向量的加（减）法定义是分量的相加（减），即将一个向量中的每一个分量加上（减去）另一个向量的对应分量：
向量相乘 点乘 叉乘 矩阵运算 矩阵简介 数学上，一个 m x n 的矩阵是一个m行n列元素排列成的矩形阵列。以下是一个由6个数字元素构成的3行3列的矩阵：
矩阵运算规则 矩阵的加减 矩阵与标量之间的加减：
矩阵与矩阵之间的加减： 矩阵乘法 矩阵数乘 矩阵相乘 单位矩阵 在OpenGL中，由于大部分的向量都是4分量 （x,y,z,w）,所以我们通常使用 4x4 的变换矩阵。当中最简单的变换矩阵是单位矩阵。单位矩阵是一个除了对角线以外都是0的NxN矩阵。
单位矩阵通常是生成其他变换矩阵的起点。
缩放矩阵 对一个向量进行缩放指的是对向量的长度进行缩放，而保持它的方向不变。
位移矩阵 位移是在原始向量的基础上加上另一个向量从而获得一个在不同位置的新向量的过程，从而在位移向量基础上移动原始向量。 旋转矩阵 （Rx,Ry,Rz）代表任意旋转轴，θ是角度： 累积变换 上面接受啊了如何旋转，平移和缩放向量。把这些矩阵相乘组合起来如下：
TransformedVector = TranslationMatrix * RotationMatrix * ScaleMatrix * OriginalVector; 这行代码首先执行缩放，接着旋转，最后才是平移
坐标系统 OpenGL在每次顶点着色器运行后，所有顶点都为标准化设备坐标，每个顶点（x,y,z）都应该在-1.0d到1.0之间。通常情况下，我们会根据画布（屏幕）的大小设定一个坐标范围，在顶点着色器中将这些坐标转换为标准化设备坐标。在项目中，物体坐标最终被转化为屏幕坐标之前会变换到多个坐标系统，因为在相应的过度坐标系中做特定运算会方便容易一些。对我们来讲，一般情况下需要用到5个不同的坐标系统：
局部空间（Local Space）：物体起始坐标；如一个正方体a，原点是正方体的中心O1（0，0，0）。
世界空间（World Space）：物体在更大的空间范围的坐标；如我们构造了一个圆球来表示世界,圆心为世界坐标原点O2，把正方体放在圆球中t(x1,y1,z1)位置。那么正方体a的圆心O1在世界系统会转化为（x1,y1,z1）。物体的坐标从局部坐标变换到是世界坐标由模型矩阵（Model Matrix）负责实现。
模型矩阵是一种变换矩阵，能对物体进行位移，缩放，旋转。
观察空间（View Space）: 观察空间是将世界坐标转化为用户视野前方的坐标。一般用一个观察矩阵（View Matrix）来完成转换。
裁剪空间（Clip Space）：顶点着色器运行到最后，OpenGL期望所有的坐标落在一个特定的范围内，且任何在这个范围之外的点会被裁剪掉。为了将顶点坐标从观察变换成裁剪空间，需定义一个投影矩阵（Projection Matrix），它指定一个范围的坐标，比如每个维度上的 -100 到 100。投影矩阵会将在这个指定范围内的坐标变换为标准化设备坐标的范围（-1。0，1.0）。使用投影矩阵能将3D坐标投影到2D的标准化设备坐标系中。
将观察坐标变换为裁剪坐标的投影矩阵分为两种不同的形式：正交投影矩阵（Orthographic Projection Matrix），透视投影矩阵（Perspective Projection Matrix）。</description>
    </item>
    
    <item>
      <title>2016年度总结</title>
      <link>/posts/2016-summary/</link>
      <pubDate>Sun, 11 Dec 2016 14:56:52 +0000</pubDate>
      
      <guid>/posts/2016-summary/</guid>
      <description>娱乐 年度电影
海街日记
年度歌曲
热河
年度美剧
Game of Thrones
年度书籍
最好的告别
年度Podcast
太医来了
年度电视节目
晓松奇谈
体育 年度NBA比赛
15-16赛季，西部决赛第七场
金州勇士-俄克拉何马城雷霆
年度足球比赛
15欧锦赛 1/4 决赛：德国-意大利
工作 年度编程语言
OpenGL
年度App
MSQRD
年度开源项目
GPUImage
年度工具
macOS / iOS 备忘录</description>
    </item>
    
    <item>
      <title>ffmpeg 使用例程</title>
      <link>/posts/ffmpeg-command-example/</link>
      <pubDate>Mon, 07 Nov 2016 21:03:47 +0000</pubDate>
      
      <guid>/posts/ffmpeg-command-example/</guid>
      <description>本文介绍ffmpeg命令行的一些使用方法；
参数 主要参数 -i——设置输入档名。 -f——设置输出格式。 -y——若输出文件已存在时则覆盖文件。 -fs——超过指定的文件大小时则结束转换。 -ss——从指定时间开始转换。 -t从-ss时间开始转换（如-ss 00:00:01.00 -t 00:00:10.00即从00:00:01.00开始到00:00:11.00）。 -title——设置标题。 -timestamp——设置时间戳。 -vsync——增减Frame使影音同步。 视频参数 -b:v——设置视频流量，默认为200Kbit/秒。（单位请引用下方注意事项） -r——设置帧率值，默认为25。 -s——设置画面的宽与高。 -aspect——设置画面的比例。 -vn——不处理视频，于仅针对声音做处理时使用。 -vcodec( -c:v )——设置视频视频编解码器，未设置时则使用与输入文件相同之编解码器。 声音参数 -b:a——设置每Channel（最近的SVN版为所有Channel的总合）的流量。（单位请引用下方注意事项） -ar——设置采样率。 -ac——设置声音的Channel数。 -acodec ( -c:a ) ——设置声音编解码器，未设置时与视频相同，使用与输入文件相同之编解码器。 -an——不处理声音，于仅针对视频做处理时使用。 -vol——设置音量大小，256为标准音量。（要设置成两倍音量时则输入512，依此类推。） ##例子
不过在使用中可能需要用一些不常用的命令行去做一些视频编辑的功能，如下几个例子：
裁剪视频 比如有一个横向视频,分辨率是1280X720，如果指向保留中间的405*720部分，可以使用下面的命令：
ffmpeg -i input.mp4 -strict -2 -vf crop=405:720:420:0 video_out.mp4 其中的crop=405:720:420:0 裁剪参数，具体含义是：crop=width:height:x:y.其中 width和height便是裁剪后的尺寸，x:y 表示裁剪区域的左上角坐标。
视频转换成图片 ffmpeg -i input.mp4 image%3d.png 也可以指定视频导出的图片的帧率，（1s的视频生成的图片的个数）
ffmpeg -i input.mp4 -r 30 $filename%3d.png 其中 -r 30 是视频帧率，如何获取当前视频的帧率，请看如下命令：
ffprobe &amp;quot;input.mp4&amp;quot; -v 0 -select_streams v -print_format flat -show_entries stream=r_frame_rate 剪辑视频 一段长视频只需要保留其中一段，可用如下命令：</description>
    </item>
    
    <item>
      <title>活到28</title>
      <link>/posts/28/</link>
      <pubDate>Wed, 26 Oct 2016 23:49:23 +0000</pubDate>
      
      <guid>/posts/28/</guid>
      <description>信则有，不信则无-这句话带有非常强烈的主观臆断色彩。我不认同这句话中携带的我思故我在式的思维模式，但不可否认在特定条件下，这句话会对一个人起到良好的心理按摩作用。
就个人而言，学习OpenGL编程是一个难度相对大的技术。也许是因为没有学习过计算机图形学，在学习OpenGL编程期间，会遇到各种不懂的名词概念：着色器，光栅化，纹理，帧缓存；OpenGL本身的状态机也不是很好理解；加上不友好的开发工具链（无法打印GPU数据，OpenGL crash堆栈信息很少）。这三点导致学习OpenGL是一门入门难度比较大，学习曲线陡峭的技术。刚开始的时候，困难的确比较多，很容易失去信心；这个时候，如果对自己说一句信则有，相信这东西自己是可以学出来。坚持持续不断的看教程，动手试错，最终是可以学出来的。
同样，在学习蛙泳的时候，在升职答辩的时候，在健身的时候，在极限运动的时候；面对深水区的恐惧，主考官的质问，肌肉的酸痛，呼吸的急促，死亡的恐惧。我们需要鼓起勇气，运用我们一直练习的学习技巧，观察别人怎么做的，思考自己哪里做的不对，不停的模仿，不断的试错重来，不怕失败，自信每次都会有所进步，最终能够扛过这座山。
如果说在28岁生日这一天，回顾过去一年，我有什么收获的话，
“立志不坚，终不济事。” &amp;ndash;（宋）朱熹
这句话是我最大的收获。
对了，如果实在找不到信心的话，就这样想：&amp;ldquo;这么多人都行，我怎么可能不行&amp;rdquo;。</description>
    </item>
    
    <item>
      <title>如何在Macosx上安装caffe</title>
      <link>/posts/install-caffe-on-macosx/</link>
      <pubDate>Sat, 22 Oct 2016 12:55:05 +0000</pubDate>
      
      <guid>/posts/install-caffe-on-macosx/</guid>
      <description>在macosx上面安装深度学习框架caffe是个相对比较麻烦的过程。如果根据caffe项目的install_osx文件指引去安装，会遇到一些问题。所以我决定把自己的安装过程记录下来。
硬软件环境
电脑：iMac 系统：OX EI Caption 版本10.11.4 Homebrew 官方推荐使用Homebrew来管理依赖项的下载，安装。
##Anaconda Python Anaconda是python的一个常用的科学计算发行版，自带包管理器conda。从 https://store.continuum.io/cshop/anaconda/ 下载并安装Anaconda Python。安装成功之后,记得在PATH添加ananconda执行文件的路径：
export PATH=~/anaconda/bin:$PATH CUDA 从 https://developer.nvidia.com/cuda-downloads 下载并安装CUDA 8.0 (for OSX)
从 http://www.nvidia.com/object/mac-driver-archive.html 下载并安装最新的CUDA独立驱动。 同样我们把驱动的可执行文件路径添加到PATH环境变量中(注意下载安装的CUDA的版本号)：
export PATH=/Developer/NVIDIA/CUDA-8.0/bin/$PATH export DYLD_LIBRARY_PATH=/Developer/NVIDIA/CUDA-8.0/lib:$DYLD_LIBRARY_PATH BLAS 网上搜索到的教程中都是使用Intel MKL，查看网站会发现intel-mkl收费很贵，所以我安装的时候选择了OpenBLAS
brew install openblas 关于 intel-mkl 和 openblas 的优劣，没有做过比较。在校大学生可通过学校邮箱在页面 https://software.intel.com/en-us/qualify-for-free-software/student 申请安装包。
##cuDNN
从 https://developer.nvidia.com/cudnn 页面下载并安装cuDNN库,安装过程如下：
tar -xzvf cudnn-8.0-osx-x64-v5.1.tgz cd cuda sudo cp lib/* /usr/local/cuda/lib sudo cp include/cudnn.h /usr/local/cuda/include/ ##安装依赖项 via Homebrew
首先我们需要修改下homebrew安装 opencv 时需要用到的opencv.rb文件
brew edit opencv 将下面两行：</description>
    </item>
    
    <item>
      <title>2016上半年电影，美剧，以及书 清单</title>
      <link>/posts/2016-1st-half/</link>
      <pubDate>Sun, 25 Sep 2016 23:05:21 +0000</pubDate>
      
      <guid>/posts/2016-1st-half/</guid>
      <description>电影 中国 饮食男女 喜宴 推手 李安“父亲”三部曲；在三部电影里面，饰演男主角的郎雄，都给人一种很亲切的感觉，让人很喜爱这老头儿。最喜欢《饮食男女》中吴倩莲饰演的二姐，走在最先锋的人，却最终选择了守住传统。
北京遇上西雅图之不二情书 加分的是那对老夫妇，以及老爷子身上的文人气质
寒战2 梁sir还是那么棒
使徒行者 火锅英雄 老炮儿 日本 步伐不停 平淡的，生活化的，舍不得结束的
海街日记 依旧是平淡的，生活化的，舍不得结束的
怪物之子 美国 谍影重重5
熟悉的伯恩回来了，但感觉整个的电影的高潮部分是在希腊街头的那段追杀。
火星救援
最爱马特呆萌种土豆那一段
十二怒汉
剧情精彩，回味无穷
生为蓝调
冲着伊桑霍克看的
功夫熊猫3
疯狂动物城
蝙蝠侠大战超人：正义黎明
奇幻森林
美国队长3
泰山归来：险战丛林
九条命
X战警：天启
硬核亨利
###韩国
哭声 看完堵得慌
美剧 毒枭第二季
和第一季一样，还是那个魔幻的哥伦比亚
权利的游戏第六季
私生子之战，我看了三遍了
绝命律师第二季
好看，推荐
黑客军团第二季
强迫症让我看完了第二季，应该会看第三季
怪奇物语
为了拍第二季，第一季的结尾让人不适，不打算看第二季
书 《你是一切的答案》 《程序员的思维锻炼》 读书笔记
没写评论的，在我看来是可看可不看的</description>
    </item>
    
    <item>
      <title>五年，四年</title>
      <link>/posts/shanghai-4-years/</link>
      <pubDate>Sat, 30 Jul 2016 14:35:05 +0000</pubDate>
      
      <guid>/posts/shanghai-4-years/</guid>
      <description>2012年端午节前的一个礼拜，我买了张从南宁到上海的火车票,只身一人来到上海。
两个礼拜前我从广州的一家公司辞职。这家广州公司在南宁有一个更小的办公室，我11年刚毕业的时候找不到很好的工作，就先去那个小办公室上班；那时我和大学室友在公司附近一起租了一套房子，房主是戒毒所医生，一个个子小小的，为人和蔼的南宁阿姨；同年10月份，我被派去广州出差，那是我第一次去发达省份，第一次坐地铁，也第一次感受到大城市竞争的残酷性。不过那时我以为自己年底还会回南宁继续上班，所以还留了一些杂物在南宁，租的房子也没有退。
没想到，再次回南宁的时候，已经是决定离开这座城市了。我在南宁大概呆了一个多礼拜，见了南宁办公室的同事，并和他们一起去了趟北海玩了两天，那是我第二次去北海。在北海的两天，我和蒙哥（南宁办公室的老大）一起住的一个标准间，夜里我们七七八八聊了一些；我只记得他跟我讲了他在IBM当销售的时候是怎么搞定客户的故事，和他对未来的一些打算，似乎有挽留之意，我含糊中转移了话题。从北海回南宁后，约了几个大学同学聚餐，地点在西大后面农院路的街头。尔后退了房子，收拾好行李，临走的前一天，我一个人去西大走了走，看了看。然后搭上火车，和这个呆了四年多的城市道别了。
刚来上海的头两个礼拜，我借住在朋友那里；朋友住在他自己租在桂林路地铁站附近的一间小屋子里；那个小格子间是我经历过的条件最艰苦的住宿环境，小小的隔间，只有四五平方米，屋子里还臭气一阵阵。那段时间，我疯狂的投简历，只要人家约我去面试，我都要跑去试试看，一心想把自己买一个好价钱。最终，我去到上家公司上班，公司叫 yeecco。找好工作之后，我从朋友的小隔间里面搬了出来。我无意冒犯这位朋友，只是觉得人应该对自己好一点，那样的住宿环境现在想起来我都会觉得难受。
新租的房子在淞虹路地铁站附近，隔壁住的是一对刚毕业的情侣。有了工作和住的地方，我稍微定心了些，没有刚来的时候那么惶恐。
那段日子，早上我从淞虹路坐地铁到静安寺上班。半个小时拥挤的地铁中，我会看一会书；印象中看的是稻盛和夫的《活法》。这本书可能会被现在的人诟病，但对一个初来乍到，在这个都市一个帮手都没有的人来讲，不失为一本很好的精神慰藉。它让我把所有的精力都放在新工作上，让我不要多想，做好眼前事，明日事明日议。
新工作并不容易，公司做的项目是 StellaSDK，对于当时的我来讲，项目中大多数知识是我没接触过的，很多东西无从下手。那段时间，我拼命学习，工作。经常会在地铁里面，思考到某个点，恨不能马上拿电脑验证一下；又会因为某个问题没思路解决不了，导致压力太大吃不下饭。但回过头来看，那段经历对自己编程技术的提升帮助很大，让我养成了很好的学习新技术的习惯和方法，不畏惧任何不懂的技术领域。我很感激老大wenqi，那时候他对我也很好（一个会夜里开车送你回家的老大不是那么的常见），我的技术，习惯，思考方式，以及保持勤奋全都是从他身上学得，非常感激他。
后来，由于一些原因我离开了上家公司，来到了腾讯。如今，算算我已经毕业五年，来到上海也已经四年；看起来情况在变好，至于未来，应该会变得更好一些吧。
后记：
不知道其它人会不会有这样一种感觉，在生活中的某个阶段，你会突然意识到自己生命中的一切都只能靠你自己。我有这种感觉是在我刚毕业的时候。在那段时间里的某一刻，我突然意识到接下来的一切，钱，工作，女人，以及所有的渴望都只有靠自己。你是你唯一的依靠。</description>
    </item>
    
    <item>
      <title>《程序员的思维训练》读书笔记</title>
      <link>/posts/pragmatic-thinking-and-learning/</link>
      <pubDate>Sat, 11 Jun 2016 16:21:36 +0000</pubDate>
      
      <guid>/posts/pragmatic-thinking-and-learning/</guid>
      <description>技术从业人员的五个级别 书中开篇介绍一项技术领域的从业人员，大体可以分成五个级别：新手，高级新手，胜任者，精通者，专家。从名次表面就很好理解这五个级别所代表的意思。有意思的地方在于现在国内的大型互联网公司内部，技术人员的职级分类也是如此：初级工程师，工程师，高级工程师，资深工程师，专家。文中列举了一些各个级别的人的一些有意思的特征，如新手非常在乎他们是否成功，新手不是特别想要学习，他们只是想要一个立竿见影的效果，如果出错，他们非常容易慌乱。高级新手能够根据过去的经验，逐步在正确的情景中采纳建议，但他们不想要全局思维。胜任者是可以独立解决问题，并开始考虑如何解决新的问题，胜任者的工作更多的是基于谨慎的计划和过去的经验，如果没有更多的经验，在解决问题时，他们难以确定关注哪些细节。精通者能够纠正以往不好的工作表现，他们会反思以前是如何做的，并修改其做法，期望下一次表现得更好，如此，自我改进就会出现。专家根据直觉工作，而不需要理由，专家的数量很少，大概占总人数的1%～5%。
而要想而从新手一步一步升级成为专家，自身要发生如下三个重要变化才行：
从依赖规则向依赖直觉转变 观念的改变，问题已不再是一个相关度等同的所有单元的集合体，而是一个完整和独特的真题，其中某些单元是相关的。 最后，从问题的旁观者转变为问题涉及的系统本身的一部分。 然后，令人沮丧的是，研究表明，大多数人的大多数技能，在他们生命的大多数时间里，从没有高于第二阶段高级新手，这里的大多数指的是70%的人。
大脑的两种思考模式（L &amp;amp; R） 书中第二部分介绍了大脑两种思考模式，L模式－线性模式，R模式－富模式。R型对直觉。L型让你细致工作并实现目标。要想获得最佳性能，需要两种模式协同工作。
L型提供以下9种能力：
语言能力 分析能力 符号能力 抽象能力 实践能力 推理能力 数字能力 逻辑能力 线性思维能力 这些都是白领们，信息工作者和工程师们最渴望的本领。上学的时候测验也是这些能力。
R型提供的能力：
非语言 非理性 综合 空间性 具体 直觉 分析 全面 非线性 R型是非语言的，注重整体的，直觉的，跳跃的，这些特点似乎更适合艺术家。但R型的类比和整体思考方式对软件架构和设计非常有价值，好的设计就是由这些组成的。R型还负责综合，而综合是一项非常强大的学习技术。乃至于麻省理工学院媒体实验室创始人建议，真正想要了解一只青蛙，传统的解剖不是办法，更好的方式是构造一直青蛙。（联想到软件开发中，如果想真正搞透某个模块，重造轮子应该是最好的方式）。
接着书中谈到相对于L型，为何R型也如此重要。一家公司的产品是否能够成功，R型思维起到很重要因素。因为R型管理美学，而商品化意味着美学品味的竞争。**作者强调产品的设计胜于功能，是否有吸引力很重要。**好的设计，会给用户带来积极的情感，而积极的情感对学习和创造思维非常关键。处于“高兴”的状态可以扩展你的思维过程，激活更多的大脑物质（意味着用户从产品获取到快感，成就感，自然就会愿意使用产品）。
当然了，美学不仅仅指的是用户界面,产品的Logo，也包括代码和注释的布局，变量名的选择和桌面的整理，还有其他领域的方方面面。（此时，想起了乔布斯的那句“It&amp;rsquo;s all about the taste&amp;quot;）
##如何利用L型和R型协同工作## 然后书中第四章介绍了如何利用右脑，也就是如何促成R型到L型的转换。其中我觉得很有意思的是酒醉写作，酒醒修改。因为酒醉的时候，你拥有自由的创造空间，不受“常识”或者“实用”束缚，可以尽情发挥自己的创造力或随后抛掉那些荒诞的东西。
下面是举了几个关于 L 型和 R 型协调工作的其它几种方式：
结对编程：工作时，一个人用L型，一个人用R型 隐喻相通：隐喻，语言和意像共同的地基，是在左右脑半球之间，在潜意识和意识之间来回游弋的途径。隐喻时一种激发创造力的强大技术。 并列参照系 幽默：幽默既不是浪费时间，也不是无害的消遣，而是反映了思维，学习和创造所必需的重要能力。他与联系有关。幽默产生于在不同的想法中制造新奇的联系。在任何情况下，幽默的能力都来自于发掘或扩展常规之外的关系，真正突破思维界限。 文中还有一段关于外向和内向的人讨论。外向的人乐于与人交往并参加社会活动。内向的人则不是，他们具有领地意识，需要私人的精神和环境空间，内向的人从独立的活动中获得力量，厌倦社会活动。百分之七十五的人偏于外向型，剩下百分之二十五的人则希望单独呆着。
##学习
在当今技术和文化环境下，学习能力可能是成功的最重要因素。它决定了你是“大获全胜”还是“勉强通过”。
技术本身不重要，持续学习才是最重要的。 学习不是强加于你的，而是需要你主动做的事情 仅仅掌握知识，而不去实践，没有用 随机的方法，没有目标和反馈，往往会导致随机的结果 那如何在现实中使学习更有效率？需要使用SMART目标和实用投资计划管理目标和计划。
SMART 代表具体的，可度量的，可实现的，相关的和时间可控的（Specific，Measurable,Achievable,Relevant,and Time-boxed）。
具体的：一个目标任务应该是具体的。也就是说，只说“我想学习swift”是不够的。应该把事情具体化，例如“我想要用Swift编写一个记账软件” 可度量的：如何知道你何时完成？为了努力实现目标任务，不管采用什么办法，你必须能够度量它。可度量的与具体的相辅相成。很难度量笼统抽象的事物，但是很容易度量具体和详细的事物，只要使用确切的数字即可。如果你认为无法度量自己的目标任务，那么可能它还不够具体。“写一部小说就像在黑夜里开车。你只能看到车灯照亮的部分，但是你却可以走完整个旅程”。你不必看清你去往何处。不必看清你的目的地和沿途的一切。你只需看清面前的一两米即可。 可实现的 相关的：目标需要相关，需要在你掌握之中 时间可控的：没有期限，目标会逐步衰退，永远被每天更紧急的事情所排挤。 ##管理知识投资
制定具体计划：制定计划就是巨大的进步。计划要具体，要运用SMART目标理念，要为不同时间段设计不同层次的目标。记住艾森豪威尔将军对我们的建议：作计划比计划本身重要得多。 多样化：不要把所有的鸡蛋放在同一个篮子里，需要很好地组合语言，环境，技术，行业和非技术领域（管理，公共演讲，，人类学，音乐，艺术，等等） 主动投资：需要客观地按天来评估你的计划，如实地判断运行状况。 定期投资：需要定期投资最低限度的时间量，养成一种习惯。并非每期学习都同样富有成效，但是只要定期安排学习，长期来看一定会成功。 ##控制注意力</description>
    </item>
    
    <item>
      <title>iOS逆向工程-0x02－Hacking on B612</title>
      <link>/posts/ios-reverse-engineering-03/</link>
      <pubDate>Sun, 06 Mar 2016 11:32:44 +0000</pubDate>
      
      <guid>/posts/ios-reverse-engineering-03/</guid>
      <description>前面两篇iOS逆向的文章（iOS逆向工程-0x00－用途以及准备工作,iOS逆向工程-0x01－工具篇-Cycript）主要是介绍iOS逆向的相关基础环境的搭建，工具的使用。有了这些知识之后，我们可以进行简单的逆向工作了。
B612是Line公司出品的一款非常棒的拍照软件。它的界面，交互，用起来非常顺手。app中的滤镜效果很赞，用户简单几步操作就可以生成一张很有质感的照片。本文我将会演示如何通过逆向来得知B612单个的滤镜的具体实现。
从AppStore上面下载B612的IPA文件，把文件的后缀名从 .IPA 修改成 .zip。解压zip文件之后，在Payload中有一个b612.app的文件，这里我们把.app的后缀去掉，让它变成一个文件夹，方便后面查阅。经过以上几步操作我们就拿到了 B612 app的 bundle 文件信息。
在使用B612的过程中，app会展列一个滤镜列表给用户进行选择（如下图）：
使用的过程发现一个叫 China 的滤镜，China，中国？还是瓷器？叫China的滤镜会呈现出什么样子的效果，根据效果我们是否能推测出这里的China是要翻译成中国，还是瓷器咧？很有意思的样子。我们就拿这个滤镜当做目标吧。
一般情况下，我的常用做法是在先前解压的文件夹中搜索一下相关的信息，碰碰运气。
find . -name &amp;quot;*china*&amp;quot; ./FilterThumb.bundle/filterthumb_china.jpg ./ObfuscateImages.bundle/lut/china.dat 运气不错。在ObfuscateImages.bundle发现了一个叫china.dat的文件。不过尝试用各种编辑器都没法打开，使用修改后缀名等之类的方法也没能成功打开。看来要获取这个文件的内容没有那么简单，开发者对这个文件做了相关加密工作。要想解密该文件，我们可能需要到汇编代码中寻找答案了。
这里考虑到程序在使用这个滤镜的时候，会加载该文件，并进行相关解密工作。所以下一步是要找到解密dat文件的地方，不过在此之前，我们还有一些工作要做。
解密可执行文件 - clutch 演示 接下来我们要去可执行文件中查询相关信息了。但是从苹果商店上面下载下来的IPA里面的可执行文件是被苹果加密过的,我们解谜它。我常用的工具是 clutch,你可以clone一份repo到本地，然后编译得到一个clutch的程序，也可以直接下载release版本。然后把Clutch scp 到你的越狱机器上面就可以使用了。
首先我们查找一下b612的bundle
iPhone:/usr root# ./Clutch -i|grep b612
28)
然后进行dump工作
iPhone:/usr root# ./Clutch -d com.linecorp.b612 &amp;hellip;. //程序输出相关log &amp;hellip;. DONE: /private/var/mobile/Documents/Dumped/com.linecorp.b612-iOS7.0-(Clutch-2.0 RC2).ipa
最后会生成一个解密了的ipa文件，我们把它scp到电脑上来，进行分析。
还有另外一个解密苹果商店加密IPA的工具叫dumpdecrypted。由于在使用Clutch解密app的时候，消耗内存比较大，导致运行时会出现解密失败的情况，这个时候可以尝试使用dumpdecrypted。
分析可执行文件 - class-dump 以及 IDA 要分析解密之后的文件，我们可以使用class-dump来导出程序的头文件。有了头文件列表之后，我们可以利用它来了解app的架构，使用的类库，以及探索需要逆向的那一块功能所属的类名。
class-dump-z/mac_x86/class-dump-z b612 -H -o headers cd headers total 10728 drwxr-xr-x 1295 cp wheel 44030 Apr 4 12:46 .</description>
    </item>
    
    <item>
      <title>2015 年终总结</title>
      <link>/posts/2015-summary/</link>
      <pubDate>Thu, 31 Dec 2015 11:10:31 +0000</pubDate>
      
      <guid>/posts/2015-summary/</guid>
      <description>上海的冬天不是很好过，屋里屋外都很冷。忙碌中，不觉间，这一年已经来到了12月31号，15年就快要结束了。这两年自己也算养成了在一年结束的时候写一篇年終总结的习惯，好让自己来和这一年说再见。
15年对自己影响最大的事情是奶奶的过世。奶奶的逝去的那一阵子，让我恍惚间有了一种了无牵挂的感觉。那段时间，我觉得自己从此无依无靠；没有了任何牵挂，也无了任何寄托。自己可以随风漂泊去任何地方了。
每当我遇到自己恐惧的事情，会想到奶奶；想到奶奶临终前独自面对死亡，我自己头上的这点小事，真的不算个事。从我能记事开始，和奶奶生活的这二十多年，感觉时间很平静的就流逝了，我对奶奶也没有特别的故事可以回忆。只是有时候走在路上，躺在床上，会突然很想念她老人家。
其他的事情需要记录的并不多；15年我常去健身房，由于我从小有点驼背，加上工作性质，长期呆在电脑前，导致现在颈背状况很差，有时候会感觉特别痛。本来希望能通过健身矫正把这个毛病改掉，然而15年收效微微，但16年还是要坚持，相信正确的方法可以帮助自己克服掉这个长期以来的毛病。
另外就是今年终于把自己的博客写起来了，博客这个事情，自己老早就开通了，但能保持一个月至少两篇算是15年坚持下来的习惯；博文质量还有待提高，16年自己会坚持写作的。可以说坚持写作给予我的反馈是很棒的，会有一种特别的满足感。看着自己的文字，我能确切的知道，自己不是在混日子，自己平日里是有在思考的，自己是可以用文字把自己的想法，技巧，知识记录下来的，这一点让我感到安心。
整理这篇总结的时候，已经是2016年了，2016年希望自己能过的更随性，更自由一些。
2015年过去了，我很怀念它。</description>
    </item>
    
    <item>
      <title>2015下半年电影清单</title>
      <link>/posts/2015-2nd-movie-list/</link>
      <pubDate>Sun, 27 Dec 2015 22:16:11 +0000</pubDate>
      
      <guid>/posts/2015-2nd-movie-list/</guid>
      <description>中国大陆
港囧 (2015) 西游记之大圣归来 (2015) ✔ 寻龙诀 (2015) ✔ 中国香港
暗战 暗戰 (1999) ✔ 中国台湾
我的少女时代 我的少女時代 (2015)✔ 欧美
蚁人 Ant-Man (2015) ✔ 小黄人大眼萌 Minions (2015) 碟中谍5：神秘国度 Mission: Impossible - Rogue Nation (2015) ✔ 模仿游戏 The Imitation Game (2014) ✔ 侏罗纪世界 Jurassic World (2015) ✔ 角斗士 Gladiator (2000)✔ 血色将至 There Will Be Blood (2007)✔✔✔ 穿条纹睡衣的男孩 The Boy in the Striped Pajamas (2008) 爆裂鼓手 Whiplash (2014) ✔✔ 杀手没有假期 In Bruges (2008) 疯狂的麦克斯4：狂暴之路 （Mad Max: Fury Road）✔ 万物理论 The Theory of Everything (2014) ✔ 年轻气盛 Youth (2015) ✔ 头脑特工队 Inside Out (2015) 007：幽灵党 Spectre (2015) ✔ 明日世界 Tomorrowland (2015) 超能查派 Chappie (2015) 日本</description>
    </item>
    
    <item>
      <title>iOS逆向工程-0x01－工具篇-Cycript</title>
      <link>/posts/ios-reverse-engineering-02/</link>
      <pubDate>Mon, 30 Nov 2015 22:00:07 +0000</pubDate>
      
      <guid>/posts/ios-reverse-engineering-02/</guid>
      <description>对于初开始学习iOS逆向工程的人来说，实现一个tweak可以算是入门逆向工程了。
当然了，可能你现在还不知道tweak是什么。简单来说，你可以把一个tweak当作某一个app的一个插件（类似于浏览器广告屏蔽插件）。在app运行的时候，tweak会hook住某个函数，然后在hook的函数里面，你可以插入你的代码。
比如用户在登陆微信账号的时候，tweak可以hook住登录函数，dump出用户的账号密码
那问题来了，我们要如何知道哪个函数是账号登录函数咧？这就涉及到我们如何去分析一个iOS app
分析 iOS app 的两种方法 运行时分析
GDB/LLDB Cycript Logify weak_classdump InspectiveC 可执行代码分析
dumpdecrpted class_dump,class_dump_z,classdump_dyld Disassemblers IDA Hopper otool strings nm 先不要被这么多的工具多吓到，我们一样一样来。相比对汇编代码的分析，动态分析要简单，容易上手很多，对新手而言，也更加容易获取到乐趣。所以我们先从最好玩的Cycript开始。
###Cycript
Cycript最重要的特性是，它可以hook住 iOS／macosx 上面正在运行的进程，并通过终端使用objective_c或javascript语法去打印和修改该应用的运行时信息。我们可以把它当作一个可以debug没有源代码程序的工具。
以下是 Cycript 的用途：
能够hook正在运行的进程，并打印相关信息，如 appdelegate,rootViewController 对程序中的类，可以获取到它用过的方法名称 可以获取到类的实例变量名称，以及打印出实例变量的值，当然也可以修改实例变量的值 能够执行 method swizzling， 替换某个指定的函数 可以在运行时调用其他方法 安装 cycript 首先利用 Cydia 下载 mobilesubstrate adv-mds;从官网上面下载最新的包，并通过 scp 把文件拷贝到 iOS 设备上去，利用 dpkg 进行安装：
dpkg -i cycript cycript_0.9.102-1_iphoneos-arm.deb 安装完成之后，执行 cycript 看是否工作：
用Cycript进行实时修改 本文将使用支付宝来进行测试。
让支付宝钱包在前台运行，并找出它的进程id，然后用 cycript -p hook 进程
chengpeide-iPhone:~ root# ps aux | grep AlipayWallet mobile 629 0.</description>
    </item>
    
    <item>
      <title>iOS逆向工程-0x00－用途以及准备工作</title>
      <link>/posts/ios-reverse-engineering-01/</link>
      <pubDate>Sat, 21 Nov 2015 10:46:07 +0000</pubDate>
      
      <guid>/posts/ios-reverse-engineering-01/</guid>
      <description>前言 好奇心，求知欲，是作为一个程序员很重要的属性。好奇心会促使你去了解那些未知的事物，打开新的世界。求知欲则帮助你去琢磨这些知识，探索这些事物是如何工作的。
作为一个iOS开发者，我在使用其他开发者的优秀app的时候，总是会去猜测作者是怎么实现这个功能的，换作是我，我会怎么去实现它。有些功能很容易猜测出来（如微信iOS app的总体结构，想一下也会知道它的结构是 tabbarController+navigationController+tableViewController）；有些功能就不容易从表面上猜测出来，如博客软件 Castro。要想知道这些软件的一些设计细节，就得用上逆向工程，来帮助我们获取到想要的信息。
当然了，逆向工程还有其他更重要的用途，如下：
分析恶意软件 安全研究 借鉴别人的软件 破解使用限制 准备工作 在开始 iOS 逆向工作之前，得准备一下相关设备
硬件 Mac 电脑 一台越狱机器 (如何越狱，请访问 pangu) 设置环境 利用Cydia安装相关开发工具，建议安装下表中的全部软件 tool description ps process status, cpu usage, memory usage sysctl get or set kernal state netstat show network status route manually manipulate the routing tables renice alter priority of running processes ifconfig configure network interface parameters tcpdump dump traffic on a network lsof list open files otool displays specified parts of object files or libraries.</description>
    </item>
    
    <item>
      <title>活到二十七</title>
      <link>/posts/27/</link>
      <pubDate>Tue, 27 Oct 2015 00:05:53 +0000</pubDate>
      
      <guid>/posts/27/</guid>
      <description>“Many people die at 25 and aren&amp;rsquo;t buried until 75.”(很多人25岁就死了，但是要75岁才被埋进土里)－－这是美国政治家，科学家富兰克林的名句。
这里的死当然不是生理上的死亡，我的理解是指一个人的生活进入了静止的状态；早上8点起床，吃着相同的早餐，走着每天上下班的路去公司，开始一天忙碌的办公司生活，日复一日，循环至死。
今天是我二七岁的生日，想来我自己不也是如此嘛？每天的日子趋于静止，今天像是昨天的拷贝。
稍微观察下，生活中大家见面的时候，都会寒暄一句“最近在忙啥？”。想来这句话却很有意思，它鲜活的表现出了我们是一个好像不忙点啥，日子就没法过下去的种族。也是，我们身边的每个人每天都显得很忙；大家忙着挣钱，忙着找女人，忙着玩游戏，忙着去八卦，忙着娱乐，一刻都不得闲；但其实我觉得是人们害怕闲。因为一当闲下来，我们会不知道干嘛，进而觉得无聊，产生厌烦，最后感到孤独。
我也是如此，为了让自己忙起来，我写博客，不停的往Wunderlist中加todos，看amazon上面的畅销书。坦白讲，长长的 TODO list 会让我产生一种心安。
记得大二的时候，当时的我，一个中二青年，被乔布斯在斯坦福大学上的毕业演讲的震撼住了。其中有一段是
Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven&amp;rsquo;t found it yet, keep looking. Don&amp;rsquo;t settle.</description>
    </item>
    
    <item>
      <title>3D-Touch(2) PEEK And POP</title>
      <link>/posts/peek-and-pop/</link>
      <pubDate>Sun, 25 Oct 2015 10:36:21 +0000</pubDate>
      
      <guid>/posts/peek-and-pop/</guid>
      <description>如上篇文章所说，3D Touch 主要分成三个模块： Home Actions, Peek &amp;amp; Pop, Force Properties。上篇文章中总结了 Home Actions的相关知识点以及如何接入该功能。本文将用来介绍Peek &amp;amp; Pop 的相关知识点。
在给你的app接入peeking and poping 的功能之前，需要先了解该操作的三个属性， peeking, preview actions, poping。如下图所示：
用户在 Peeking 图片，视频，网页等内容的时候，能够在不去加载全部内容的情况下获取到更多详细的内容。
##PEEKING
当用户对某个view做peeking操作时，程序会展现给用户相对应内容的快照。Peek 操作是 3DTouch 中实现起来相对比较复杂的模块。Peek and Pop API 中有一个 UIViewControllerPreviewingDelegate,给指定的view需要注册这个delegate，就可以接收到系统回调过来的3D Touch事件。
override func viewDidLoad() { super.viewDidLoad() /* Register for `UIViewControllerPreviewingDelegate` to enable &amp;quot;Peek&amp;quot; and &amp;quot;Pop&amp;quot;. The view controller will be automatically unregistered when it is deallocated. */ registerForPreviewingWithDelegate(self, sourceView: view) } 这里有一点需要注意，我们可以在一个 view Controller 中，给多个view注册 Previewing Delegate ，但是我们不能反复去注册同一个view。</description>
    </item>
    
    <item>
      <title>3D-Touch(1) iOS9 Quick Actions Shortcut</title>
      <link>/posts/ios9-quick-actions-shortcut/</link>
      <pubDate>Wed, 30 Sep 2015 19:24:13 +0000</pubDate>
      
      <guid>/posts/ios9-quick-actions-shortcut/</guid>
      <description>新的iPhone6s, iPhone6s P 在不久之前的 WWDC 上面发布了，这个版本的iPhone最大的卖点应该是在它的屏幕拥有了 3D Touch 的功能。iOS 9 中已经包含了这一硬件功能所提供API，3D Touch API分成三个部分: Quick Actions， peek and pop,以及 Pressure Sensitivity.考虑到苹果的一贯作风，如果你的APP中集成iPhone的新特性，新的API，被苹果商店推荐的概率也会增大一点。本文将为大家介绍如何快速的添加 Quick Actions shortcut 功能。
Home Screen Quick Actions 通过主屏幕的应用icon，可以用 3D Touch 呼出一个快捷列表，用户可通过这个列表快速定位应用功能模块。iOS9提供了两种屏幕标签，分别是静态标签和动态标签。且iOS9最多展示四个快捷键给用户，系统会优先展示静态的快捷键，当静态的快捷键不够四个，会添加动态的快捷键到列表。
静态快捷键的添加 打开 Info.plist, 在该文件中添加如下键值：
添加一个key为UIApplicationShortcutItems的数组，数组中添件的元素就是静态标签，每个标签我们可以配置下面的键值：
UIApplicationShortcutItemType (required) : 快捷标签的唯一字符串标示 UIApplicationShortcutItemTitle (required): 快捷标签的标题，会显示在UI上 UIApplicationShortcutItemSubtitle (optional): 副标题，会显示在UI上 UIApplicationShortcutItemIconType (optional): 系统提供的icon，全部列表 UIApplicationShortcutIcon_Class UIApplicationShortcutItemIconFile (optional): 自定义icon（如果填写了该项，则系统自动ignore UIApplicationShortcutItemIconType）。图片需要时正方形的，3535的倍数（试过100100也是Ok的），并且单色。 UIApplicationShortcutItemUserInfo (optional): 传值用 详情请看这里
当在Info.plist 中添加好了需要的标签之后。运行程序便可得到以下效果：
P.S 关于如何在模拟器中调试ShortCutMenu，请见文章最后一节模拟器上测试Shortcut。
动态标签的添加 所谓动态标签，就是我们可以通过代码来添加标签，相关的类有：
UIApplicationShortcutItem 3DTouch标签的类 UIApplicationShortcutIcon 标签中图片Icon的类 响应标签的行为 当点击标签进入应用时，我们需要在代码对不同标签的做处理。在iOS 9 中，UIApplicationDelegate 新增了方法：</description>
    </item>
    
    <item>
      <title>There Will Be Blood</title>
      <link>/posts/there-will-be-blood/</link>
      <pubDate>Thu, 03 Sep 2015 23:47:22 +0000</pubDate>
      
      <guid>/posts/there-will-be-blood/</guid>
      <description>如果你喜欢《老无所依》，去看《血色将至》
如果你喜欢西部片，去看《血色将至》
如果你喜欢电影，去看《血色将至》
电影讲述的是一个银矿勘探者如何通过自身的艰苦奋斗最终成为石油大亨的故事。在观看影片的过程中，主角丹尼尔身上的所表现出来的气质，和我们今天所传扬的创业者身上的气质有着极大相似之处。（当然这些创业者的气质我也是从书中，网络中得来）。其中有两个场景给我映像极其深刻。
场景一：丹尼尔刚刚开发的新油井发生不幸发生意外，井喷了。丹尼尔的儿子 H.W 在井喷中意外受伤。丹尼尔把受伤的儿子抱到安全地带之后，在明知道儿子因伤至聋，极其需要爸爸的情况下，毅然丢下了儿子，跑去事故现场救灾。当身边的伙伴皱着眉头看着大火的时候，丹尼尔却笑着说：你干嘛要愁眉头，井喷证明了下面埋藏着无穷的石油，我们要发财了。此时，他已经把H.W的情况抛之脑后，心里所想全部是采油的事情。当伙伴问他H.W怎么样了，他才想起来儿子情况很不好。影片此后的镜头就是海报中的场景，丹尼尔指挥者工人用炸药把油井炸封起来。
第二个场景是，为了运输开采出来的石油。丹尼尔决心建一条油管通往大海。但油管铺设遇到了需要通过一块没有弄到租借权的土地。为了能够租下这块地，丹尼尔忍辱负重跑去教堂接受小人Eli神父洗礼。洗礼过程中Eli出于对丹尼尔的嫉妒狠狠的打了几个丹尼尔耳光（个人觉得Eli是在嫉妒丹尼尔，嫉妒他给小镇带来了繁荣，嫉妒他的石油生意）。但此时的丹尼尔并不在意被Eli侮辱，他只在意这块地终于租下来了，石油管道的铺设有谱了，自己的石油生意真的要做起来了。（这里有个细节，在还没有和土地主人谈妥之前，丹尼尔已经在那块地上面打桩测量油管路线。这一情节，也表明了丹尼尔对自己能够说明别人把地租给他的强大自信）
这两个场景都表现出了，丹尼尔对石油开采的极度专注和极大热情。开采过程的任何困难，挫折对于丹尼尔来说都不是问题，井喷不怕，火灾不怕，被小人侮辱无所谓。他眼中只关心和石油相关的事情，他探索油田，建筑油井，铺设油管，一切都是为了自己的石油生意。在生意路上遇到的问题，丹尼尔唯一做的就是自信满满的去解决它。
如果从资本家，企业家的角度来看丹尼尔，他无意是成功创业家的典范。创业后辈们无疑可以从他的事迹中汲取到很多的经验和养分。而他对当地石油的开采，无疑也提高当地人民的生活水平。
但这部电影不是单单讲述一个成功企业家的创业故事，还描述了丹尼尔作为一个人与这个上世界其它人的关系和情感。
我想绝大多数人应该都会害怕孤独吧，开心没人分享，失落无人倾诉。丹尼尔人生就是如此，影片开篇十几分钟跟默片一般，没有一句台词，镜头中只有丹尼尔一个人胡子拉渣的孤独的在矿井中勘探。有了油井，挣了初始资本之后，丹尼尔则每次都会带着H.W去做和卖家谈买卖。美国是一个清教徒国家，大家信上帝，非常重视家庭，大部分都会买亲情的帐。当在H.W变聋之后，为了专注工作，丹尼尔又能冷酷地把儿子从自己身边送走，寄养在别处。不过每个人都渴望亲情，渴望被别人所理解，丹尼尔内心深处也是如此。冒牌弟弟Henry的到来，让他在一段时间好似找到了久违的亲情。但可惜这个Henry是冒牌的，丹尼尔发现真相之后，开枪直接打死了冒牌的Henry，尽管冒牌Henry是唯一能和丹尼尔说得上话的人。
野心，孤独，对权力的欲望，虚伪，憎恶，不信任，丧失人性，这是丹尼尔作为人的一面。但与此同时，他却又是成功的资本家，他成功创业的事迹又会被当今的社会所传颂。或许按中国人的智慧，这就叫是非功过三七开吧。
熙熙皆为利来，攘攘皆为利往。丹尼尔这样的人在当代中国应该很受崇拜吧，应该会。
最后，摘录片中我喜欢的一段台词，也是丹尼尔唯一一次吐露自己心声的一段对话
亨利： ……你为什么离家出走？我知道你和父亲的关系不好。
丹尼尔：
我替地质调查局工作，去了堪萨斯。
我没法留在家里，不可能。
我不喜欢解释自己的行为。
…… 丹尼尔：
你是个愤怒的人吗，亨利？
亨利： 愤怒什么？
丹尼尔：
你嫉妒吗？你会嫉妒别人吗？
亨利： 我想不会。不嫉妒。
丹尼尔：
我有一颗争强好胜的心。
我不想看到别人成功。
我憎恨大多数人。
亨利：
我已经没有那种心气了……
辛苦工作却总不能成功――所有的失败让我……我就不在乎了。
丹尼尔： 我心里有，你心里就也有。
有时候我注视着人群，看不到任何值得我爱的东西。
我只想挣到足够的钱好让我远离所有的人。
……
丹尼尔：
我不想提那些事。
我看到人们最丑陋的一面，亨利。
我能得到我所要的一切，根本用不着去看那些丑陋背后还有什么。
经过这么多年，我的仇恨一点一滴越积越深。
你来这儿，给了我喘息的机会。我自己一个人坚持不下去……同这些人纠缠。
英文版
Plainview: Are you an angry man. Henry?
Henry Brands: About what?
Plainview: Are you envious? D&amp;rsquo;you get envious?
Henry Brands: I don&amp;rsquo;t think so.</description>
    </item>
    
    <item>
      <title>Openradar Stream</title>
      <link>/posts/openradarstream/</link>
      <pubDate>Sun, 30 Aug 2015 22:02:42 +0000</pubDate>
      
      <guid>/posts/openradarstream/</guid>
      <description>写在前面 随着夏天的结束，9月份的到来，又到了苹果秋季发布新iPhone的季节了。我和绝大多数苹果用户一样对新的iPhone自然保留着一份期待。不过理智告诉我这次新的iPhone的release，应该不会给大家带来很大的惊喜。我猜测 iPhone6s 应该是一款针对 iPhone6 的升级产品。就像 iOS 9 是针对 iOS 8的一次升级，苹果公司内部在这一次的迭代中，主要精力应该是会放在“还债”上，之前release了太多的feature，遗留了太多的bug，会在这一次修复掉。
Openradar stream 的来由 和大多数 iOS developers 一样，我也在第一时间安装了 iOS 9 beta版本。满足了尝鲜感之后，随着而来就是 beta 系统的不稳定，以及各种的bug。用 iOS 9 进行开发的过程中，我遇到了许许多多的坑，对于一些系统的bug，会花费掉我很多的时间去debug。然后，我发现了openradar。一个 open database of radars for Apple bug。从openradar 上，你可以看到其他开发者提交的bug，这当然会为你省去很多的时间，帮助你避免很多的坑。
后来我想我是不是应该做一个自动的脚本，定时的去抓取这个网页上面的信息，然后发到微博上。关注这个微博的人就可以在自己的时间线上面看到最新的bug了。这样做的好处是，一来你了解到bug信息，下次你遇到类似的问题，会联想到之前看过的bug信息，省去大量的时间。二来，刷微博的时候，还顺便学习了新知识，就没那么大的罪恶感了～。为此，我写一个tiny project，auto radarstream。
具体工作 完成openradarstream，有以下事情需要去做
前期工作
申请一个微博账号，并申请微博OpenApi，获取到apikey和apisecret。 获取到微博的 accessToken， expires 开发工具
language: python database: sqlite 细节
设置好微博的环境，其中微博的OpenAPI,使用开源库sinaweibopy
初始化数据库
def initDB (): print &#39;initDB ...&#39; db = sqlite3.connect(sqlite_file) cursor = db.cursor() cursor.execute(&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS bugs(id INTEGER PRIMARY KEY, bugid TEXT, status TEXT, originator TEXT, product TEXT, title TEXT)&#39;&#39;&#39;) db.</description>
    </item>
    
    <item>
      <title>UICollectionViews Now Have Easy Reordering （译）</title>
      <link>/posts/uicollectionview-has-easy-reording-on-ios9/</link>
      <pubDate>Sat, 22 Aug 2015 09:52:28 +0000</pubDate>
      
      <guid>/posts/uicollectionview-has-easy-reording-on-ios9/</guid>
      <description>iOS 9.0 UICollectionView 拖拽效果实现 原文 UICollectionViews Now Have Easy Reordering
在UICollectionView 刚出来的时候，我就对其产生了很大的兴趣。相比它的大哥 UITableView，它更加容易进行一些自定义的操作。我们组现在在项目中使用 UICollectionView 要多于 UITableView。伴随着 iOS 9 的 release，UICollectionView排序（动态拖拽）更加简单。在这之前，如果想对 UICollectionView 进行动态拖拽是非常困难的，要想实现动态拖拽，需要去做非常多的工作。话不多说，我们看一下新的 API。文章用到的Sample地址uicollectionview-reordering。
实现拖动排序最简单的办法是使用 UICollectionViewController, 在 UICollectionViewController 中新增了一个属性 installsStandardGestureForInteractiveMovement, 通过添加手势对cells进行重排。该属性是BOOL型，默认值为 YES。 我们所需要做的，只要重载下面这个方法就好了.
override func collectionView(collectionView: UICollectionView, moveItemAtIndexPath sourceIndexPath: NSIndexPath, toIndexPath destinationIndexPath: NSIndexPath) { // move your data order } 当程序中重载了moveItemAtIndexPath，collectionView 就认为 cell 是可以移动的。
![reordering-01](http://nshint.io/images/uicollectionview-reordering/1.gif) 那如果需要给某一个 UIViewController 中 collection view 实现动态拖动效果，该如何实现呢？事情会变的稍微复杂一点。除了需要实现UICollectionViewDataSource中上面提到的代理方法，还需要重写 installsStandardGestureForInteractiveMovement。不过不用当心，实现起来蛮蛮容易。这里我们需要长按手势UILongPressGestureRecognizer，它能够完全满足拖拽需求。
override func viewDidLoad() { super.viewDidLoad() longPressGesture = UILongPressGestureRecognizer(target: self, action: &amp;quot;handleLongGesture:&amp;quot;) self.</description>
    </item>
    
    <item>
      <title>Spotlight &amp; MDFind</title>
      <link>/posts/mdfind-note/</link>
      <pubDate>Sun, 02 Aug 2015 11:31:18 +0000</pubDate>
      
      <guid>/posts/mdfind-note/</guid>
      <description>Indexing 服务 Maocx 系统的搜索服务 spotlight 想必大家都用过。它可以很便捷的帮我们找到想要的文件。
先举个例子，在 spotlight 中输入 _loadBlock， 我的电脑会出现以下结果：
spotlight 帮我找到了包含 _loadBlock 这个字符串的文件。
想象下，电脑硬盘中存储着如此多的文件，spotlight 是如何如此快速的查询到包涵这个字符串的文件的？
在查找答案之前，我们不妨自己来试着猜想一下，如果这个功能交给我们自己来做，我们会采用哪种技术方案来实现？
关于文件搜索，首先能想到的最简单的方法自然是遍历目录逐个文件对比，使用 find 的方式去查询。不过稍微想一下，如果使用这种方法在整个硬盘上找一个文件，得等多久才能找到一个文件。这肯定不是解决方案。那答案是什么？
我们不妨先把目光放到搜索这两个字上。提到搜索，首先想到的应该会是Google。而关于Google搜索引擎的工作原理，最简单的解释是：通过代码在全球收集信息，建立词组的索引数据库。Google处理用户的搜索请求，可以简单的理解成在索引数据库中查找结果的过程。
那 Macosx 的本地文件搜索会不会也是采取这种索引数据库的方式来实现的？答案是肯定的。Macosx 实现了自己的indexing的索引服务。那什么是indexing索引服务器，简单来讲： Macosx 系统会在平时建立磁盘上所有文件和目录的索引关系，维护出一个索引表，当要查找信息时直接从索引中查询即可。这个索引就好像是一本书的目录一样，我们根据自己要找的内容翻到对应的页面。
当然这当中还有很多复杂的处理过程，如当机器运行时，硬盘的文件产生变化，如何重新加载索引文件。更多的细节，我也没找出相关的文档来得到答案。先留个坑在这里吧。不过我们可以从其他开源的文件查询项目中了解一下业界对于这一块的处理方式。这里推荐 Lucene 给大家研究。（Lucene是一套用于全文检索和搜素的开源项目）。
mdfind 用 spotlight 的图形界面查询文件是很方便.但是我平常的工作过程中，常常需要知道文件的绝对路径，而图形界面并没有显示出来。关于如何在spotlight界面显示文件的详细路径，这里有个小 tips，具体操作是：选中某个搜索结果，长按 command 键，此时，界面右下方会出现文件的详细路径。不过如果文件路径太长，界面会显示不全，而且也有很好的没法去拷贝这个路径。
那如何解决文件路径显示不全，无法拷贝文件路径的问题呢？
Macosx 提供了终端执行命令mdfind，我们可以在 terminal 中使用mdfind来进行索引查询。比如要查询出文件内容中包含字符串 &amp;ldquo;_loadBlock&amp;rdquo;, 在ternimal中输入以下命令即可：
mdfind &#39;kMDItemTextContent=&amp;quot;_loadBlock&amp;quot;&#39; results:
/opt/dev/appstore_cracked/StoreKit_headers/SKStorePageViewController.h /opt/dev/appstore_cracked/StoreKit_headers/SKStoreProductViewController.h /opt/dev/iOS-Runtime-Headers/PrivateFrameworks/iTunesStoreUI.framework/SUWebViewController.h /opt/dev/iOS-Runtime-Headers/PrivateFrameworks/iTunesStoreUI.framework/SUStorePageViewController.h /opt/dev/iOS-Runtime-Headers/PrivateFrameworks/iTunesStoreUI.framework/SUPreviewOverlayViewController.h /opt/dev/iOS-Runtime-Headers/PrivateFrameworks/Preferences.framework/PSLazyImagePromise.h /opt/dev/iOS-Runtime-Headers/Frameworks/StoreKit.framework/SKStoreProductViewController.h /opt/dev/iOS-Runtime-Headers/Frameworks/StoreKit.framework/SKStorePageViewController.h 对比终端查询结果和图一中的结果，会发现有两点出入：
(1) 图一中的 PrivateFrameworks, Frameworks 整个目录都没有被查出来。这里我猜测应该是Soptlight这个应用是对查询结果进行了筛选，把PrivateFrameworks, Frameworks目录下的文件从查询结果中剔除掉了。 (2) 图一中出现的nsBlocklistService.js，在terminal的查询结果中并没有出现。为了找出原因，我分别查看下&amp;quot;_loadBlock&amp;quot;在各个文件中的上下文，以下是节选 nsBlocklistService.js
this._loadBlocklist(); SKStorePageViewController
CDUnknownBlockType _loadBlock; 看上去问题应该是出在_loadBlock前后是否能跟别的字符串上，修改查询语句</description>
    </item>
    
    <item>
      <title>Objc Interview Checklist Answers</title>
      <link>/posts/oc-checklist-answers/</link>
      <pubDate>Thu, 23 Jul 2015 21:12:55 +0000</pubDate>
      
      <guid>/posts/oc-checklist-answers/</guid>
      <description>@property中有哪些属性关键字？ nonatomic (thread-unsafe) atomic (default, thread safe)
strong weak assign copy
getter (custom getter method name) setter (custom setter method name)
readwrite (default) readonly
weak属性需要在dealloc中置nil么？ 不需要，runtime会在weak属性在释放的时候，自动把变量至为 nil;
@synthesize和@dynamic分别有什么作用？ @synthesize 自动生成属性 getter 和 setter 方法. LLVM Compiler 4.0之后，编译器会对@property 属性自动的添加 @synthesize ivar = _ivar,自动帮你生成 getter/setter 方法，以及自动绑定_ivar 实例变量。
@dynamic 是为了告诉编译器，getter/setter 方法将会在其他地方（父类，runtime）实现，这样可以消除warnnig
ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？ atomic, assign, readwrite
用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？ NSString Property:copy or retain
@synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？ 首先 complier 会根据 @interface 中的 @property 属性自动生成一份属性名前加_的实例变量。LLVM Compiler 4.0 之后，会自动添加@synthesize ivar = _ivar。</description>
    </item>
    
    <item>
      <title>从 NSString Property:copy or retain 到 NSCopying</title>
      <link>/posts/nsstring-property-copy-or-retain/</link>
      <pubDate>Sun, 19 Jul 2015 11:50:04 +0000</pubDate>
      
      <guid>/posts/nsstring-property-copy-or-retain/</guid>
      <description>NSString Property:copy or retain iOS程序中，在定义对象属性的时候，我们一般会把NSString类型的属性的修饰符写成 copy， 而不是 retain (或者 ARC 下面的 strong)。
为什么会有NSString要用copy来修饰的convention？能否用 strong代替?
回答这个问题之前，我们先看段代码：
@interface Fruit : NSObject @property (nonatomic, copy) NSString * fruitNameCopy; @property (nonatomic, strong) NSString * fruitNameStrong; @end NSMutableString * fruitName = [NSMutableString stringWithString:@&amp;quot;apple&amp;quot;]; Fruit * fruit = [[Fruit alloc] init]; fruit.fruitNameCopy = fruitName; fruit.fruitNameStrong = fruitName; NSLog(@&amp;quot;fruitName: %p %@&amp;quot;, fruitName, fruitName); // 0x7fddabd0e250 apple NSLog(@&amp;quot;fruitNameCopy: %p %@&amp;quot;, fruit.fruitNameCopy, fruit.fruitNameCopy); // 0xa0000656c7070615 apple NSLog(@&amp;quot;fruitNameStrong:%p %@&amp;quot;, fruit.fruitNameStrong, fruit.</description>
    </item>
    
    <item>
      <title>2015上半年看过的电影</title>
      <link>/posts/movie-list-been-watched-2015-1st/</link>
      <pubDate>Mon, 13 Jul 2015 22:40:09 +0000</pubDate>
      
      <guid>/posts/movie-list-been-watched-2015-1st/</guid>
      <description>中国
一步之遥 United States
Chirldhood Nebraska August Osage County American Sniper Birdman 2001: A Space Odyssey Driving Miss Daisy The Maze Runner Big Hero 6 Lost In Translation Fast &amp;amp; Furious 7 Japan
Seven Samurai Little Forest Natsu Aki The Little House Our Mother Korea
Snowpiercer </description>
    </item>
    
    <item>
      <title>砸火车的人</title>
      <link>/posts/za-huo-che-de-ren/</link>
      <pubDate>Sun, 05 Jul 2015 14:52:27 +0000</pubDate>
      
      <guid>/posts/za-huo-che-de-ren/</guid>
      <description>罗素在《幸福之路》一书中有一节是讨论关于厌烦与兴奋的。里面说到现代人对比我们的祖先更少厌烦，但却更怕厌烦。我们进行听音乐，玩电子游戏，看电影，或许都是为了消除厌烦吧。甚至有时候，我觉得读书也是消除厌烦，而不是为了获取知识。
我一直把自己当作一个喜欢读书的人来对待，但事实上我读过的书很少。
当然需要说明的是，我这里指的书籍是剔除了上学时候的教科书，工作之后的专业书籍。对我而言，这些书大都有一些不得不去读的意味，为了升学，为了升职，为了生存。要从这类书籍中要获取到乐趣是不太容易的。所以我这里读的书指的是一些“闲书”，纯粹因个人喜好而去看的书。
为了消除厌烦，我们总是希望能够从同样喜欢读书且品味没那么糟糕的人口中获得一些推荐的书籍，以备我们无聊的时候可以用来打发时间。记得上大学的时候，我总是喜欢推荐一本叫《追风筝的人》的书给其他人以换取其他人的推荐。书很薄，读起来很流畅，不会觉的累，故事精彩缺让人回味无穷。今天我抄袭此书的名字，取名这篇文章叫《砸火车的人》，来回忆一段同样是年少时发生的一件不光彩的事迹。
我一直是一个本分，胆子不大的人。小时候，可能是由于年纪原因，我也算是村庄里面孩子的头头。我们几个人早上一起上学，放学一起玩弹珠，打打扑克。映像中聚众打架，偷庄稼这种事情可能也就干过一两次。我们阵容很小，稳定的阵容只有我，弟弟，黑皮，还有几个经常一起玩，但是不是固定阵容的。黑皮那个时候跟我们玩的最好，上小学的时候我们总是在一起玩，砸火车的事情也是我们一起干的。
有段时间，黑皮说他跟其他人一起去村子旁边的火车道上砸过火车，很好玩。我当时一是好奇心作祟，二是自尊心要强，于是说我们也要去砸火车。 于是在某个无所事事的周末下午，我，弟弟，黑皮加上另外两三个人，不记得是谁了。一道去了村旁边的火车道上准备砸火车。来到火车道上，我们在旁边埋伏好，过了一伙儿，一列货车就缓缓驶了过来。等火车头经过我们的时候，黑皮立马从地上捡起石头砸向火车头，剩下的人看此情况，于是也都纷纷捡起石头砸向火车。不一会儿，火车就开走了，我们玩的很开心，有时候你很难搞清楚为啥我们对搞破坏是如此的感兴趣。然而出乎意料的事情发生了，火车在不远去停了下来，尽然倒退了。我们几个当时年纪都很小，我最大，也才上小学三年级，一下子就慌了。火车里面的人是要回来逮捕我们，怎么办。慌乱中，我们往旁边的山头上跑，在一个沟渠里面躲了起来。自然，9岁小孩的毛把戏，是逃不过这帮开火车大人的眼睛的。他们很快就把我们揪了出来。我记得当时自己全身都在发抖，很害怕。那帮家伙要把我们拎上火车，然后带走。至于去哪里，天知道。我只记得我拼命的说火车头不是我砸的，不是我砸的，我没有砸前面的火车头。事态发展的太快，然后矛头不知怎么着就指向了黑皮，我和其他几个人都说是他砸的，出卖了黑皮，为了保全自己；但那个时候火车里面的人搞错了，以为我们说的是我弟弟，便拉着我弟弟要上火车；我很害怕，不知该怎么办，但是我没敢上去阻止，只是在旁边大声说不是我弟弟，是黑皮，毫无保留的把黑皮卖掉了。然后黑皮被他们拖上了火车，就要被带走了。被火车带走，对于一个9岁的孩子来说，可能跟死亡也没啥区别吧。
幸好这个时候在田里面干活的农人都赶了过来，大伙儿一起劝说火车上的那帮家伙，大概是些小孩子不懂事之类的，好说歹说黑皮终于没有被带走，算是幸免于难。不过火车上的那帮家伙还是把黑皮的名字，家庭地址，学校记了下来，后面还把这件事通报到学校，黑皮被批评了一番。
每次回想起这件事情，我都为自己的不道义感到害臊。</description>
    </item>
    
    <item>
      <title>网球以及德约科维奇</title>
      <link>/posts/tennis/</link>
      <pubDate>Sun, 07 Jun 2015 09:41:30 +0000</pubDate>
      
      <guid>/posts/tennis/</guid>
      <description>我是从何时开始看网球的？应该是08年的澳网，那年我大一，放寒假在家过年，某个下午无聊的翻看体育台，无意中被澳网的比赛吸引住了，从此便养成了看网球比赛的习惯。
四大满贯中澳网的赛程赶巧在中国农历新年附近，而且比赛地墨尔本和北京在经度上只相差两个时区，这样比赛时间基本上都在国内白天下午进行。对于中国观众来说观看澳网比赛还是非常方便的。这也是为何四大满贯中我最中意澳网。当然了，还有另外一个原因，澳网是德约科维奇成绩最好的大满贯赛事。
07,08年的时候，世界第一是瑞士天王费德勒，那个时候费天王还正值当打之年，对网坛有着非同寻常的统治力。极度优雅的反手，关键时刻稳定的Ace球，一切看起来都那么的完美，对那种刚刚开始看网球的人应该都有着无比寻常的吸引力。不过我还是最中意小德 ，因为我不是那种非常强烈的 Glory Hunter，我更中意那种有朝气的事务。小德在08年的时候，常年排名在世界第三，也会被戏称三德子。不过，在看他的比赛的时候，你还是能够感受他身体里面迸发出来的求胜欲，你会觉得他会变的很强的人，未来看起来应该会很有搞头的样子。就像我最钟爱的球队是阿森纳一样，从我2007年开始看阿森纳比赛之后，这7，8年，阿森纳不是英超里面最强的队伍。不过你可以感受到温格对这支队伍的发展规划，阿森纳的比赛，球场上踢出来的足球能让你感到很舒服，球员也已年轻队员为主，朝气蓬勃。
关于小德的比赛映像最深的是2012年他跟纳达尔那场耗时6个小时的澳网决赛。比赛中，双方表现出来的技战力，韧性，决心都是令人惊叹的。双方你来我往，每一个回合的挥拍，我都看的心欲破膛。普通人的生活，绝大多数时刻都沉浸在茶米油盐酱醋茶的琐碎里，或许能享受一份闲适，但也可能缺少那种能让人肾上腺素极度分泌的紧张时刻。这也是网球比赛，或者说体育比赛的魅力吧。他能在某一段时间，能让人忘却现实生活中的烦忧，沉浸在此刻的比赛中。顺便插一句，或许这也是为何年轻人喜爱电子竞技类游戏的原因吧。那场比赛德约最终赢得了冠军，我想那是他为自己带上天王皇冠的一场比赛。赢取比赛后，他疯狂的撕掉了自己的球衣，冲着球场外怒吼，像一头雄狮。
这场比赛，就我而言，是德约目前职业生涯最好的一场比赛，对于纳达尔来说，或许是最不愿追忆的比赛。纳达尔打得足够好，表现出了超强的韧性，有机会赢得冠军的，但他却输了比赛，给自己的人生留了一个很大的遗憾。但人生中，能够获得这样的一场比赛也是非常幸运的。不是每个人都有机会去在这样的舞台上为自己去打这样一场重要的比赛的。
昨天晚上，德约在15年的法网半决赛中五盘大战中赢了穆雷，来到了法网决赛，冲击属于他人生的全满贯。祝他好运！</description>
    </item>
    
    <item>
      <title>奶奶</title>
      <link>/posts/nainai/</link>
      <pubDate>Sun, 05 Apr 2015 10:35:36 +0000</pubDate>
      
      <guid>/posts/nainai/</guid>
      <description>我和弟弟从小是被奶奶带大的，直到我们前后出去念大学，才从奶奶身边离开。我们跟奶奶很亲。
奶奶是一个典型的农村妇女，她有三个儿子，两个女儿，另外还有一对继子，继女。二姑，也就是奶奶的大女儿，在二十年前患乳腺癌去世了。二姑走的时候，奶奶很伤心。每逢清明，她总是叮嘱我们记得给二姑烧纸。而爷爷，在我还未出生的时候就已经过世了。从奶奶口中得知爷爷是个脾气非常暴躁的人。爷爷过世的时候，我爸爸20岁不到，小叔叔15不到。至于奶奶和爷爷感情如何，奶奶没跟我们说过，我也未曾问起。
奶奶年轻时候生活的年代极其困难，这使得她养成了非常节约的习惯。小时候，家里面条件非常困难，我爸爸是木匠，每年都要外出务工，挣养家糊口的钱。每当我们想买些乱七八糟的的东西，奶奶都会告诫我们爸爸挣钱不容易，在外面打工很辛苦，不能乱花钱。奶奶会想办法帮我们家节约开支，隔断时间会让我和弟弟记日常支出的账，这个习惯我坚持到现在。
上学时，奶奶每天早起，给我们做饭，让我们吃完去上学。奶奶做的菜，口味偏咸。我最爱吃她煮的鱼，和红薯粉条。冬天的周末，三个人围着煤炉，吃热气腾腾的鱼，这算是少年时最开心的光景。
刚上大学的时候，爸爸打电话跟我说，你第一次一个人出远门，跟奶奶又生活了那么久，奶奶在家很想你，你要多打电话给她。这之后我养成了每个周末都会打电话给奶奶的习惯。电话内容大多数时候是我询问一下她的身体情况，奶奶跟我说一下她周遭发生的家长里短，让我在外头要注意安全之类的。有时候，我忘记打了，后来补打的时候，奶奶都会很担心的说：你怎么礼拜天没打电话。以为我出了什么事情。而我每次出门上学的时候，她都会包红包给我。这些红包，我没花，保留了下来留作纪念，弟弟也是如此。我们也是在最近才得知彼此做了相同的事情。
工作之后，只能在逢年过节的时候回趟家，看望一下奶奶。在家里，我和弟弟最喜欢做的事情就是坐在奶奶房门前的走廊上，陪着奶奶一起晒太阳。大多时候，弟弟陪着奶奶聊天，我只是呆坐在旁边，默默的听着。
近些年，奶奶一直说她自己身体不行了，估计时间不多了，还说假如真的走了，也不要回来，耽误了工作。每每听到她说这些，我们孙子辈都不太高兴，跟她说不要老是说死字。弟弟说，在今年春节的时候，他跟奶奶说，奶奶90岁的时候，他30岁，那时候，他也应该成家立业了。他说奶奶当时听到他这么说的时候很开心，还把这些话说给其他人听。而我也曾经幻想过能够带着自己建立的家庭回去探望她。
她今年86岁，近些年的日子过的孤单且并不顺心，时常生病。我在外头时不时会担心她的健康，偶尔还会做噩梦，梦见她走了，每次都会半夜吓醒，然后庆幸还好这只是个梦。今年3月18号的午后，农历的正月二十八，奶奶终于还是离开了我们。奶奶走的时候，我在从上海回桐城的路上，得知消息后我抬头朝家的方向望了望。
回家做丧事的时候，有段路，只有爸爸，弟弟，我三个人。爸爸说了句：奶奶走之后，整个人空空的，感觉生活没有意思。我“嗯”了一声。
奶奶走了半个多月，我们都非常想念她。
15年清明</description>
    </item>
    
    <item>
      <title>读书笔记：《一个自杀者的传说》</title>
      <link>/posts/legend-of-a-suicide/</link>
      <pubDate>Sun, 15 Mar 2015 15:13:30 +0000</pubDate>
      
      <guid>/posts/legend-of-a-suicide/</guid>
      <description>某一个巧合我得知了这本美国的畅销书《Legend of a suicide》,中文译作《一个自杀者的传说》，不得不肯定这本书光书名就有着很大的吸引力，让人远远就觉得该书讲述的故事应该不会太烂。
书中的前三个短片小说，基本上是在介绍他的父亲，母亲。从这些小故事我们大致知道，父亲是一名爱出海打鱼的牙医，经济状况应该很不错，有着自己的一家诊所。后来父亲出现婚外情，父母离婚，父亲重新结婚，后面却又再次离婚，导致精神状态非常的差。母亲这边虽然会和新的男人认识，却没有想再次步入婚姻的念头。书中所有的文字都很冷，没有哪怕一丝丝的温情在里头。
全书最为精彩的故事是中篇小说《苏宽岛》。父亲由于不堪现实生活中的糟糕状况，买了阿拉斯加上一座无人居住的小岛，然后邀请12的儿子罗伊一起跟他去小岛上生活一段时间。然而在儿子眼里看起来很坚强的父亲，非常缺乏野外生存的经验，加上心理状况不稳定，导致他们的生活条件日益恶劣，父子间的交流也没有想象中变的通畅起来，反而是越来越疏远。
从踏入岛上的第一天，他们把所有的精力都花在如何生存下去上，捕鱼，熏鱼，搭建木屋，以及筹备过冬的粮食，劳碌的日子可以避免沉默带来的尴尬。当中有一次父子两人远足，父亲直接踏进悬崖，试图自杀，罗伊费劲力气，以及极度的恐惧找到垂死的父亲，把他扛回小屋子中。事后，两人却没有对此事进行过真诚的交流。冬天来了之后，两人只能在屋子里吃着之前准备好的过冬的熏鱼，看书打发时间。但父亲此时却没法耐受住这种生活，三番四次的用无线电联系他的第二个前妻罗达，却听到罗达已经嫁人。崩溃的父亲把对着自己脑袋的枪丢给了从外面回来撞见这一幕的罗伊。然后独自一人跑了出去，却听到一声枪声从小屋传来，罗伊用枪打爆了自己的脑袋。这是全书最为令人震惊的转折，在我还在想象父亲最终会如何把自己作死，罗伊却用手枪打爆了自己的头颅。书名中的那个自杀者尽然是儿子，不是父亲。
岛上的孤独加上父亲糟糕的精神状态摧毁了罗伊，超出一个12岁少年能够承受的阴郁。罗伊父亲最后的结局也很悲惨，父亲费劲力气，终于把罗伊的尸体带回罗伊妈妈的身边。却被警方怀疑是他杀死了自己的儿子。他最后决定逃出美国，如是搭上一只渔船逃路，在船上，他被船长和副手扔进了大海，在孤独，冰冷的海水中死去了。
在想办法把儿子的尸体弄回母亲身边的路上，有一大段关于父亲内心世界的描写，作者直面人性内心，精彩异常。
阴冷的天气，荒无人烟的孤岛，和每一个看起来都那么孤独的灵魂。或许是由于我们有互联网，手机，电子游戏，动漫；如此这些东西可以让我们一直沉浸在一种不知所谓的忙碌中，让我们没有机会去直面那样子的孤独。这或许会让我们生活的更容易些吧。</description>
    </item>
    
    <item>
      <title>2014电影清单</title>
      <link>/posts/2014-movie-list/</link>
      <pubDate>Wed, 31 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/posts/2014-movie-list/</guid>
      <description>日本
萤火之森 Hotarubi no mori e 萤火虫之墓 Grave of the Firefiles 魔女宅急便 Kikis Delivery Service 穿越时空的少女 The Girl Who Leapt Through Time 寿司之神 Jiro Dreams Of Sushi 七武士 Seven Samurai 告白 Kokuhaku 如父如子 Soshite Chichi ni Naru 中国
后会无期 天注定 韩国
辩护人 法国
普罗旺斯的夏天 Avis de mistral 两天一夜 Deux jours une nuit 英美
狙击电话亭 Phone Booth 猩球崛起2：黎明之战 Dawn of the Planet of the Apes 星际穿越 Interstellar 彗星來的那一夜 Coherence 黑镜2014圣诞特辑 BlackMinor for 2014 christmas 消失的爱人 Gone Girl 内布拉斯加 Nebraska 大地惊雷 True Grit 重新开始 Begin Again 美国队长2 寒冬战士 Captain America:The WinterSoldier 为奴十二年 12 Years A Slave 爱在午夜降临前 Before Midnight 阅后即焚 Burn After Reading 云图 Cloud Atlas 卡特教练 Coach Carter 撞车 Crash 明日边缘 Edge of Tomorrow 特种部队2：全面反击 G.</description>
    </item>
    
    <item>
      <title>Regular Expression</title>
      <link>/posts/regular-expression-beginner/</link>
      <pubDate>Wed, 21 May 2014 00:00:00 +0000</pubDate>
      
      <guid>/posts/regular-expression-beginner/</guid>
      <description>#常用的元字符
代码 说明 | *前边的内容可以连续重复使用任意次以使整个表达式得到匹配 . | 匹配除了换行符以外的任意字符 \d | 匹配一位数字(0，或1，或2，或……) \w | 匹配字母或数字或下划线或汉字 \s | 匹配任意的空白符 \b | 匹配单词的开始或结束 ^ | 匹配字符串的开始 $ | 匹配字符串的结束 #常用的限定符
代码/语法 说明 | 重复零次或更多次 | 重复一次或更多次 ? | 重复零次或一次 {n} | 重复n次 {n,} | 重复n次或更多次 {n,m} | 重复n次到m次
#其他
字符转义 如需查找*,+等元字符本身的话，需使用\来取消这些字符的特殊含义；
\. \* 字符类 匹配没有预定义元字符的字符集合(比如元音字母a,e,i,o,u),只需在方括号里列出；如：
[aeiou]:	匹配任何一个英文元音字母； [.?!]:	匹配标点符号(.或?或!) (?0\d{2}[) -]?\d{8}：首先是一个转义字符(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\d{2})，然后是)或-或空格中的一个，它出现1次或不出现(?)，最后是8个数字(\d{8})
分枝条件 分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开
分组 用小括号来指定子表达式(也叫做分组）
e.g. IP地址匹配: (\d{1,3}.){3}\d{1,3} 解析：\d{1,3}匹配1到3位的数字，(\d{1,3}.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字(\d{1,3})
反义 常用的反义代码
代码/语法 说明 \W 匹配任意不是字母，数字，下划线，汉字的字符 \S 匹配任意不是空白符的字符 \D 匹配任意非数字的字符 \B 匹配不是单词开头或结束的位置 [^x] 匹配除了x以外的任意字符 [^aeiou] 匹配除了aeiou这几个字母以外的任意字符 后向引用</description>
    </item>
    
    <item>
      <title>Google Wildcard</title>
      <link>/posts/google-wildcard/</link>
      <pubDate>Thu, 10 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/posts/google-wildcard/</guid>
      <description>1.双引号
把搜索词放在双引号中，代表完全匹配搜索，也就是说搜索结果返回的页面包含双引号中出现的所有的词，连顺序也必须完全匹配。
“seo方法图片” 2.减号
减号代表搜索不包含减号后面的词的页面。使用这个指令时减号前面必须是空格，减号后面没有空格，紧跟着需要排除的词。
搜索 -引擎 3.星号
星号常用的通配符
搜索*擎 4.inurl
inurl: 指令用于搜索查询词出现在url 中的页面。
inurl:搜索引擎优化 5.inanchor
指令返回的结果是导入链接锚文字中包含搜索词的页面。
inanchor:点击这里 6.intitle
指令返回的是页面title 中包含关键词的页面。
7.allintitle
搜索返回的是页面标题中包含多组关键词的文件。
8.filetype
用于搜索特定文件格式。
filetype:pdf SEO 9.site
用来搜索某个域名下的所有文件。
site:developer.apple.com gcd </description>
    </item>
    
    <item>
      <title>Android reverse engineering</title>
      <link>/posts/android-reverse-engineering/</link>
      <pubDate>Sat, 01 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>/posts/android-reverse-engineering/</guid>
      <description>名词解释 java: android app 编程语言
class: 由 java文件通过 Sun JDK 编译而成
dex: Dex文件的指令码是Dalvik虚拟机专有的一套指令集，专门为嵌入式系统优化过，相比标准java的.class文件，它体积小，运行效率高。
ps:通过Android平台上的工具(dx)将.class文件 转换成Dex字节码（classes.dex）
odex: 在原生Android中安装apk会产生apk 和 odex 两个文件，而使用第三方的rom只有apk一个文件；odex 是同名apk经系统优化后的dex文件，原生ROM中apk和odex文件是配对的，对应的apk文件中没有了dex文件。
smali, baksmali:分别指android系统里的Java虚拟机（Dalvik）所使用的一种.dex格式文件的汇编器
ps: Smali文件是dalvik虚拟机运行的dex字节码文件对应的汇编文件。
Andoid App 的运行策略：解压apk后运行class.dex
工具介绍 ant: 编译，生成android 项目的工具； apktool： 用来解压 apk，虽说apk实际是一个压缩包，可以用unzip直接解压，不过apktool还是做了更多的优化，如直接reverse androidmanifest.xml smali-2.0.3.jar: 把smali 文件转换成 dex文件 baksmali-2.0.2.jar: 把dex文件转换成smali文件 dex2jar: dex 转换成 jar signapk.jar: 用来签名apk eclipse: 大多数android项目的IDE adb: android debug bridge;可用来 adb logcat 打印错误日志； adb push 来更新项目存在/data/data中的文件； JD-GUi:图形界面的Java源代码”.class”文件反编译工具 DEMO演示 首先我们需要一个 apk，我去到豌豆荚网页版下载一个名叫［百度］的apk；
使用 adb install baidu.apk到 手机，先把玩一下这个app的主要功能；差不多就是一个网页版的apk；
然后开始对这个apk动手脚；</description>
    </item>
    
  </channel>
</rss>
