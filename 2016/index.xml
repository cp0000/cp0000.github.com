<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2016s on CP0000 - 一只特立独行的猪</title>
    <link>https://cp0000.github.io/2016/</link>
    <description>Recent content in 2016s on CP0000 - 一只特立独行的猪</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://cp0000.github.io/2016/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://cp0000.github.io/2016/03/06/ios-reverse-engineering-03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cp0000.github.io/2016/03/06/ios-reverse-engineering-03/</guid>
      <description>title: iOS逆向工程-0x02－Hacking on B612 date: 2016-03-06 11:32:44 categories: Tech tags: iOS Reverse Engineering 前面两篇iOS逆向的文章（iOS逆向工程-0x00－用途以及准备工作,iOS逆向工程-0x01－工具篇-Cycript）主要是介绍iOS逆向的相关基础环境的搭建，工具的使用。有了这些知识之后，我们可以进行简单的逆向工作了。
B612是Line公司出品的一款非常棒的拍照软件。它的界面，交互，用起来非常顺手。app中的滤镜效果很赞，用户简单几步操作就可以生成一张很有质感的照片。本文我将会演示如何通过逆向来得知B612单个的滤镜的具体实现。
从AppStore上面下载B612的IPA文件，把文件的后缀名从 .IPA 修改成 .zip。解压zip文件之后，在Payload中有一个b612.app的文件，这里我们把.app的后缀去掉，让它变成一个文件夹，方便后面查阅。经过以上几步操作我们就拿到了 B612 app的 bundle 文件信息。
在使用B612的过程中，app会展列一个滤镜列表给用户进行选择（如下图）：
使用的过程发现一个叫 China 的滤镜，China，中国？还是瓷器？叫China的滤镜会呈现出什么样子的效果，根据效果我们是否能推测出这里的China是要翻译成中国，还是瓷器咧？很有意思的样子。我们就拿这个滤镜当做目标吧。
一般情况下，我的常用做法是在先前解压的文件夹中搜索一下相关的信息，碰碰运气。
find . -name &amp;quot;*china*&amp;quot; ./FilterThumb.bundle/filterthumb_china.jpg ./ObfuscateImages.bundle/lut/china.dat 运气不错。在ObfuscateImages.bundle发现了一个叫china.dat的文件。不过尝试用各种编辑器都没法打开，使用修改后缀名等之类的方法也没能成功打开。看来要获取这个文件的内容没有那么简单，开发者对这个文件做了相关加密工作。要想解密该文件，我们可能需要到汇编代码中寻找答案了。
这里考虑到程序在使用这个滤镜的时候，会加载该文件，并进行相关解密工作。所以下一步是要找到解密dat文件的地方，不过在此之前，我们还有一些工作要做。
解密可执行文件 - clutch 演示 接下来我们要去可执行文件中查询相关信息了。但是从苹果商店上面下载下来的IPA里面的可执行文件是被苹果加密过的,我们解谜它。我常用的工具是 clutch,你可以clone一份repo到本地，然后编译得到一个clutch的程序，也可以直接下载release版本。然后把Clutch scp 到你的越狱机器上面就可以使用了。
首先我们查找一下b612的bundle
iPhone:/usr root# ./Clutch -i|grep b612
28)
然后进行dump工作
iPhone:/usr root# ./Clutch -d com.linecorp.b612 &amp;hellip;. //程序输出相关log &amp;hellip;. DONE: /private/var/mobile/Documents/Dumped/com.linecorp.b612-iOS7.0-(Clutch-2.0 RC2).ipa
最后会生成一个解密了的ipa文件，我们把它scp到电脑上来，进行分析。
还有另外一个解密苹果商店加密IPA的工具叫dumpdecrypted。由于在使用Clutch解密app的时候，消耗内存比较大，导致运行时会出现解密失败的情况，这个时候可以尝试使用dumpdecrypted。
分析可执行文件 - class-dump 以及 IDA 要分析解密之后的文件，我们可以使用class-dump来导出程序的头文件。有了头文件列表之后，我们可以利用它来了解app的架构，使用的类库，以及探索需要逆向的那一块功能所属的类名。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cp0000.github.io/2016/06/11/pragmatic-thinking-and-learning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cp0000.github.io/2016/06/11/pragmatic-thinking-and-learning/</guid>
      <description>title: 《程序员的思维训练》读书笔记 author: cp categories: Reading notes date: 2016-06-11 16:21:36 tags: 技术从业人员的五个级别 书中开篇介绍一项技术领域的从业人员，大体可以分成五个级别：新手，高级新手，胜任者，精通者，专家。从名次表面就很好理解这五个级别所代表的意思。有意思的地方在于现在国内的大型互联网公司内部，技术人员的职级分类也是如此：初级工程师，工程师，高级工程师，资深工程师，专家。文中列举了一些各个级别的人的一些有意思的特征，如新手非常在乎他们是否成功，新手不是特别想要学习，他们只是想要一个立竿见影的效果，如果出错，他们非常容易慌乱。高级新手能够根据过去的经验，逐步在正确的情景中采纳建议，但他们不想要全局思维。胜任者是可以独立解决问题，并开始考虑如何解决新的问题，胜任者的工作更多的是基于谨慎的计划和过去的经验，如果没有更多的经验，在解决问题时，他们难以确定关注哪些细节。精通者能够纠正以往不好的工作表现，他们会反思以前是如何做的，并修改其做法，期望下一次表现得更好，如此，自我改进就会出现。专家根据直觉工作，而不需要理由，专家的数量很少，大概占总人数的1%～5%。
而要想而从新手一步一步升级成为专家，自身要发生如下三个重要变化才行：
从依赖规则向依赖直觉转变 观念的改变，问题已不再是一个相关度等同的所有单元的集合体，而是一个完整和独特的真题，其中某些单元是相关的。 最后，从问题的旁观者转变为问题涉及的系统本身的一部分。 然后，令人沮丧的是，研究表明，大多数人的大多数技能，在他们生命的大多数时间里，从没有高于第二阶段高级新手，这里的大多数指的是70%的人。
大脑的两种思考模式（L &amp;amp; R） 书中第二部分介绍了大脑两种思考模式，L模式－线性模式，R模式－富模式。R型对直觉。L型让你细致工作并实现目标。要想获得最佳性能，需要两种模式协同工作。
L型提供以下9种能力：
语言能力 分析能力 符号能力 抽象能力 实践能力 推理能力 数字能力 逻辑能力 线性思维能力 这些都是白领们，信息工作者和工程师们最渴望的本领。上学的时候测验也是这些能力。
R型提供的能力：
非语言 非理性 综合 空间性 具体 直觉 分析 全面 非线性 R型是非语言的，注重整体的，直觉的，跳跃的，这些特点似乎更适合艺术家。但R型的类比和整体思考方式对软件架构和设计非常有价值，好的设计就是由这些组成的。R型还负责综合，而综合是一项非常强大的学习技术。乃至于麻省理工学院媒体实验室创始人建议，真正想要了解一只青蛙，传统的解剖不是办法，更好的方式是构造一直青蛙。（联想到软件开发中，如果想真正搞透某个模块，重造轮子应该是最好的方式）。
接着书中谈到相对于L型，为何R型也如此重要。一家公司的产品是否能够成功，R型思维起到很重要因素。因为R型管理美学，而商品化意味着美学品味的竞争。**作者强调产品的设计胜于功能，是否有吸引力很重要。**好的设计，会给用户带来积极的情感，而积极的情感对学习和创造思维非常关键。处于“高兴”的状态可以扩展你的思维过程，激活更多的大脑物质（意味着用户从产品获取到快感，成就感，自然就会愿意使用产品）。
当然了，美学不仅仅指的是用户界面,产品的Logo，也包括代码和注释的布局，变量名的选择和桌面的整理，还有其他领域的方方面面。（此时，想起了乔布斯的那句“It&amp;rsquo;s all about the taste&amp;quot;）
##如何利用L型和R型协同工作## 然后书中第四章介绍了如何利用右脑，也就是如何促成R型到L型的转换。其中我觉得很有意思的是酒醉写作，酒醒修改。因为酒醉的时候，你拥有自由的创造空间，不受“常识”或者“实用”束缚，可以尽情发挥自己的创造力或随后抛掉那些荒诞的东西。
下面是举了几个关于 L 型和 R 型协调工作的其它几种方式：
结对编程：工作时，一个人用L型，一个人用R型 隐喻相通：隐喻，语言和意像共同的地基，是在左右脑半球之间，在潜意识和意识之间来回游弋的途径。隐喻时一种激发创造力的强大技术。 并列参照系 幽默：幽默既不是浪费时间，也不是无害的消遣，而是反映了思维，学习和创造所必需的重要能力。他与联系有关。幽默产生于在不同的想法中制造新奇的联系。在任何情况下，幽默的能力都来自于发掘或扩展常规之外的关系，真正突破思维界限。 文中还有一段关于外向和内向的人讨论。外向的人乐于与人交往并参加社会活动。内向的人则不是，他们具有领地意识，需要私人的精神和环境空间，内向的人从独立的活动中获得力量，厌倦社会活动。百分之七十五的人偏于外向型，剩下百分之二十五的人则希望单独呆着。
##学习
在当今技术和文化环境下，学习能力可能是成功的最重要因素。它决定了你是“大获全胜”还是“勉强通过”。
技术本身不重要，持续学习才是最重要的。 学习不是强加于你的，而是需要你主动做的事情 仅仅掌握知识，而不去实践，没有用 随机的方法，没有目标和反馈，往往会导致随机的结果 那如何在现实中使学习更有效率？需要使用SMART目标和实用投资计划管理目标和计划。
SMART 代表具体的，可度量的，可实现的，相关的和时间可控的（Specific，Measurable,Achievable,Relevant,and Time-boxed）。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cp0000.github.io/2016/07/30/shanghai-4-years/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cp0000.github.io/2016/07/30/shanghai-4-years/</guid>
      <description>title: 五年，四年 date: 2016-07-30 14:35:05 categories: Life tags: 2012年端午节前的一个礼拜，我买了张从南宁到上海的火车票,只身一人来到上海。
两个礼拜前我从广州的一家公司辞职。这家广州公司在南宁有一个更小的办公室，我11年刚毕业的时候找不到很好的工作，就先去那个小办公室上班；那时我和大学室友在公司附近一起租了一套房子，房主是戒毒所医生，一个个子小小的，为人和蔼的南宁阿姨；同年10月份，我被派去广州出差，那是我第一次去发达省份，第一次坐地铁，也第一次感受到大城市竞争的残酷性。不过那时我以为自己年底还会回南宁继续上班，所以还留了一些杂物在南宁，租的房子也没有退。
没想到，再次回南宁的时候，已经是决定离开这座城市了。我在南宁大概呆了一个多礼拜，见了南宁办公室的同事，并和他们一起去了趟北海玩了两天，那是我第二次去北海。在北海的两天，我和蒙哥（南宁办公室的老大）一起住的一个标准间，夜里我们七七八八聊了一些；我只记得他跟我讲了他在IBM当销售的时候是怎么搞定客户的故事，和他对未来的一些打算，似乎有挽留之意，我含糊中转移了话题。从北海回南宁后，约了几个大学同学聚餐，地点在西大后面农院路的街头。尔后退了房子，收拾好行李，临走的前一天，我一个人去西大走了走，看了看。然后搭上火车，和这个呆了四年多的城市道别了。
刚来上海的头两个礼拜，我借住在朋友那里；朋友住在他自己租在桂林路地铁站附近的一间小屋子里；那个小格子间是我经历过的条件最艰苦的住宿环境，小小的隔间，只有四五平方米，屋子里还臭气一阵阵。那段时间，我疯狂的投简历，只要人家约我去面试，我都要跑去试试看，一心想把自己买一个好价钱。最终，我去到上家公司上班，公司叫 yeecco。找好工作之后，我从朋友的小隔间里面搬了出来。我无意冒犯这位朋友，只是觉得人应该对自己好一点，那样的住宿环境现在想起来我都会觉得难受。
新租的房子在淞虹路地铁站附近，隔壁住的是一对刚毕业的情侣。有了工作和住的地方，我稍微定心了些，没有刚来的时候那么惶恐。
那段日子，早上我从淞虹路坐地铁到静安寺上班。半个小时拥挤的地铁中，我会看一会书；印象中看的是稻盛和夫的《活法》。这本书可能会被现在的人诟病，但对一个初来乍到，在这个都市一个帮手都没有的人来讲，不失为一本很好的精神慰藉。它让我把所有的精力都放在新工作上，让我不要多想，做好眼前事，明日事明日议。
新工作并不容易，公司做的项目是 StellaSDK，对于当时的我来讲，项目中大多数知识是我没接触过的，很多东西无从下手。那段时间，我拼命学习，工作。经常会在地铁里面，思考到某个点，恨不能马上拿电脑验证一下；又会因为某个问题没思路解决不了，导致压力太大吃不下饭。但回过头来看，那段经历对自己编程技术的提升帮助很大，让我养成了很好的学习新技术的习惯和方法，不畏惧任何不懂的技术领域。我很感激老大wenqi，那时候他对我也很好（一个会夜里开车送你回家的老大不是那么的常见），我的技术，习惯，思考方式，以及保持勤奋全都是从他身上学得，非常感激他。
后来，由于一些原因我离开了上家公司，来到了腾讯。如今，算算我已经毕业五年，来到上海也已经四年；看起来情况在变好，至于未来，应该会变得更好一些吧。
后记：
不知道其它人会不会有这样一种感觉，在生活中的某个阶段，你会突然意识到自己生命中的一切都只能靠你自己。我有这种感觉是在我刚毕业的时候。在那段时间里的某一刻，我突然意识到接下来的一切，钱，工作，女人，以及所有的渴望都只有靠自己。你是你唯一的依靠。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cp0000.github.io/2016/09/25/2016-1st-half/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cp0000.github.io/2016/09/25/2016-1st-half/</guid>
      <description>title: 2016上半年电影，美剧，以及书 清单 date: 2016-09-25 23:05:21 author: cp categories: Movie tags: 电影 中国 饮食男女 喜宴 推手 李安“父亲”三部曲；在三部电影里面，饰演男主角的郎雄，都给人一种很亲切的感觉，让人很喜爱这老头儿。最喜欢《饮食男女》中吴倩莲饰演的二姐，走在最先锋的人，却最终选择了守住传统。
北京遇上西雅图之不二情书 加分的是那对老夫妇，以及老爷子身上的文人气质
寒战2 梁sir还是那么棒
使徒行者 火锅英雄 老炮儿 日本 步伐不停 平淡的，生活化的，舍不得结束的
海街日记 依旧是平淡的，生活化的，舍不得结束的
怪物之子 美国 谍影重重5
熟悉的伯恩回来了，但感觉整个的电影的高潮部分是在希腊街头的那段追杀。
火星救援
最爱马特呆萌种土豆那一段
十二怒汉
剧情精彩，回味无穷
生为蓝调
冲着伊桑霍克看的
功夫熊猫3
疯狂动物城
蝙蝠侠大战超人：正义黎明
奇幻森林
美国队长3
泰山归来：险战丛林
九条命
X战警：天启
硬核亨利
###韩国
哭声 看完堵得慌
美剧 毒枭第二季
和第一季一样，还是那个魔幻的哥伦比亚
权利的游戏第六季
私生子之战，我看了三遍了
绝命律师第二季
好看，推荐
黑客军团第二季
强迫症让我看完了第二季，应该会看第三季
怪奇物语
为了拍第二季，第一季的结尾让人不适，不打算看第二季
书 《你是一切的答案》 《程序员的思维锻炼》 读书笔记
没写评论的，在我看来是可看可不看的</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cp0000.github.io/2016/10/22/install-caffe-on-macosx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cp0000.github.io/2016/10/22/install-caffe-on-macosx/</guid>
      <description>title: 如何在Macosx上安装caffe date: 2016-10-22 12:55:05 categories: Tech tags: 在macosx上面安装深度学习框架caffe是个相对比较麻烦的过程。如果根据caffe项目的install_osx文件指引去安装，会遇到一些问题。所以我决定把自己的安装过程记录下来。
硬软件环境
电脑：iMac 系统：OX EI Caption 版本10.11.4 Homebrew 官方推荐使用Homebrew来管理依赖项的下载，安装。
##Anaconda Python Anaconda是python的一个常用的科学计算发行版，自带包管理器conda。从 https://store.continuum.io/cshop/anaconda/ 下载并安装Anaconda Python。安装成功之后,记得在PATH添加ananconda执行文件的路径：
export PATH=~/anaconda/bin:$PATH CUDA 从 https://developer.nvidia.com/cuda-downloads 下载并安装CUDA 8.0 (for OSX)
从 http://www.nvidia.com/object/mac-driver-archive.html 下载并安装最新的CUDA独立驱动。 同样我们把驱动的可执行文件路径添加到PATH环境变量中(注意下载安装的CUDA的版本号)：
export PATH=/Developer/NVIDIA/CUDA-8.0/bin/$PATH export DYLD_LIBRARY_PATH=/Developer/NVIDIA/CUDA-8.0/lib:$DYLD_LIBRARY_PATH BLAS 网上搜索到的教程中都是使用Intel MKL，查看网站会发现intel-mkl收费很贵，所以我安装的时候选择了OpenBLAS
brew install openblas 关于 intel-mkl 和 openblas 的优劣，没有做过比较。在校大学生可通过学校邮箱在页面 https://software.intel.com/en-us/qualify-for-free-software/student 申请安装包。
##cuDNN
从 https://developer.nvidia.com/cudnn 页面下载并安装cuDNN库,安装过程如下：
tar -xzvf cudnn-8.0-osx-x64-v5.1.tgz cd cuda sudo cp lib/* /usr/local/cuda/lib sudo cp include/cudnn.h /usr/local/cuda/include/ ##安装依赖项 via Homebrew</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cp0000.github.io/2016/10/26/28/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cp0000.github.io/2016/10/26/28/</guid>
      <description>title: &amp;ldquo;活到28&amp;rdquo; date: 2016-10-26 23:49:23 categories: Life tags: 信则有，不信则无-这句话带有非常强烈的主观臆断色彩。我不认同这句话中携带的我思故我在式的思维模式，但不可否认在特定条件下，这句话会对一个人起到良好的心理按摩作用。
就个人而言，学习OpenGL编程是一个难度相对大的技术。也许是因为没有学习过计算机图形学，在学习OpenGL编程期间，会遇到各种不懂的名词概念：着色器，光栅化，纹理，帧缓存；OpenGL本身的状态机也不是很好理解；加上不友好的开发工具链（无法打印GPU数据，OpenGL crash堆栈信息很少）。这三点导致学习OpenGL是一门入门难度比较大，学习曲线陡峭的技术。刚开始的时候，困难的确比较多，很容易失去信心；这个时候，如果对自己说一句信则有，相信这东西自己是可以学出来。坚持持续不断的看教程，动手试错，最终是可以学出来的。
同样，在学习蛙泳的时候，在升职答辩的时候，在健身的时候，在极限运动的时候；面对深水区的恐惧，主考官的质问，肌肉的酸痛，呼吸的急促，死亡的恐惧。我们需要鼓起勇气，运用我们一直练习的学习技巧，观察别人怎么做的，思考自己哪里做的不对，不停的模仿，不断的试错重来，不怕失败，自信每次都会有所进步，最终能够扛过这座山。
如果说在28岁生日这一天，回顾过去一年，我有什么收获的话，
“立志不坚，终不济事。” &amp;ndash;（宋）朱熹
这句话是我最大的收获。
对了，如果实在找不到信心的话，就这样想：&amp;ldquo;这么多人都行，我怎么可能不行&amp;rdquo;。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cp0000.github.io/2016/11/07/ffmpeg-command-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cp0000.github.io/2016/11/07/ffmpeg-command-example/</guid>
      <description>title: ffmpeg 使用例程 date: 2016-11-07 21:03:47 author: cp categories: Tech tags: 本文介绍ffmpeg命令行的一些使用方法；
参数 主要参数 -i——设置输入档名。 -f——设置输出格式。 -y——若输出文件已存在时则覆盖文件。 -fs——超过指定的文件大小时则结束转换。 -ss——从指定时间开始转换。 -t从-ss时间开始转换（如-ss 00:00:01.00 -t 00:00:10.00即从00:00:01.00开始到00:00:11.00）。 -title——设置标题。 -timestamp——设置时间戳。 -vsync——增减Frame使影音同步。 视频参数 -b:v——设置视频流量，默认为200Kbit/秒。（单位请引用下方注意事项） -r——设置帧率值，默认为25。 -s——设置画面的宽与高。 -aspect——设置画面的比例。 -vn——不处理视频，于仅针对声音做处理时使用。 -vcodec( -c:v )——设置视频视频编解码器，未设置时则使用与输入文件相同之编解码器。 声音参数 -b:a——设置每Channel（最近的SVN版为所有Channel的总合）的流量。（单位请引用下方注意事项） -ar——设置采样率。 -ac——设置声音的Channel数。 -acodec ( -c:a ) ——设置声音编解码器，未设置时与视频相同，使用与输入文件相同之编解码器。 -an——不处理声音，于仅针对视频做处理时使用。 -vol——设置音量大小，256为标准音量。（要设置成两倍音量时则输入512，依此类推。） ##例子
不过在使用中可能需要用一些不常用的命令行去做一些视频编辑的功能，如下几个例子：
裁剪视频 比如有一个横向视频,分辨率是1280X720，如果指向保留中间的405*720部分，可以使用下面的命令：
ffmpeg -i input.mp4 -strict -2 -vf crop=405:720:420:0 video_out.mp4 其中的crop=405:720:420:0 裁剪参数，具体含义是：crop=width:height:x:y.其中 width和height便是裁剪后的尺寸，x:y 表示裁剪区域的左上角坐标。
视频转换成图片 ffmpeg -i input.mp4 image%3d.png 也可以指定视频导出的图片的帧率，（1s的视频生成的图片的个数）
ffmpeg -i input.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cp0000.github.io/2016/12/11/2016-summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cp0000.github.io/2016/12/11/2016-summary/</guid>
      <description>title: 2016年度总结 date: 2016-12-11 14:56:52 tags: 娱乐 年度电影
海街日记
年度歌曲
热河
年度美剧
Game of Thrones
年度书籍
最好的告别
年度Podcast
太医来了
年度电视节目
晓松奇谈
体育 年度NBA比赛
15-16赛季，西部决赛第七场
金州勇士-俄克拉何马城雷霆
年度足球比赛
15欧锦赛 1/4 决赛：德国-意大利
工作 年度编程语言
OpenGL
年度App
MSQRD
年度开源项目
GPUImage
年度工具
macOS / iOS 备忘录</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cp0000.github.io/2016/12/18/opengl-3d-matrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cp0000.github.io/2016/12/18/opengl-3d-matrix/</guid>
      <description>title: OpenGL ES 2.0 3D基础（1）－矩阵 date: 2016-12-18 14:37:53 categories: Tech author: cp tags: Overview 移动设备的屏幕是二维平面,要想把一个三维场景渲染在手机二维屏幕上，需要利用OpenGL中的矩阵投射，将三维空间中的点映射到二维平面上。三维矩阵的相关知识是学习OpenGL最重要的课程之一。
线性代数 学习OpenGL三维投射知识之前，我们得事先了解下一些基础的线性代数知识，如向量运算，矩阵运算。
向量运算 向量: 指一个同时具有大小和方向的几何对象，因常常以箭头符号表示以区别于其它量而得名。
向量加减 向量的加（减）法定义是分量的相加（减），即将一个向量中的每一个分量加上（减去）另一个向量的对应分量：
向量相乘 点乘 叉乘 矩阵运算 矩阵简介 数学上，一个 m x n 的矩阵是一个m行n列元素排列成的矩形阵列。以下是一个由6个数字元素构成的3行3列的矩阵：
矩阵运算规则 矩阵的加减 矩阵与标量之间的加减：
矩阵与矩阵之间的加减： 矩阵乘法 矩阵数乘 矩阵相乘 单位矩阵 在OpenGL中，由于大部分的向量都是4分量 （x,y,z,w）,所以我们通常使用 4x4 的变换矩阵。当中最简单的变换矩阵是单位矩阵。单位矩阵是一个除了对角线以外都是0的NxN矩阵。
单位矩阵通常是生成其他变换矩阵的起点。
缩放矩阵 对一个向量进行缩放指的是对向量的长度进行缩放，而保持它的方向不变。
位移矩阵 位移是在原始向量的基础上加上另一个向量从而获得一个在不同位置的新向量的过程，从而在位移向量基础上移动原始向量。 旋转矩阵 （Rx,Ry,Rz）代表任意旋转轴，θ是角度： 累积变换 上面接受啊了如何旋转，平移和缩放向量。把这些矩阵相乘组合起来如下：
TransformedVector = TranslationMatrix * RotationMatrix * ScaleMatrix * OriginalVector; 这行代码首先执行缩放，接着旋转，最后才是平移
坐标系统 OpenGL在每次顶点着色器运行后，所有顶点都为标准化设备坐标，每个顶点（x,y,z）都应该在-1.0d到1.0之间。通常情况下，我们会根据画布（屏幕）的大小设定一个坐标范围，在顶点着色器中将这些坐标转换为标准化设备坐标。在项目中，物体坐标最终被转化为屏幕坐标之前会变换到多个坐标系统，因为在相应的过度坐标系中做特定运算会方便容易一些。对我们来讲，一般情况下需要用到5个不同的坐标系统：
局部空间（Local Space）：物体起始坐标；如一个正方体a，原点是正方体的中心O1（0，0，0）。
世界空间（World Space）：物体在更大的空间范围的坐标；如我们构造了一个圆球来表示世界,圆心为世界坐标原点O2，把正方体放在圆球中t(x1,y1,z1)位置。那么正方体a的圆心O1在世界系统会转化为（x1,y1,z1）。物体的坐标从局部坐标变换到是世界坐标由模型矩阵（Model Matrix）负责实现。</description>
    </item>
    
  </channel>
</rss>
